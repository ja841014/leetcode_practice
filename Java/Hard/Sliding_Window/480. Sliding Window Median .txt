// using maxHeap to store half of samller window elements
// using minHeap to store half of bigger window elements
// The difference between the two heap is at most one element, maxheap size always >= minheap
// removing the element out pf window using pq.remove() method which can find the specific element and remove it
/*
Median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle value.

Examples:
[2,3,4] , the median is 3
[2,3], the median is (2 + 3) / 2 = 2.5
Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position. Your job is to output the median array for each window in the original array.
For example,
Given nums = [1,3,-1,-3,5,3,6,7], and k = 3.
Window position                Median
---------------               -----
[1  3  -1] -3  5  3  6  7       1
 1 [3  -1  -3] 5  3  6  7       -1
 1  3 [-1  -3  5] 3  6  7       -1
 1  3  -1 [-3  5  3] 6  7       3
 1  3  -1  -3 [5  3  6] 7       5
 1  3  -1  -3  5 [3  6  7]      6
Therefore, return the median sliding window as [1,-1,-1,3,5,6].
*/
class Solution {
    public double[] medianSlidingWindow(int[] nums, int k) {
        Comparator<Integer> comparator = (a, b) -> (nums[a] != nums[b] ? Integer.compare(nums[a], nums[b]) : Integer.compare(a, b));

        // store the biggest part
        TreeSet<Integer> minHeap = new TreeSet<>(comparator.reversed());
        // store the smaller part
        TreeSet<Integer> maxHeap = new TreeSet<>(comparator);
        int size = nums.length;
        double[] res = new double[size - k + 1];
        
        for(int i = 0; i < size; i++) {
            if(i < k - 1) {
                addNum(minHeap, maxHeap, i);
                continue;
            }
            addNum(minHeap, maxHeap, i);
            res[i - k + 1] = getMid(minHeap, maxHeap, nums);
            

            if(!minHeap.isEmpty() && minHeap.contains(i - k + 1)) {
                minHeap.remove(i - k + 1);
            }
            else if(!maxHeap.isEmpty() && maxHeap.contains(i - k + 1)) {
                maxHeap.remove(i - k + 1);
            }

        }
        return res;
    }

    private double getMid(TreeSet<Integer> minHeap, TreeSet<Integer> maxHeap, int[] nums) {
        double res = 0.0;
        if(minHeap.size() == maxHeap.size()) {
            res =  ((double)  nums[minHeap.first()] + nums[maxHeap.first()] ) / 2.0;
        }
        else {
            res =(double) nums[minHeap.first()];
        }
        return res;
    }

    private void addNum(TreeSet<Integer> minHeap, TreeSet<Integer> maxHeap, int idx) {
        maxHeap.add(idx);
        minHeap.add(maxHeap.pollFirst());
        if(minHeap.size() - maxHeap.size() > 1) {
            maxHeap.add(minHeap.pollFirst());
        }
    }
}