/**

You are given an integer array nums and two integers minK and maxK.
A fixed-bound subarray of nums is a subarray that satisfies the following conditions:
The minimum value in the subarray is equal to minK.
The maximum value in the subarray is equal to maxK.
Return the number of fixed-bound subarrays.
A subarray is a contiguous part of an array.

Example 1:
Input: nums = [1,3,5,2,7,5], minK = 1, maxK = 5
Output: 2
Explanation: The fixed-bound subarrays are [1,3,5] and [1,3,5,2].

Example 2:
Input: nums = [1,1,1,1], minK = 1, maxK = 1
Output: 10
Explanation: Every subarray of nums is a fixed-bound subarray. There are 10 possible subarrays.
 */
class Solution {
    public long countSubarrays(int[] nums, int minK, int maxK) {
        long res = 0;
        int leftBound = -1;
        int minKIdx = -1;
        int maxKIdx = -1;
        int size = nums.length;
        for(int i = 0; i < size; i++) {
            if(nums[i] < minK || nums[i] > maxK) {
                leftBound = i;
            }

            if(minK == nums[i]) {
                minKIdx = i;
            }
            if(maxK == nums[i]) {
                maxKIdx = i;
            }
            // leftbound always need to be larger than minIdx and maxIdx
            res += Math.max(0, Math.min(minKIdx, maxKIdx) - leftBound);

        }
        return res;
    }
}
