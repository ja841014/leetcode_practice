/**
Two strings, X and Y, are considered similar if either they are identical or we can make them equivalent by swapping at most two letters (in distinct positions) within the string X.
For example, "tars" and "rats" are similar (swapping at positions 0 and 2), and "rats" and "arts" are similar, but "star" is not similar to "tars", "rats", or "arts".
Together, these form two connected groups by similarity: {"tars", "rats", "arts"} and {"star"}.  Notice that "tars" and "arts" are in the same group even though they are not similar.  Formally, each group is such that a word is in the group if and only if it is similar to at least one other word in the group.
We are given a list strs of strings where every string in strs is an anagram of every other string in strs. How many groups are there?

Example 1:
Input: strs = ["tars","rats","arts","star"]
Output: 2

Example 2:
Input: strs = ["omv","ovm"]
Output: 1
 */

class UnionFind {
    int[] parent;
    int[] rank;

    public UnionFind(int size) {
        parent = new int[size];
        // set up init parant val => itself
        for (int i = 0; i < size; i++)
            parent[i] = i;
        rank = new int[size];
    }

    public int find(int x) {
        if (parent[x] != x)
            parent[x] = find(parent[x]);
        return parent[x];
    }

    public void union_set(int x, int y) {
        int xset = find(x), yset = find(y);
        if (xset == yset) {
            return;
        } else if (rank[xset] < rank[yset]) {
            parent[xset] = yset;
        } else if (rank[xset] > rank[yset]) {
            parent[yset] = xset;
        } else {
            parent[yset] = xset;
            rank[xset]++;
        }
    }
}

class Solution {
    public int numSimilarGroups(String[] strs) {
        int n = strs.length;
        UnionFind uf = new UnionFind(n);
        int count = n;
        // Form the required graph from the given strings array.
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (isSimilar(strs[i], strs[j]) && uf.find(i) != uf.find(j)) {
                    count--;
                    uf.union_set(i, j);
                }
            }
        }

        return count;
    }

    // public int numSimilarGroups(String[] strs) {
    //     int n = strs.length;
    //     Map<Integer, List<Integer>> adj = new HashMap<>();
    //     boolean[] visited = new boolean[n];
    //     int count = 0;
    //     // Form the required graph from the given strings array.
    //     for (int i = 0; i < n; i++) {
    //         for (int j = i + 1; j < n; j++) {
    //             if (isSimilar(strs[i], strs[j])) {
    //                 adj.computeIfAbsent(i, k -> new ArrayList<Integer>()).add(j);
    //                 adj.computeIfAbsent(j, k -> new ArrayList<Integer>()).add(i);
    //             }
    //         }
    //     }

    //     for(int i = 0; i < n; i++) {
    //         if(!visited[i]) {
    //             bfs(i, adj, visited);
    //             count++;
    //         }
    //     }


    //     return count;
    // }

    private boolean isSimilar(String a, String b) {
        int diff = 0;
        for(int i = 0; i < a.length(); i++) {
            if(a.charAt(i) != b.charAt(i)) {
                diff++;
            }
        }
        return diff == 0 || diff == 2;
    }

    // public void bfs(int idx, Map<Integer, List<Integer>> adj, boolean[] visited) {
    //     Queue<Integer> q = new LinkedList<>();
    //     q.offer(idx);
    //     visited[idx] = true;

    //     while(!q.isEmpty()) {
    //         int size = q.size();
    //         for(int i = 0; i < size; i++) {
    //             int curPos = q.poll();
    //             if(!adj.containsKey(curPos)) {
    //                 continue;
    //             }
    //             for(int nextPos: adj.get(curPos)) {
    //                 if(!visited[nextPos]) {
    //                     visited[nextPos] = true;
    //                     q.offer(nextPos);
    //                 }
    //             }
    //         }
    //     }
    // }
}
