/*
Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

Example 1:
Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.

Example 2:
Input: height = [4,2,0,3,2,5]
Output: 9
*/
class Solution {
    public int trap(int[] height) {
        Stack<Integer> st = new Stack<>();
        int curIdx = 0;
        int res = 0;
        
        while(curIdx < height.length) {
            // if next height is greater than current height
            while(!st.isEmpty() && height[st.peek()] < height[curIdx] ) {
                // bottom height
                int stackTopIdx = st.pop();
                if(st.isEmpty()) {
                    break;
                }
                // 計算填平所需距離
                int length = curIdx - st.peek() - 1;
                // 計算中間需要填平的高度
                int localHeight = Math.min(height[curIdx], height[st.peek()]) - height[stackTopIdx];
                
                res = res + length * localHeight;
                
            }
            st.push(curIdx++);
        }
        return res;
            
    }
}
/*
class Solution {

    public int trap(int[] height) {
        // if next is bigger -> alter
        // else if next is small -> record
        //      if next is 
        if(height.length == 0) {
            return 0;
        }
        Stack<Cell> st = new Stack<>();
        int count = 0;
        st.push(new Cell(count, height[count]));
        count++;
        int res = 0;
        while(count < height.length) {
            Cell preCell = null;
            System.out.println("new round:" + "===========");
            while(!st.isEmpty() && height[count] >= st.peek().val ) {
                preCell = st.pop();
                System.out.println("preCell pop: " + preCell.idx);
            }
            if(preCell != null) {
                int thisRound;
                // According the stack is empty or not, put left boundary will change.
                if(!st.isEmpty()) {
                    thisRound = calHelper(height, count, st.peek().idx);
                } 
                else {
                    thisRound = calHelper(height, count, preCell.idx);
                }
                System.out.println("thisRound sum: " + thisRound);
                res = res + thisRound;
            }
            st.push(new Cell(count, height[count]));
            System.out.println("Cell push: " + st.peek().idx);
            count++;
        }
        
        return res;
    }
    
    
    public int calHelper(int[] height, int rightIdx, int leftIdx) {
        
        int minHeight = Math.min(height[leftIdx], height[rightIdx]);
        System.out.println("calHelper: " + leftIdx + " " + rightIdx);
        int sum = 0;
        rightIdx--;
       
        while(rightIdx > leftIdx) {
            sum = sum + minHeight - height[rightIdx];
            height[rightIdx] = minHeight;
            rightIdx--;
        }
        return sum;
    }
    
    public class Cell {
        int val;
        int idx;
        public Cell(int idx, int val) {
            this.val = val;
            this.idx = idx;
        }
    }
}*/