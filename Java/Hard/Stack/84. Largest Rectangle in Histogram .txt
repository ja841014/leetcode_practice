// Similar problem:https://leetcode.com/problems/daily-temperatures/discuss/563983/Java-using-mono-increasing-Stack-from-end-of-Array
/*
Given n non-negative integers representing the histogram's bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.

*/
class Solution {
    public int largestRectangleArea(int[] heights) {
        if(heights.length == 0) {
            return 0;
        }
        Stack<Integer> st = new Stack<>();
        int max = 0;
        
        for(int i = 0; i <= heights.length; i++) {
            int currHeight = i == heights.length ? 0 : heights[i];
            while(!st.isEmpty() && currHeight < heights[st.peek()]) {
                int tmp = st.pop();
                // isEmpty() means the value before you are all bigger than you
                max = Math.max(max, heights[tmp] * (st.isEmpty() ? i : i - st.peek() - 1 ) );
            }
            st.push(i);
        }
        return max;
        
        
    }
    
    
    
    
    
//     public int largestRectangleArea(int[] heights) {
//         return divideAndConquer(heights, 0, heights.length - 1);
//     }
    
//     private int divideAndConquer(int[] heights, int start, int end) {
        
//         if(start > end) {
//             return 0;
//         }
//         // find min
//         // int min = Integer.MAX_VALUE;
//         int minIndex = start;
//         for(int i = start; i <= end; i++) {
//             if(heights[minIndex] > heights[i]) {
//                 // min = heights[i];
//                 minIndex = i;
//             }
//         }
        
//         return Math.max(Math.max(divideAndConquer(heights, start, minIndex - 1), divideAndConquer(heights, minIndex + 1, end) ), heights[minIndex] * (end - start + 1) );
        
        
//     }
}