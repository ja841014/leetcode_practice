/*
You are given an array arr which consists of only zeros and ones, divide the array into three non-empty parts such that all of these parts represent the same binary value.
If it is possible, return any [i, j] with i + 1 < j, such that:
arr[0], arr[1], ..., arr[i] is the first part,
arr[i + 1], arr[i + 2], ..., arr[j - 1] is the second part, and
arr[j], arr[j + 1], ..., arr[arr.length - 1] is the third part.
All three parts have equal binary values.
If it is not possible, return [-1, -1].

Note that the entire part is used when considering what binary value it represents. For example, [1,1,0] represents 6 in decimal, not 3. Also, leading zeros are allowed, so [0,1,1] and [1,1] represent the same value.

Example 1:
Input: arr = [1,0,1,0,1]
Output: [0,3]

Example 2:
Input: arr = [1,1,0,1,1]
Output: [-1,-1]

Example 3:
Input: arr = [1,1,0,0,1]
Output: [0,2]
*/
class Solution {
    public int[] threeEqualParts(int[] arr) {
        int totalOne = 0;
        for(int i : arr) {
            if(i == 1) {
                totalOne++;
            }
        }
        
        if(totalOne % 3 != 0) {
            return new int[]{-1, -1};
        }
        if(totalOne == 0) {
            return new int[]{0, arr.length - 1};
        }
        
        int avgOne = totalOne / 3;
        int count = 0;
        int start = 0;
        int mid = 0;
        int end = 0;
         for(int i = 0; i < arr.length; i++) {
             // all zero will be ignored
             if(arr[i] == 0) {
                 continue;
             }
             
             if(count == 0) {
                 start = i;
             }
             // Because all zero will be ignored, "count" will only count value = 1
             count++;
             
             if(count == avgOne + 1) {
                 // the head of second pattern
                 mid = i;
             }
             if(count == 2 * avgOne + 1) {
                 // the head of third pattern
                 end = i;
                 break;
             }
             
             
         }
        // end will plus until hit the arr.length
        while(end < arr.length && arr[start] == arr[mid] && arr[mid] == arr[end] && arr[end] == arr[start]) {
            start++;
            mid++;
            end++;
        }
        if(end != arr.length) {
            return new int[]{-1, -1};
        }
        return new int[]{start - 1, mid};
        
    }
    
}