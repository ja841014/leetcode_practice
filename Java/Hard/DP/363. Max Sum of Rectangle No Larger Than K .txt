/*
Given an m x n matrix matrix and an integer k, return the max sum of a rectangle in the matrix such that its sum is no larger than k.

It is guaranteed that there will be a rectangle with a sum no larger than k.

Input: matrix = [[1,0,1],[0,-2,3]], k = 2
Output: 2
Explanation: Because the sum of the blue rectangle [[0, 1], [-2, 3]] is 2, and 2 is the max number no larger than k (k = 2).

[[1,1,1,1],[0,-2,3,-4],[1,4,1,5],[-3,-5,-2,0]]
6
*/

// 這個很像brute force
class Solution {
    int res;
    public int maxSumSubmatrix(int[][] matrix, int k) {
        int row = matrix.length;
        int col = matrix[0].length;
        res = Integer.MIN_VALUE;
        
        for(int time = 0; time < row; time++) {
            // prefix sum
            int[] rowSum = new int[col];
            // 類似多條垂直的 prefix sum array 從上往下加
            for(int i = time; i < row; i++) {
                for(int j = 0; j < col; j++) {
                    rowSum[j] = rowSum[j] + matrix[i][j];
                }
                // 把這多條垂直單一的 prefix sum array 從左往右加
                updateResult(k, rowSum);
                if(res == k) {
                    return res;
                }
            }
        }
        return res;
    }
    
    public void updateResult(int k, int[] arr) {
        TreeSet<Integer> ts = new TreeSet<>();
        ts.add(0);
        int sum = 0;
        
        for(int num : arr) {
            sum = sum + num;
            Integer x = ts.ceiling(sum - k);
            
            if(x != null) {
                res = Math.max(res, sum - x);
            }
            
            ts.add(sum);
        }
    }
}

