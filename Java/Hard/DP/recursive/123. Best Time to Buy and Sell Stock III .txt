/* https://cpexplanations.blogspot.com/2021/04/123-best-time-to-buy-and-sell-stock-iii.html
You are given an array prices where prices[i] is the price of a given stock on the ith day.
Find the maximum profit you can achieve. You may complete at most two transactions.
Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

Example 1
Input: prices = [3,3,5,0,0,3,1,4]
Output: 6
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.

Example 2:
Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.

Example 3:
Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.

Example 4:
Input: prices = [1]
Output: 0
*/

class Solution {
    public int maxProfit(int[] prices) {
        int size = prices.length;
        Integer[][] dp = new Integer[size][5];
        int res = helper(prices, dp, 0, 0);
        if(res <= 0) {
            return 0;
        }
        return res;
    }
    // condition => 
    // 0: buy
    // 1: sold
    // 2: buy
    // 3: sold
    public int helper(int[] prices, Integer[][] dp, int condition, int index) {
        // already buy two sold two. Therefore, we do a early terminate
        if(condition == 4) {
            return 0;
        }
        
        // this point should not be a point when we but the stock
        if(index == prices.length - 1) {
            // therfore, if condition is even => we want make this decision be the impossible decision
            // because when we buy it, our profit will decrease
            if(condition % 2 == 0) {
                return Integer.MIN_VALUE;
            }
            return prices[index];
        }
        
        if(dp[index][condition] != null) {
            return dp[index][condition];
        }
        
        int curCost = condition % 2 == 0 ? -prices[index] : prices[index];
            //              remain                                      buy or sold
        int ans = Math.max(helper(prices, dp, condition, index + 1),  curCost + helper(prices, dp, condition + 1, index + 1));
        dp[index][condition] = ans;
        // 賣出低一個stock
        // 檢查之後賣出的stock有沒有比現在這個stock更值錢
        // 握欸condition = 1上一層是0 => curCost 是負數 
        if(condition == 1) {
            //                              之後第二個買賣賺錢       還是這裡賣掉賺錢
            dp[index][condition] = Math.max(dp[index][condition], prices[index]);
        }
        return dp[index][condition];
     }
    
    // recursion without memo
//     public int maxProfit(int[] prices) {
//         return helper(prices, 0, 0, false, 0);
//     }
    
//     public int helper(int[] prices, int index, int curProfit, boolean haveStock, int cnt) {
//         // unvalid transaction
//         if(cnt >= 3) {
//             return 0;
//         }
        
//         if(index >= prices.length  && cnt > 3) {
//             return curProfit;
//         }
                            
//         if(index >= prices.length ) {
//             return curProfit;
//         }
                
//         int res = 0;
//         // we can do buy, not buy, sold on every single day
        
//         // only can sold or remain
//         if(haveStock == true) {
//             // res = Math.max(helper(prices, index + 1, curProfit + prices[index], false, cnt), helper(prices, index + 1, curProfit, true, cnt));
//             // sold
//             int sold = helper(prices, index + 1, curProfit + prices[index], false, cnt);
//             // remain
//             int remain = helper(prices, index + 1, curProfit, true, cnt);
//             res = Math.max(sold, remain);
            
//         }
//         // buy or remain
//         else {
//             // res = Math.max(helper(prices, index + 1, curProfit - prices[index], true, cnt + 1),  helper(prices, index + 1, curProfit, false, cnt));
//             // buy and you have stock on hand
//             int buy = helper(prices, index + 1, curProfit - prices[index], true, cnt + 1);
//             // remain
//             int remain = helper(prices, index + 1, curProfit, false, cnt);
//             res = Math.max(buy, remain);
//         }
        
//         return res;        
//     }
}