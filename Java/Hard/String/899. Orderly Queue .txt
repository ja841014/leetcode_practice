/*
You are given a string s and an integer k. You can choose one of the first k letters of s and append it at the end of the string..
Return the lexicographically smallest string you could have after applying the mentioned step any number of moves
 
Example 1:
Input: s = "cba", k = 1
Output: "acb"
Explanation: 
In the first move, we move the 1st character 'c' to the end, obtaining the string "bac".
In the second move, we move the 1st character 'b' to the end, obtaining the final result "acb".

Example 2:
Input: s = "baaca", k = 3
Output: "aaabc"
Explanation: 
In the first move, we move the 1st character 'b' to the end, obtaining the string "aacab".
In the second move, we move the 3rd character 'c' to the end, obtaining the final result "aaabc".

我們可以移動任意次數去找到最小字串，
每次我們可以從字串中前k個字符選一個字符append到最後面
當k >= 2我們就一定可以找到 lexicographically smallest string
*/
class Solution {
    public String orderlyQueue(String s, int k) {
        if(k == 1) {
            String ans = s;
            for(int i = 0; i < s.length(); i++) {
                String tmp = s.substring(i) + s.substring(0, i);
                // ans 大於 tmp => 大於 0
                if(ans.compareTo(tmp) > 0) {
                    ans = tmp;
                }
            }
            return ans;
        }
        else {
            char[] charArr = s.toCharArray();
            Arrays.sort(charArr);
            return String.valueOf(charArr);
        }
    }
}