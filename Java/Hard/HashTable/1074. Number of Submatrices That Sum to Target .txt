
/*
Given a matrix and a target, return the number of non-empty submatrices that sum to target.
A submatrix x1, y1, x2, y2 is the set of all cells matrix[x][y] with x1 <= x <= x2 and y1 <= y <= y2.
Two submatrices (x1, y1, x2, y2) and (x1', y1', x2', y2') are different if they have some coordinate that is different: for example, if x1 != x1'.

Example 1:
Input: matrix = [[0,1,0],[1,1,1],[0,1,0]], target = 0
Output: 4
Explanation: The four 1x1 submatrices that only contain 0.

Example 2:
Input: matrix = [[1,-1],[-1,1]], target = 0
Output: 5
Explanation: The two 1x2 submatrices, plus the two 2x1 submatrices, plus the 2x2 submatrix.

Example 3:
Input: matrix = [[904]], target = 0
Output: 0
*/
class Solution {
    public int numSubmatrixSumTarget(int[][] matrix, int target) {
        int rows = matrix.length;
        int cols = matrix[0].length;
        int[][] preFixSumTable = new int[rows + 1][cols + 1];
        
        for(int i = 1; i < rows + 1; i++) {
            for(int j = 1; j < cols + 1; j++) {
                preFixSumTable[i][j] = preFixSumTable[i - 1][j] + preFixSumTable[i][j - 1] - preFixSumTable[i - 1][j - 1] + matrix[i - 1][j - 1];
            }
        }
        
        /*
        The technique below come from this problem
        https://leetcode.com/problems/subarray-sum-equals-k/
        */
        Map<Integer, Integer> cacheTable = new HashMap<>();
        int curSum = 0;
        int count = 0;
        
        for(int rowStart = 1; rowStart < preFixSumTable.length; rowStart++) {
            for(int rowEnd = rowStart; rowEnd < preFixSumTable.length; rowEnd++) {
                cacheTable.clear();
                cacheTable.put(0, 1);
                // traverse colume
                for(int col = 1; col < preFixSumTable[0].length; col++) {
                    curSum = preFixSumTable[rowEnd][col] - preFixSumTable[rowStart - 1][col];
                    
                    count = count + cacheTable.getOrDefault(curSum - target, 0);
                    
                    cacheTable.put(curSum, cacheTable.getOrDefault(curSum, 0) + 1);
                }
            }
        }
        return count;
    }
}

