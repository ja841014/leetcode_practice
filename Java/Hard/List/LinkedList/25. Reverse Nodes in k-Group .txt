/*
Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.


*/
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        return helper(head, k, false);
    }
    public ListNode helper(ListNode head, int k, boolean last) {
        int cnt = 0;
        ListNode pre = null;
        ListNode connector = null;
        // This is slightly variation reverse Linked List pattern
        while(cnt != k && head != null) {
            ListNode tmp = head.next;
            head.next = pre;
            pre = head;
            head = tmp;
            // Here is the variation. we want to store the original first LinkedList Node
            // because this first node will be come the last node which need to connect to "next reverse LinkedList"
            if(cnt == 0) {
                connector = pre;
            }
            cnt++;
        }
        // we only face this situation when our (linked list size) % k != 0
        if(last == true) {
            return pre;
        }
        // if the last group size is not k, we will not reverse this linkedList. 
        // Therefore, we have to reverse it back
        if(cnt != k) {
            return helper(pre, k, true);
        }
        // let connector to connect next group
        connector.next = helper(head, k, false);
        return pre;
    }
}