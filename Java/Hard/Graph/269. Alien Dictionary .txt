/*
There is a new alien language that uses the English alphabet. However, the order among the letters is unknown to you.

You are given a list of strings words from the alien language's dictionary, where the strings in words are sorted lexicographically by the rules of this new language.
Return a string of the unique letters in the new alien language sorted in lexicographically increasing order by the new language's rules. If there is no solution, return "". If there are multiple solutions, return any of them.
A string s is lexicographically smaller than a string t if at the first letter where they differ, the letter in s comes before the letter in t in the alien language. If the first min(s.length, t.length) letters are the same, then s is smaller if and only if s.length < t.length
 
Example 1:
Input: words = ["wrt","wrf","er","ett","rftt"]
Output: "wertf"

Example 2:
Input: words = ["z","x"]
Output: "zx"

Example 3:
Input: words = ["z","x","z"]
Output: ""
Explanation: The order is invalid, so return "".

*/
class Solution {
    public String alienOrder(String[] words) {
        Map<Character, List<Character>> graph = new HashMap<>();
        Map<Character, Integer> inDegree = new HashMap<>();
        
        // initialize
        for(String str : words) {
            for(char c: str.toCharArray()) {
                graph.put(c, new ArrayList<>());
                inDegree.put(c, 0);
            }
        }
        
        // Find Edges
        for(int i = 0; i < words.length - 1; i++) {
            String str1 = words[i];
            String str2 = words[i + 1];
            
            // if str1 is longer then str2 and str2 is prefix of str1 => fasle
            /*
             If the first min(s.length, t.length) letters are the same, 
             then s is smaller if and only if s.length < t.length.
            */
            if(str1.length() > str2.length() && str1.startsWith(str2)) {
                return "";
            }
            
            for(int j = 0; j < Math.min(str1.length(), str2.length()); j++ ) {
                if(str1.charAt(j) != str2.charAt(j)) {
                    graph.get(str1.charAt(j)).add(str2.charAt(j));
                    inDegree.put(str2.charAt(j), inDegree.get(str2.charAt(j)) + 1);
                    // We only find the next one!!
                    break;
                }
            }
        }
        
        // BFS
        Queue<Character> q = new LinkedList<>();
        StringBuilder sb = new StringBuilder();
        // put the indegree == 0 into queue first!!
        for(Map.Entry<Character,Integer> m : inDegree.entrySet()) {
            if(m.getValue() == 0) {
                q.offer(m.getKey());
            }
        }
        
        while(!q.isEmpty()) {
            int size = q.size();
            for(int i = 0; i < size; i++) {
                char curChar = q.poll();
                sb.append(curChar);
                for(char c : graph.get(curChar)) {
                    inDegree.put(c, inDegree.get(c) - 1);
                    // only the indegree == 0 can put into queue 
                    if(inDegree.get(c) == 0) {
                        q.offer(c);
                    }
                }
            }
        }
        
        // cycle occur
        if(sb.length() < inDegree.size()) {
            return "";
        }
        
        return sb.toString();
        
        
    }
}