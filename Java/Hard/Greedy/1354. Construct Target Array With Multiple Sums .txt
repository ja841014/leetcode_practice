/*
You are given an array target of n integers. From a starting array arr consisting of n 1's, you may perform the following procedure :

let x be the sum of all elements currently in your array.
choose index i, such that 0 <= i < n and set the value of arr at index i to x.
You may repeat this procedure as many times as needed.
Return true if it is possible to construct the target array from arr, otherwise, return false.

Example 1:
Input: target = [9,3,5]
Output: true
Explanation: Start with arr = [1, 1, 1] 
[1, 1, 1], sum = 3 choose index 1
[1, 3, 1], sum = 5 choose index 2
[1, 3, 5], sum = 9 choose index 0
[9, 3, 5] Done

Example 2:
Input: target = [1,1,1,2]
Output: false
Explanation: Impossible to create target array from [1,1,1,1].

Example 3:
Input: target = [8,5]
Output: true
*/
class Solution {
    public boolean isPossible(int[] target) {
        
        if(target.length == 1) {
            if(target[0] == 1) {
                return true;
            }
            return false;
        }
        
        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);
        // why we use long, because int we might overflow
        long sum = 0;
        for(int i : target) {
            pq.add(i);
            sum += i;
        }
        
        while(true) {
            int curLargeNum = pq.poll();
            // means all element in pq is 1
            if(curLargeNum == 1) return true;
                        
            sum = sum - curLargeNum;
            if(sum >= curLargeNum) return false;
            // for below condition [8,5] or like[1,2], [7,8]
            if(sum == 1) return true; 
            // subtract multiple time [5, 2] is a good example
            curLargeNum = curLargeNum % (int)sum;
            // we do not have 0 in array
            if(curLargeNum == 0) return false;
            sum = sum + curLargeNum;
            
            pq.add(curLargeNum);
        }
        
    }
}
/*
7,8
7,1
6,1
5,1
4,1
3,1
2,1
1,1
*/