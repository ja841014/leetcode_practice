/*
Stack<Character> st =new Stack<>();
*/
/*
Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Note that an empty string is also considered valid.

Example 1:

Input: "()"
Output: true
Example 2:

Input: "()[]{}"
Output: true


*/
class Solution {
    public boolean isValid(String s) {
        Stack<Character> st =new Stack<>();
        int size = s.length();      
        if(size%2 != 0){
            return false;
        }
        if(s.isEmpty()){
            return true;
        }        
        for(int i = 0; i < size; i++ ){
            if(s.charAt(i) == '(' || s.charAt(i) == '{' || s.charAt(i) == '['){
                st.push(s.charAt(i));
            }
            else if(s.charAt(i) == ')' && !st.isEmpty() && st.peek() == '('){
                st.pop();
            }
           else if(s.charAt(i) == '}' && !st.isEmpty() && st.peek() == '{'){
                st.pop();
            }
            else if(s.charAt(i) == ']' && !st.isEmpty() && st.peek() == '['){
                st.pop();
            }
        }
        return st.isEmpty();        
    }
}