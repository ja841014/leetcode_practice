/* we can use Binary search to optimise our algorithm!
Given a non-empty binary search tree and a target value, find the value in the BST that is closest to the target.
Example:
Input: root = [4,2,5,1,3], target = 3.714286
    4
   / \
  2   5
 / \
1   3
Output: 4
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int closestValue(TreeNode root, double target) {
        double comp = Double.MAX_VALUE;
        Queue<TreeNode> q = new LinkedList<>();
        int result = 0; 
        q.offer(root);
        while(!q.isEmpty()) {
            int size = q.size();
            for(int i = 0; i < size; i++) {
                TreeNode tmp = q.poll();
                if(Math.abs(target - (double)tmp.val) < comp) {
                    result = tmp.val;
                    comp = Math.abs(target - (double)tmp.val) ;
                }
                if(tmp.left != null) {
                    q.offer(tmp.left);
                }
                if(tmp.right != null) {
                    q.offer(tmp.right);
                }
            }
        }
        return result;
    }
}