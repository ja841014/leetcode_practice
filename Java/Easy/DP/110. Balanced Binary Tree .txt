/**
Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as:

a binary tree in which the left and right subtrees of every node differ in height by no more than 1.
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isBalanced(TreeNode root) {
        if(root == null) {
            return true;
        }        
        return Math.abs(isHeightBalanced(root.left) - isHeightBalanced(root.right)) < 2 && isBalanced(root.left) && isBalanced(root.right);
    }
    private int isHeightBalanced(TreeNode head) {
        if(head == null) {
            return 0;
        }
        
        return Math.max(isHeightBalanced(head.left), isHeightBalanced(head.right)) + 1;
        
    }
}