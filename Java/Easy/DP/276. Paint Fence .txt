/*
You are painting a fence of n posts with k different colors. You must paint the posts following these rules:
Every post must be painted exactly one color.
There cannot be three or more consecutive posts with the same color.
Given the two integers n and k, return the number of ways you can paint the fence.
 

Example 1:
Input: n = 3, k = 2
Output: 6
Explanation: All the possibilities are shown.
Note that painting all the posts red or all the posts green is invalid because there cannot be three posts in a row with the same color.

Example 2:
Input: n = 1, k = 1
Output: 1

Example 3:
Input: n = 7, k = 2
Output: 42
*/
class Solution {
    // n fences. k colors. no more than 2 same consecitive color.
    public int numWays(int n, int k) {
        Map<Integer, Integer> dp = new HashMap<>();
        return helper(n, k,dp);
    }
    
    public int helper(int numFence, int color, Map<Integer, Integer> dp) {
        if(numFence == 0) {
            return 0;
        }
        if(numFence == 1) {
            return color;
        }
        if(numFence == 2) {
            return color * color;
        }
        
        if(dp.containsKey(numFence)) {
            return dp.get(numFence);
        }
        else {
            // 這個是下一層解果的返回 => this means *xx, * will not same as x
            int oneConsecutiveColor = helper(numFence - 1, color, dp);
            // 這個是 連續兩個相同顏色的下一層 “解果”的返回
            int twoConsecutiveColor = helper(numFence - 2, color, dp);
            
            // 加在一起後才是這層的解果
            // 為什麼是加再一起後才乘 (color - 1) =>
            /*
         one    |---｜           here will return "color * color"
                x    x    x
         two    |---------|      here will return "color", Therefore, we will not have same color as its return
         =====================================================
         one =>  aa     b   + aa     |  two => a => bb + a
                 ab => 'b'/a + ba    |         b    aa + b
                 ba     b/'a' + ab   |
                 bb     a   + bb     |
        IMPORTANT!! there are duplicate, 
        Therefore, after observation, we know they have to plus together then multiply together         
            */
            dp.put(numFence, (oneConsecutiveColor + twoConsecutiveColor) * (color - 1) );
        }
        
        return dp.get(numFence);
    }
}


