/*
Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.
Your task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.

Example 1:
Input: nums = [1,2,2,3,1]
Output: 2
Explanation: 
The input array has a degree of 2 because both elements 1 and 2 appear twice.
Of the subarrays that have the same degree:
[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]
The shortest length is 2. So return 2.

Example 2:
Input: nums = [1,2,2,3,1,4,2]
Output: 6
Explanation: 
The degree is 3 because the element 2 is repeated 3 times.
So [2,2,3,1,4,2] is the shortest subarray, therefore returning 6.
*/
class Solution {
    
    public int findShortestSubArray(int[] nums) {
        // (element,(firstLoc, Maxlength) ) 
        Map<Integer, Pair<Integer, Integer>> map = new HashMap<>();
        // (element, freq)
        Map<Integer, Integer> freq = new HashMap<>();
        for(int i = 0; i < nums.length; i++) {
            freq.put(nums[i], freq.getOrDefault(nums[i], 0) + 1);
            
            if(!map.containsKey(nums[i])) {
                map.put(nums[i], new Pair(i, 0));
            }
            else {
                int initLoc = map.get(nums[i]).getKey();
                // update the MaxLength
                map.put(nums[i], new Pair(initLoc, i - initLoc) );
            }
        }
        
        int minLength = Integer.MAX_VALUE;
        int maxFreq = Integer.MIN_VALUE;
        for(int i : freq.keySet()) {
            if(freq.get(i) >= maxFreq) {
                if(freq.get(i) == maxFreq) {
                    // to see whehter the this element have bigger or smaller length
                    minLength = Math.min(minLength, map.get(i).getValue());
                }
                else {
                    // always replace the minLength
                    minLength = map.get(i).getValue();
                }
                // update MaxFreq
                maxFreq = freq.get(i); 
            }
        }
        return minLength + 1;
    }
}