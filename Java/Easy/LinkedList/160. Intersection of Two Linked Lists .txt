/*
Write a program to find the node at which the intersection of two singly linked lists begins.
*/
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        if(headA == null || headB == null) {
            return null;
        }
        ListNode a = headA;
        ListNode b = headB;
        // this is a very cool technique
        // it will gurantee the second round they will simultaneiously reach the end of list.
        while(a != b) {
            a = a == null ? headB : a.next;
            b = b == null ? headA : b.next;
        }
        return a;
        
        
        // Method 2: hashset
        // if(headA == null || headB == null) {
        //     return null;
        // }
        // Set<ListNode> set = new HashSet<>();
        // while(headA != null) {
        //     set.add(headA);
        //     headA = headA.next;
        // }
        // ListNode result = null;
        // while(headB != null) {
        //     if(set.contains(headB)) {
        //         result = headB;
        //         break;
        //     }
        //     headB = headB.next;
        // }
        // return result;
    }
}