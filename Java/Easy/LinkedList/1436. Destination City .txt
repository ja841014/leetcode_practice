// Example 2:

// Input: paths = [["B","C"],["D","B"],["C","A"]]
// Output: "A"
// Explanation: All possible trips are: 
// "D" -> "B" -> "C" -> "A". 
// "B" -> "C" -> "A". 
// "C" -> "A". 
// "A". 
// Clearly the destination city is "A".

// 100%
class Solution {
    public String destCity(List<List<String>> paths) {
        Set<String> ls = new HashSet<>();
        for(List<String> list : paths) {
            ls.add(list.get(0));
        }
        for(List<String> list : paths) {
            if(!ls.contains(list.get(1))) {
                return list.get(1);
            }
        }
        return null;
    }
}

class Solution {
    public String destCity(List<List<String>> paths) {
        
        List<String> ls = new ArrayList<String>();
        String result = "";
        for(int i = 0; i < paths.size(); i++) {
            ls.add(paths.get(i).get(0));
        }
        for(int j = 0; j < paths.size(); j++) {
            if(ls.contains(paths.get(j).get(1) ) == false) {
                result = paths.get(j).get(1);
            }
        }
        return result;
        
//         String start = paths.get(0).get(1);
//         boolean find_path = false;
//         boolean breakout = false;
        
//         for(int i = 0; i < paths.size(); ++i) {
//             for(int j = 0; j < paths.size(); ++j) {
//                 if(start.equals( paths.get(j).get(0) ) ) {
//                     start = paths.get(j).get(1);
//                     find_path = true;
//                 }
//                 if(find_path == false && j == paths.size() - 1) {
//                     breakout = true;
//                 }
//             }
//             if(breakout == true) {
//                 break;
//             }
//         }
        
//         return start;
    }
}