/*
Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.
If target is not found in the array, return [-1, -1].
You must write an algorithm with O(log n) runtime complexity.

Example 1:
Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

Example 2:
Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]

Example 3:
Input: nums = [], target = 0
Output: [-1,-1]
*/
class Solution {
    public int[] searchRange(int[] nums, int target) {
        if(nums.length == 0) {
            return new int[]{-1, -1};
        }
        int leftBound =  binarySearch(nums, target, true);
        if(leftBound == -1) {
            return new int[]{-1,-1};
        }
        int rightBound = binarySearch(nums, target, false);
        return new int[] {leftBound, rightBound};
    }
    
    private int binarySearch(int[] nums, int target, boolean toggle) {
        int start = 0;
        int end = nums.length - 1;
        
        while(start <= end) {
            int mid = (end - start) / 2 + start;
            if(nums[mid] == target) {
                // toggle true find left bound
                if(toggle) {
                    if(mid == start || nums[mid - 1] != target) {
                        return mid;
                    }
                    end = mid - 1;
                }
                else {
                    if(mid == end || nums[mid + 1] != target) {
                        return mid;
                    }
                    start = mid + 1;
                }
            }
            else if(nums[mid] > target) {
                end = mid - 1;
            }
            else {
                start = mid + 1;
            }
        }
        
        return -1;
    }
}