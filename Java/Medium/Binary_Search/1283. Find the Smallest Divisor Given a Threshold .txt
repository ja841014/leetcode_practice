/*
Given an array of integers nums and an integer threshold, we will choose a positive integer divisor and divide all the array by it and sum the result of the division. Find the smallest divisor such that the result mentioned above is less than or equal to threshold.
Each result of division is rounded to the nearest integer greater than or equal to that element. (For example: 7/3 = 3 and 10/2 = 5).
It is guaranteed that there will be an answer.

Example 1:
Input: nums = [1,2,5,9], threshold = 6
Output: 5
Explanation: We can get a sum to 17 (1+2+5+9) if the divisor is 1. 
If the divisor is 4 we can get a sum to 7 (1+1+2+3) and if the divisor is 5 the sum will be 5 (1+1+1+2).

Example 2:
Input: nums = [2,3,5,7,11], threshold = 11
Output: 3

Example 3:
Input: nums = [19], threshold = 5
Output: 4
*/

class Solution {
    public int smallestDivisor(int[] nums, int threshold) {
        int sum = 0;
        for(int i: nums) {
            sum = sum + i;
        }
        return binarySearch(nums, threshold, sum);
    }
    private int binarySearch(int[] nums, int threshold, int sum) {
        int left = 1;
        int right = 1000000;
        int smallDivisor = Integer.MAX_VALUE;
        
        while(left < right) {
            int mid = (right - left) / 2 + left;
            if(sum / mid > threshold) {
                left = mid + 1;
                continue;
            }
            else {
                int currSumWithDivisor = isValid(nums, threshold, mid);
                if(currSumWithDivisor <= threshold && mid < smallDivisor) {
                    smallDivisor = mid;
                    right = mid;
                }
                else {
                    left = mid + 1;
                }
                
            }
        }
        return smallDivisor;
    }
    
    private int isValid(int[] nums, int threshold, int divisor) {
        int sum = 0;
        for(int i : nums) {
             // (i + divisor - 1 ) / divisor   if we use this line we will boost our runtime to 6ms
            // we can intendly to plus a divisor value to our element which we want to divide
            // this step will force our result + 1
            // (int)Math.ceil((double)i/divisor  )
            sum = sum + (i + divisor - 1 ) / divisor;
        }
        return sum;
    }
    
}

