/*
Given an n x n matrix where each of the rows and columns are sorted in ascending order, return the kth smallest element in the matrix.
Note that it is the kth smallest element in the sorted order, not the kth distinct element.

Example 1:
Input: matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8
Output: 13
Explanation: The elements in the matrix are [1,5,9,10,11,12,13,13,15], and the 8th smallest number is 13

Example 2:
Input: matrix = [[-5]], k = 1
Output: -5
*/
class Solution {
    public int kthSmallest(int[][] matrix, int k) {
        int row = matrix.length;
        int col = matrix[0].length;
        int left = matrix[0][0];
        int right = matrix[row - 1][col - 1];
        
        
        while(right > left) {
            int mid = (right - left) / 2 + left;
            int curCol = col - 1;
            int totalCount = 0;
            // calculate this "mid" value is bigger than how many element
            for(int i = 0; i < row; i++) {
                
                while(curCol >= 0 && matrix[i][curCol] > mid) {
                    curCol--;
                }
                totalCount = totalCount + curCol + 1;
            }
            
            // if calculate is smaller than target k we assign new 'left' val
            if(totalCount < k) {
                left = mid + 1;
            }
            else {
                right = mid;
            }
        }
        
        return left;
    }
}