/**
Let the function f(s) be the frequency of the lexicographically smallest character in a non-empty string s. For example, if s = "dcce" then f(s) = 2 because the lexicographically smallest character is 'c', which has a frequency of 2.
You are given an array of strings words and another array of query strings queries. For each query queries[i], count the number of words in words such that f(queries[i]) < f(W) for each W in words.
Return an integer array answer, where each answer[i] is the answer to the ith query.

Example 1:
Input: queries = ["cbd"], words = ["zaaaz"]
Output: [1]
Explanation: On the first query we have f("cbd") = 1, f("zaaaz") = 3 so f("cbd") < f("zaaaz").

Example 2:
Input: queries = ["bbb","cc"], words = ["a","aa","aaa","aaaa"]
Output: [1,2]
Explanation: On the first query only f("bbb") < f("aaaa"). On the second query both f("aaa") and f("aaaa") are both > f("cc").
 */
class Solution {
    public int[] numSmallerByFrequency(String[] queries, String[] words) {
        int[] queriesFreq = new int[queries.length];
        int[] wordsFreq = new int[words.length];

        findFreq(queries, queriesFreq);
        findFreq(words, wordsFreq);

        Arrays.sort(wordsFreq);

        int[]res = processAllQuery(queriesFreq, wordsFreq);

        return res;
    }

    private int[] processAllQuery(int[] queriesFreq, int[] wordsFreq) {
        int size = queriesFreq.length;
        int[] res = new int[size];
        for(int i = 0; i < size; i++) {
            res[i] = binarySearch(queriesFreq[i], wordsFreq);
        }
        return res;
    }
    /**
    we have a sorted array and we have a target value need to find
    Therefore, we can use binary search find the answer.
     */
    private int binarySearch(int val, int[] wordsFreq) {
        int left = 0;
        int right = wordsFreq.length - 1;
        while(right > left) {
            int mid = (right - left) / 2 + left;
            if(wordsFreq[mid] > val) {
                right = mid;
            }
            else {
                left = mid + 1;
            }
        }
        // we have to check whether our "val" is excceed the biggest value in wordsFreq or not
        if(wordsFreq[left] <= val) {
            return 0;
        }
        return wordsFreq.length - left;
    }
    /**
    Firstly, we want to pre process the input array.
    We want to store  every frequency of the lexicographically smallest character in each "queries"
     */
    private void findFreq(String[] queries, int[] queriesFreq) {
        
        for(int i = 0; i < queries.length; i++) {
            String curStr = queries[i];
            char[] arr = curStr.toCharArray();
            int[] freqTable = new int[26];
            char minChar = 'z';
            for(char c : arr) {
                if(minChar - 'a' > c - 'a') {
                    minChar = c;
                }
                freqTable[c - 'a']++;
            }
            
            queriesFreq[i] = freqTable[minChar - 'a'];
        }
        
    }
}
