/*
You are given an array colors, in which there are three colors: 1, 2 and 3.
You are also given some queries. Each query consists of two integers i and c, return the shortest distance between the given index i and the target color c. If there is no solution return -1.

Example 1:
Input: colors = [1,1,2,1,3,2,2,3,3], queries = [[1,3],[2,2],[6,1]]
Output: [3,0,3]
Explanation: 
The nearest 3 from index 1 is at index 4 (3 steps away).
The nearest 2 from index 2 is at index 2 itself (0 steps away).
The nearest 1 from index 6 is at index 3 (3 steps away).

Example 2:
Input: colors = [1,2], queries = [[0,3]]
Output: [-1]
Explanation: There is no 3 in the array.
*/
class Solution {
    public List<Integer> shortestDistanceColor(int[] colors, int[][] queries) {
        Map<Integer, List<Integer>> map = new HashMap<>();
        for(int i = 0; i < colors.length; i++) {
            map.putIfAbsent(colors[i], new ArrayList<>());
            map.get(colors[i]).add(i);
        }
        
        List<Integer> ls = new ArrayList<>();
        for(int i = 0; i < queries.length; i++) {
	    // if we stand on the color we want
            if(colors[queries[i][0]] == queries[i][1]) {
                ls.add(0);
            } // we do not have this color
            else if(!map.containsKey(queries[i][1])) {
                ls.add(-1);
            }
            else {
                ls.add(binarySearch(colors, queries[i][0], queries[i][1], map.get(queries[i][1]) ));
            }
        }
        return ls;
    }
    
    public int binarySearch(int[] colors, int startIndex, int targetColor,  List<Integer> tmpLs){
        int left = 0;
        int right = tmpLs.size() - 1;
        
        while(left < right) {
            int mid = (right - left) / 2 + left;
            int midIndex = tmpLs.get(mid);
            // be careful here
            if(midIndex < startIndex) {
                left = mid + 1;
            }
            else {
                right = mid;
            }
        }
        // because we just jump out of from while loop ===> now right <= left
        if(left - 1 >= 0 && startIndex - tmpLs.get(left - 1) < tmpLs.get(left) - startIndex) {
            return Math.abs(startIndex - tmpLs.get(left - 1));
        }
        return Math.abs(tmpLs.get(left) - startIndex);
        
    }
}