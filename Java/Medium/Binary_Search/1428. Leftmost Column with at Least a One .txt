/*
(This problem is an interactive problem.)

A row-sorted binary matrix means that all elements are 0 or 1 and each row of the matrix is sorted in non-decreasing order.
Given a row-sorted binary matrix binaryMatrix, return the index (0-indexed) of the leftmost column with a 1 in it. If such an index does not exist, return -1.
You can't access the Binary Matrix directly. You may only access the matrix using a BinaryMatrix interface:

BinaryMatrix.get(row, col) returns the element of the matrix at index (row, col) (0-indexed).
BinaryMatrix.dimensions() returns the dimensions of the matrix as a list of 2 elements [rows, cols], which means the matrix is rows x cols.
Submissions making more than 1000 calls to BinaryMatrix.get will be judged Wrong Answer. Also, any solutions that attempt to circumvent the judge will result in disqualification.

For custom testing purposes, the input will be the entire binary matrix mat. You will not have access to the binary matrix directly.

Example1:
Input: mat =
[[0,0],
 [1,1]]
Output: 0

Example2:
Input: mat =
[[0,0],
 [0,0]]
Output: -1

Example1:
Input: mat =
[[0,0,0,1],
 [0,0,1,1],
 [0,1,1,1]]
Output: 1
*/
/**
 * // This is the BinaryMatrix's API interface.
 * // You should not implement it, or speculate about its implementation
 * interface BinaryMatrix {
 *     public int get(int row, int col) {}
 *     public List<Integer> dimensions {}
 * };
 */

class Solution {
    public int leftMostColumnWithOne(BinaryMatrix binaryMatrix) {
        // get matrix's row and col
        List<Integer> dimen = binaryMatrix.dimensions();
        int row = dimen.get(0);
        int col = dimen.get(1);
        
        int res = Integer.MAX_VALUE;
        // traverse each row
        for(int i = 0; i < row; i++) {
            // each row use binary search to find the 1
            int left = 0;
            int right = col;
            while(left < right) {
                int mid = (right - left) / 2 + left;
                // if == 0, left move to mid position 
                if(binaryMatrix.get(i, mid) == 0) {
                    left = mid + 1;
                }
                else {
                    right = mid;
                }
            }
            // update the minimum value
            res = Math.min(res, left);
        }
        // is res is bigger equal than column => do not have anser => -1
        return res < col ? res : -1;
    }
}