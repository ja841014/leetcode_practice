/*
Given a set of points in the xy-plane, determine the minimum area of a rectangle formed from these points, with sides parallel to the x and y axes.
If there isn't any rectangle, return 0.

Example 1:
Input: [[1,1],[1,3],[3,1],[3,3],[2,2]]
Output: 4

Example 2:
Input: [[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]]
Output: 2
*/
class Solution {
    public int minAreaRect(int[][] points) {
        Map<Integer, List<Integer>> map = new HashMap<>();
        int minArea = Integer.MAX_VALUE;
        // group points who has same X axis together
        for(int[] point : points) {
            if (!map.containsKey(point[0])) {
                map.put(point[0], new ArrayList<>());
            }
            map.get(point[0]).add(point[1]);
        }
        
        
        for(int i = 0; i < points.length; i++) {
            for(int j = i + 1; j < points.length; j++) {
                // if they are same node or on the same row or same column
                if(points[i][0] == points[j][0] || points[i][1] == points[j][1]) {
                    continue;
                }
                int tmpArea = Math.abs( (points[i][0] - points[j][0]) * (points[i][1] - points[j][1]) );
                // if the tmp Area is already bigger than minArea, then we do not have to do the code below
                if(minArea < tmpArea) {
                    continue;
                }
                if(map.get(points[i][0]).contains(points[j][1]) && map.get(points[j][0]).contains(points[i][1])) {
                    minArea = Math.min(minArea, tmpArea );
                }
                
            }
        }
        
        return minArea == Integer.MAX_VALUE ? 0 : minArea;
    }
}