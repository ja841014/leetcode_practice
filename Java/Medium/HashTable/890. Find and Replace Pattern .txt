/*
Given a list of strings words and a string pattern, return a list of words[i] that match pattern. You may return the answer in any order.
A word matches the pattern if there exists a permutation of letters p so that after replacing every letter x in the pattern with p(x), we get the desired word.
Recall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter

Example 1:
Input: words = ["abc","deq","mee","aqq","dkd","ccc"], pattern = "abb"
Output: ["mee","aqq"]
Explanation: "mee" matches the pattern because there is a permutation {a -> m, b -> e, ...}. 
"ccc" does not match the pattern because {a -> c, b -> c, ...} is not a permutation, since a and b map to the same letter.

Example 2:
Input: words = ["a","b","c"], pattern = "a"
Output: ["a","b","c"]
*/
class Solution {
    public List<String> findAndReplacePattern(String[] words, String pattern) {
        List<String> ls = new ArrayList<>();
        for(int i = 0; i < words.length; i++) {
            if(words[i].length() != pattern.length()) {
                continue;
            }
            if(match(words[i], pattern)) {
                ls.add(words[i]);
            }
        }
        
        return ls;
        
    }
    
    private boolean match(String str1, String str2) {
        
        Map<Character, Character> m1 = new HashMap<>();
        Map<Character, Character> m2 = new HashMap<>();
        
        for(int i = 0; i < str1.length(); i++) {
            
            char a = str1.charAt(i);
            char b = str2.charAt(i);
            
            if( !m1.containsKey(a) ) {
                m1.put(a, b);
            }
        
            if( !m2.containsKey(b) ) {
                m2.put(b, a);
            }
            
            if( m1.get(a) != b || m2.get(b) != a ) {
                return false;
            }
            
        }
        return true;
    }
    
}