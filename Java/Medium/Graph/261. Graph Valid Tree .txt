/*
You have a graph of n nodes labeled from 0 to n - 1. You are given an integer n and a list of edges where edges[i] = [ai, bi] indicates that there is an undirected edge between nodes ai and bi in the graph.

Return true if the edges of the given graph make up a valid tree, and false otherwise.

Example 1:
Input: n = 5, edges = [[0,1],[0,2],[0,3],[1,4]]
Output: true

Example 2:
Input: n = 5, edges = [[0,1],[1,2],[2,3],[1,3],[1,4]]
Output: false
*/
/*
    1> what is difference between tree and graph
*/
class Solution {
    public boolean validTree(int n, int[][] edges) {
        Map<Integer, Set<Integer>> graph = new HashMap<>();
        buildGraph(graph, edges, n);
        return BFS(graph, n);
    }
    
    private boolean BFS(Map<Integer, Set<Integer>> graph, int nodes) {
        Queue<Integer> q = new LinkedList<>();
        // child, parent
        Map<Integer, Integer> seen = new HashMap<>();
        q.offer(0);
        int count = 0;
        
        while(!q.isEmpty()) {
            int size = q.size();
            for(int i = 0; i < size; i++) {
                int curNode = q.poll();
                for(int nextNode : graph.get(curNode)) {
                    if(seen.containsKey(curNode)) {
                        // same edge
                        if(seen.get(curNode) == nextNode) {
                            continue;
                        }// this nextNode already have a parent => it must have exceed 1 parent in this situation
                        else if(seen.containsKey(nextNode)) {
                            return false;
                        }
                        
                    }

                    seen.put(nextNode, curNode);
                    q.offer(nextNode);
                    count++;
                }
            }
        }
        if(count != nodes - 1) {
            return false;
        }
        return true;
    }
    
    private void buildGraph(Map<Integer, Set<Integer>> graph, int[][] edges, int node) {
        for(int i = 0; i < node ;i++) {
            graph.put(i, new HashSet<>());
        }
        
        for(int[] edge : edges) {
            graph.get(edge[0]).add(edge[1]);
            graph.get(edge[1]).add(edge[0]);
        }
    }
}