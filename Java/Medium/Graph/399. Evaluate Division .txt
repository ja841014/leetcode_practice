/*
You are given equations in the format A / B = k, where A and B are variables represented as strings, and k is a real number (floating-point number). Given some queries, return the answers. If the answer does not exist, return -1.0.

The input is always valid. You may assume that evaluating the queries will result in no division by zero and there is no contradiction.

Example 1:

Input: equations = [["a","b"],["b","c"]], values = [2.0,3.0], queries = [["a","c"],["b","a"],["a","e"],["a","a"],["x","x"]]
Output: [6.00000,0.50000,-1.00000,1.00000,-1.00000]
Explanation: 
Given: a / b = 2.0, b / c = 3.0
queries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ?
return: [6.0, 0.5, -1.0, 1.0, -1.0 ]

Example 2:
Input: equations = [["a","b"],["b","c"],["bc","cd"]], values = [1.5,2.5,5.0], queries = [["a","c"],["c","b"],["bc","cd"],["cd","bc"]]
Output: [3.75000,0.40000,5.00000,0.20000]

Example 3:
Input: equations = [["a","b"]], values = [0.5], queries = [["a","b"],["b","a"],["a","c"],["x","y"]]
Output: [0.50000,2.00000,-1.00000,-1.00000]

*/
class Solution {
    public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {
        double[] result = new double[queries.size()];
        // build edgemap
        Map<String, List<Pair<String, Double>> > edgemap = new HashMap<>();
        buildMap(edgemap, equations, values);
        // Find Path
        List<String> query;
        for(int i = 0; i < queries.size(); i++) {
            query = queries.get(i);
            if(edgemap.containsKey(query.get(0)) && edgemap.containsKey(query.get(1)) ) {
                result[i] = Find_Path_in_Graph(edgemap, query.get(0), query.get(1));
            }
            else {
               result[i] = -1.0; 
            }
        }
        return result;
        
    }
    
    private double Find_Path_in_Graph(Map <String, List<Pair<String, Double>> > edgemap, String start, String end) {
        Queue<Pair<String, Double>> q = new LinkedList<>();
        Set<String> visited = new HashSet<>();
        
        q.offer(new Pair(start, 1.0));
        visited.add(start);
        
        while(!q.isEmpty()) {
            Pair<String, Double> p = q.poll();
            //
            if(p.getKey().equals(end)) {
                return p.getValue();
            }
            // p.getKey() -> String; edgemap.get(..) -> List<Pair>
            List<Pair<String, Double>> next = edgemap.get(p.getKey());
            
            // Pair -> (String Double)
            for(Pair cur : next) {
                // if already visite that node, skip
                if(visited.contains(cur.getKey())) {
                    continue;
                }
                visited.add((String)cur.getKey());
                q.offer(new Pair(cur.getKey(), (Double)cur.getValue() * p.getValue()));
            }
        }
        return -1.0;
    }
    
    
    private void buildMap( Map<String, List<Pair<String, Double>>> edgemap, List<List<String>> equations, double[] values) {
        List<String> ls;
        for(int i = 0; i < equations.size(); i++) {
            ls = equations.get(i);
            if( !edgemap.containsKey( ls.get(0) ) ) {
                edgemap.put(ls.get(0), new ArrayList<>() );
            }
            if( !edgemap.containsKey( ls.get(1) ) ) {
                edgemap.put(ls.get(1), new ArrayList<>() );
            }
            
            edgemap.get(ls.get(0)).add(new Pair(ls.get(1), values[i]));
            edgemap.get(ls.get(1)).add(new Pair(ls.get(0), 1.0 / values[i]));

        }
        
        
        
    }
}