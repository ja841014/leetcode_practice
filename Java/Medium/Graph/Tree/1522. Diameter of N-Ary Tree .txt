/*
Given a root of an N-ary tree, you need to compute the length of the diameter of the tree.
The diameter of an N-ary tree is the length of the longest path between any two nodes in the tree. This path may or may not pass through the root.
(Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value.)

Example 1:
Input: root = [1,null,3,2,4,null,5,6]
Output: 3
Explanation: Diameter is shown in red color.

Example 2:
Input: root = [1,null,2,null,3,4,null,5,null,6]
Output: 4

Example 3:
Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
Output: 7
*/
/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    
    public Node() {
        children = new ArrayList<Node>();
    }
    
    public Node(int _val) {
        val = _val;
        children = new ArrayList<Node>();
    }
    
    public Node(int _val,ArrayList<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
    int maxDepth = 0;
    public int diameter(Node root) {
        helper(root);
        return maxDepth;
        
    }
    
    private int helper(Node root) {
        if(root == null) {
            return 0;
        }
        int maxHeight1 = 0;
        int maxHeight2 = 0;
        for(Node child : root.children) {
            int curVal = helper(child) + 1;
            if(maxHeight1 < curVal) {
                maxHeight2 = maxHeight1;
                maxHeight1 = curVal;
            }
            else if(maxHeight2 < curVal) {
                maxHeight2 = curVal;
            }
        }
        
        maxDepth = Math.max(maxDepth, maxHeight1 + maxHeight2);
        return maxHeight1;
    }
}