/*
Given two nodes of a binary tree p and q, return their lowest common ancestor (LCA).

Each node will have a reference to its parent node. The definition for Node is below:

class Node {
    public int val;
    public Node left;
    public Node right;
    public Node parent;
}
According to the definition of LCA on Wikipedia: "The lowest common ancestor of two nodes p and q in a tree T is the lowest node that has both p and q as descendants (where we allow a node to be a descendant of itself)."
*/
/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node parent;
};
*/

class Solution {
    public Node lowestCommonAncestor(Node p, Node q) {
        Map<Integer, Node> map = new HashMap<>();
        Node pTmp = p;
        Node qTmp = q;
        while(pTmp != null) {
            map.put(pTmp.val, pTmp);
            pTmp = pTmp.parent;
        }
        while(qTmp != null) {
            if(map.containsKey(qTmp.val)) {
                return map.get(qTmp.val);
            }
            qTmp = qTmp.parent;
        }
        return null;
    }
}