/** same as 865
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    TreeNode LCS = null;
    int max = -1;
    public TreeNode lcaDeepestLeaves(TreeNode root) {
        TreeNode head = root;
        dfs(head, 0);
        return LCS;
    }
    public int dfs(TreeNode root, int depth) {
        if(root == null) {
            return depth - 1;
        }
        int leftDepth = dfs(root.left, depth + 1);
        int rightDepth = dfs(root.right, depth + 1);
	// update the maxDepth
        if(depth > max) {
            max = depth;
        }
	// we only change the 'LCS' when left and right are equals to maxDepth
        if(leftDepth == max && rightDepth == max) {
            LCS = root;
        }
        return Math.max(leftDepth, rightDepth);


    }
}