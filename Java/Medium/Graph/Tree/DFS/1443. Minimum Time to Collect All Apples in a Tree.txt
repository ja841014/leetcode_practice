/**
Given an undirected tree consisting of n vertices numbered from 0 to n-1, which has some apples in their vertices. You spend 1 second to walk over one edge of the tree. Return the minimum time in seconds you have to spend to collect all apples in the tree, starting at vertex 0 and coming back to this vertex.

The edges of the undirected tree are given in the array edges, where edges[i] = [ai, bi] means that exists an edge connecting the vertices ai and bi. Additionally, there is a boolean array hasApple, where hasApple[i] = true means that vertex i has an apple; otherwise, it does not have any apple.

Example 1:
Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,true,false,true,true,false]
Output: 8 
Explanation: The figure above represents the given tree where red vertices have an apple. One optimal path to collect all apples is shown by the green arrows.  

Example 2:
Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,true,false,false,true,false]
Output: 6
Explanation: The figure above represents the given tree where red vertices have an apple. One optimal path to collect all apples is shown by the green arrows.  

Example 3:
Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,false,false,false,false,false]
Output: 0
 */

class Solution {
    public int minTime(int n, int[][] edges, List<Boolean> hasApple) {
        Map<Integer, List<Integer>> map = new HashMap<>();
        buildMap(map, edges);
        return findApple(map, hasApple, -1, 0);
    }

    private int findApple(Map<Integer, List<Integer>> map, List<Boolean> hasApple, int parent, int curLoc) {
        
        if(!map.containsKey(curLoc)) {
            return 0;
        }
        int res = 0;
        
        for(int nextLoc : map.get(curLoc)) {
            if(nextLoc == parent) {
                continue;
            }
            int dist = findApple(map, hasApple, curLoc, nextLoc);
            // next child has apple or future child has apple
            if(hasApple.get(nextLoc) || dist > 0) {
                res = res + dist + 2;
            }
        }
        return res;
    }

   
    private void buildMap(Map<Integer, List<Integer>> map, int[][] edges) {
        for(int i = 0; i < edges.length; i++ ) {
            if(!map.containsKey(edges[i][0])) {
                map.put(edges[i][0], new ArrayList<>());
            }
            if(!map.containsKey(edges[i][1])) {
                map.put(edges[i][1], new ArrayList<>());
            }
            map.get(edges[i][0]).add(edges[i][1]);
            map.get(edges[i][1]).add(edges[i][0]);
        }
    }
}
