/*
Given the root of a binary tree and an array of TreeNode objects nodes, return the lowest common ancestor (LCA) of all the nodes in nodes. All the nodes will exist in the tree, and all values of the tree's nodes are unique.

Extending the definition of LCA on Wikipedia: "The lowest common ancestor of n nodes p1, p2, ..., pn in a binary tree T is the lowest node that has every pi as a descendant (where we allow a node to be a descendant of itself) for every valid i". A descendant of a node x is a node y that is on the path from node x to some leaf node.

Example1:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], nodes = [4,7]
Output: 2
Explanation: The lowest common ancestor of nodes 4 and 7 is node 2.


Example2:
 Input: root = [3,5,1,6,2,0,8,null,null,7,4], nodes = [0,1,2,3,4,5,6,7,8]
Output: 3
Explanation: The lowest common ancestor of all the nodes is the root node.
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode[] nodes) {
        Set<TreeNode> set = new HashSet<>();
        for(TreeNode t : nodes) {
            set.add(t);
        }
        return helper(root, nodes, set);
    }
    
    public TreeNode helper(TreeNode root, TreeNode[] nodes, Set<TreeNode> set ) {
        if(root == null) {
            return null;
        }
        
        if(set.contains(root)) {
            return root;
        }
        
        TreeNode left = helper(root.left, nodes, set);
        TreeNode right = helper(root.right, nodes, set);
        
        if(left != null && right != null) {
            return root;
        }
        else if(left == null) {
            return right;
        }
        else if(right == null) {
            return left;
        }
        
        return null;
        
    }
}