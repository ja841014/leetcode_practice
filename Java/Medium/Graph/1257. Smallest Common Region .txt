/* slighlt same as finding the lowest common ancestor of two nodes in a tree.
You are given some lists of regions where the first region of each list includes all other regions in that list.
Naturally, if a region X contains another region Y then X is bigger than Y. Also by definition a region X contains itself.
Given two regions region1, region2, find out the smallest region that contains both of them.
If you are given regions r1, r2 and r3 such that r1 includes r3, it is guaranteed there is no r2 such that r2 includes r3.
It's guaranteed the smallest region exists.

Example 1:
Input:
regions = [["Earth","North America","South America"],
["North America","United States","Canada"],
["United States","New York","Boston"],
["Canada","Ontario","Quebec"],
["South America","Brazil"]],
region1 = "Quebec",
region2 = "New York"
Output: "North America"
*/
class Solution {
    public String findSmallestRegion(List<List<String>> regions, String region1, String region2) {
        Map<String, String > map = new HashMap<>();
        // build up the map
        map.put(regions.get(0).get(0), "");
        for(List<String> innerList : regions) {
            String parent = innerList.get(0);
            for(int i = 1; i < innerList.size(); i++) {
                map.put(innerList.get(i), parent);
            }
            
        }
        
        List<String> path1 = new ArrayList<>();
        // add the start point
        path1.add(region1);
        while(map.get(region1) != null) {
            path1.add(map.get(region1));
            region1 = map.get(region1);
        }
        // add the end point (int this example is "Earth")
        path1.add(region1);
        
        while(!path1.contains(region2)) {
            region2 = map.get(region2);
        }
        return region2;
    }
}

