/*
Given a set of N people (numbered 1, 2, ..., N), we would like to split everyone into two groups of any size.

Each person may dislike some other people, and they should not go into the same group. 

Formally, if dislikes[i] = [a, b], it means it is not allowed to put the people numbered a and b into the same group.

Return true if and only if it is possible to split everyone into two groups in this way.
*/

class Solution {
    public boolean possibleBipartition(int N, int[][] dislikes) {
        //create edgemap
        Map<Integer, Set<Integer>> edgemap = new HashMap<>();
        for(int i = 0; i <= N; i++) {
            edgemap.put(i, new HashSet<>());
        }
        for(int i = 0; i < dislikes.length; i++) {
            edgemap.get(dislikes[i][0]).add(dislikes[i][1]);
            edgemap.get(dislikes[i][1]).add(dislikes[i][0]);
        }
        // why we should using N+1, because we do not use the "color[0]"
        int[] color = new int[N + 1];
        Queue<Integer> q = new LinkedList<>();
        // we have to do through every node
        for(int i = 1; i < N; i++) {
            // if color[i] is not assigned color then go through the function
            if(color[i] == 0) {
                q.offer(i);
                color[i] = 1;
                // BFS
                while(!q.isEmpty()) {
                    int people = q.poll();
                    //the next_color is based on the number we poll out 
                    int determine_Nextcolor = 0;
                    // int determine_Nextcolor = color[people] == 1 ? 2 : 1;
                    if(color[people] == 1) {
                        determine_Nextcolor = 2;
                    }
                    else {
                        determine_Nextcolor = 1;
                    }
                    // if we want to take element from Set, we have to use iterator
                    Iterator set_it = edgemap.get(people).iterator(); 
                    
                    while(set_it.hasNext()) {
                        // the node which connect to 'people'
                        int tmp = Integer.parseInt(set_it.next().toString());
                        if(color[tmp] == color[people]) {
                            return false;
                        }
                        if(color[tmp] == 0) {
                            color[tmp] = determine_Nextcolor;
                            q.offer(tmp);
                        }
                    }
                }
            }
        }    
        return true;
    }
}