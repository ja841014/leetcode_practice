/*
10
[[5,8],[3,5],[1,9],[4,5],[0,2],[1,9],[7,8],[4,9]]

10
[[5,6],[0,2],[1,7],[5,9],[1,8],[3,4],[0,6],[0,7],[0,3],[8,9]]

Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), write a function to find the number of connected components in an undirected graph.

Example 1:

Input: n = 5 and edges = [[0, 1], [1, 2], [3, 4]]

     0          3
     |          |
     1 --- 2    4 

Output: 2
Example 2:

Input: n = 5 and edges = [[0, 1], [1, 2], [2, 3], [3, 4]]

     0           4
     |           |
     1 --- 2 --- 3

Output:  1
Note:
You can assume that no duplicate edges will appear in edges. Since all edges are 
*/
class Solution {
    int componentCount;
    public int countComponents(int n, int[][] edges) {
        
        componentCount = n;
        int[] table = new int[n];
        int cnt = 0;
        
        for(int i = 0; i < n; i++) {
            table[i] = i;
        }
        for(int[] tmp : edges) {
            find(table, tmp[0], tmp[1]);
        }
        
        return componentCount;
    }
    
    private void find(int[] arr, int x, int y) {
        int xParent = getParent(arr, x);
        int yParent = getParent(arr, y);
        
        if(xParent != yParent) {
            arr[yParent] = xParent;
            arr[y] = xParent;
            componentCount--;
        }
    }
    
    
    private int getParent(int[] arr, int i) {
        if(i == arr[i]) {
            return i;
        }
        
        int newParent = getParent(arr, arr[i]);
        arr[i] = newParent;
        return newParent;
    }   
    
    
    
}


