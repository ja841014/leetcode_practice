/*
Given a matrix of integers A with R rows and C columns, find the maximum score of a path starting at [0,0] and ending at [R-1,C-1].
The score of a path is the minimum value in that path.  For example, the value of the path 8 →  4 →  5 →  9 is 4.
A path moves some number of times from one visited cell to any neighbouring unvisited cell in one of the 4 cardinal directions (north, east, west, south).

Example 1:
Input: [[5,4,5],[1,2,6],[7,4,6]]
Output: 4
Explanation: 
The path with the maximum score is highlighted in yellow. 

Example 2:
Input: [[2,2,1,2,2,2],[1,2,2,2,1,2]]
Output: 2

Example 3:
Input: [[3,4,6,3,4],[0,2,1,1,7],[8,8,3,2,7],[3,2,4,9,8],[4,1,2,0,0],[4,6,5,4,3]]
Output: 3
*/
// class Solution {
//     public int maximumMinimumPath(int[][] A) {
//         PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> b[2] - a[2] );
//         int[] dirX = {-1, 1, 0, 0};// up down left right
//         int[] dirY = {0, 0, -1, 1};
//         // decrease dimension 2d -> 1d
//         boolean[] visited = new boolean[A.length * A[0].length];
//         visited[0] = true;
        
//         int curRow = 0;
//         int curCol = 0;
        
//         pq.offer(new int[] {0, 0, A[0][0]} );
        
//         while(!pq.isEmpty()) {
//             int[] curData = pq.poll();
//             curRow = curData[0];
//             curCol = curData[1];
//             // our third parameter will track the maxMin when we traverse the element.
//             if(curRow == A.length - 1 && curCol == A[0].length - 1) {
//                 return curData[2];
//             }
//             for(int dir = 0; dir < 4; dir++) {
//                 int row = curRow + dirX[dir];
//                 int col = curCol + dirY[dir];
//                 // it is valid row and col. we not visited yet.
//                 if(isValid(row, col, A) == true && visited[row * A[0].length + col] == false) {
                    
//                     pq.offer(new int[] {row, col, Math.min(curData[2], A[row][col])} );
//                     visited[row * A[0].length + col] = true;
                    
//                 }
//             }
            
//         }
        
//         return -1;
//     }
    
    
//     private boolean isValid(int row, int col, int[][] A) {
//         if(row >= 0 && row < A.length && col >= 0 && col < A[0].length) {
//             return true;
//         }
//         return false;
//     }
// }

// Method
class Solution {
    public int maximumMinimumPath(int[][] A) {
        // right left down up 
        int[][] dir = new int[][]{{0,1},{0,-1},{1,0},{-1,0}};
        
        int totalSquare = A.length * A[0].length;
        
        // visisted array
        boolean[] visited = new boolean[totalSquare];
        UnionFind uf = new UnionFind(totalSquare);
        
        // start index and end index which already turn into 1-D dimension
        int start = uf.getIndex(A[0].length, 0, 0);
        int end = uf.getIndex(A[0].length, A.length - 1, A[0].length - 1);
        
        // x, y, value
        Queue<int[]> pq = new PriorityQueue<>(new Comparator<int[]>() {
            @Override
            public int compare(int[] a, int[] b) {
                return b[2] - a[2];
            }
        });
        
        
        
        for(int i = 0; i < A.length; i++) {
            for(int j = 0; j < A[0].length; j++) {
                pq.add(new int[]{i, j, A[i][j]});
            }
        }
        
        while(true) {
            int[] curr = pq.poll();
            int value = curr[2];
            
            visited[uf.getIndex(A[0].length, curr[0], curr[1] )] = true;
            int index = uf.getIndex(A[0].length, curr[0], curr[1] );
            
            for(int[] d : dir) {
                int newX = curr[0] + d[0];
                int newY = curr[1] + d[1];
                // out of bound
                if(newX < 0 || newX >= A.length || newY < 0 || newY >= A[0].length) {
                    continue;
                }
                // we only connect the cell which is alredy visites
                if(visited[uf.getIndex(A[0].length, newX, newY)] == false) {
                    continue;
                }
                uf.union(uf.getIndex(A[0].length, curr[0], curr[1] ), uf.getIndex(A[0].length, newX, newY ));
                
            }
            // put outside of the for loop, because we want let the cell to find the most suitable parent
            if(uf.isConnect(start, end) == true) {
                return value;
            }
            
        }
    }
    
    class UnionFind {
        // if their parent are the same they are in same category
        int[] parent;
        // it is used to let node can aggregate to same position
        int[] size;
        
        public UnionFind(int N) {
            parent = new int[N];
            size = new int[N];
            // every node is itself parent at beginning
            for(int i = 0; i < N; i++) {
                parent[i] = i;
                size[i] = 1; 
            }
        }
        
        private int getParent(int i) {
            while(i != parent[i]) {
                parent[i] = parent[parent[i]]; // compress
                i = parent[i];
            }
            return i;
        }
        
        private void union(int p, int q) {
            int pParent = getParent(p);
            int qParent = getParent(q);
            // they are already connectes
            if(pParent == qParent) {
                return;
            }
            
            if(size[pParent] > size[qParent]) {
                // make then connect to same ancestor
                parent[qParent] = parent[pParent];
                size[pParent] = size[pParent] + size[qParent]; 
            }
            else {
                // make then connect to same ancestor
                parent[pParent] = parent[qParent];
                size[qParent] = size[qParent] + size[pParent];
            }
        }
        
        private boolean isConnect(int p, int q) {
            return getParent(p) == getParent(q);
        }
        
        private int getIndex(int x, int row, int col) {
            return x * row + col;
        }
    }
    
}