/*
Given an unsorted array of integers, find the number of longest increasing subsequence.

Example 1:

Input: [1,3,5,4,7]
Output: 2
Explanation: The two longest increasing subsequence are [1, 3, 4, 7] and [1, 3, 5, 7].
Example 2:

Input: [2,2,2,2,2]
Output: 5
Explanation: The length of longest continuous increasing subsequence is 1, and there are 5 subsequences' length is 1, so output 5.
*/
class Solution {
    public int findNumberOfLIS(int[] nums) {
        // table is used to record the number that show how many number smaller than it. 
        int[] table = new int[nums.length];
        int[] numberOfPaths = new int[nums.length];
        Arrays.fill(numberOfPaths, 1);
        int tmp_max = 1;
        

        for(int i = 0 ; i < nums.length; i++) {
            // tmp_max = 1;
            for(int j = 0; j < i; j++ ) {
                if(nums[i] > nums[j]) {
                    // tmp_max = Math.max(tmp_max, table[j] + 1);
                    if(table[i] < table[j] + 1) {
                        table[i] = table[j] + 1;
                        // number of paths are depend on previous paths, so if you find the new maxValue of LIS, 
                        // current element number of paths are same as number of paths of previous element
                        numberOfPaths[i] = numberOfPaths[j];
                        // the code below is incorrect, we cannot simply set as 1
                        // count[i] = 1;
                    }
                    // !!!we cannot write "table[i] == tmp_max" because if the sequenece do not bigger than tmp_max
                    // it will always enter in this loop ex: [1,2,3,1,2,3,1,2,3]
                    else if(table[i] == table[j] + 1) {
                        numberOfPaths[i] = numberOfPaths[j] + numberOfPaths[i];
                        // the code below is not correct, we cannot simply set it +1
                        // count[i]++;
                    }
                }
            }
        }
        
        int maxValue = 0;
        int ans = 0;
        for(int i: table) {
            maxValue = Math.max(maxValue, i);
        }
        for(int i = 0; i < numberOfPaths.length; i++) {
            if(table[i] == maxValue) {
                ans = ans + numberOfPaths[i];
            }
        }
        return ans;
    }
}