/*
You are given an array prices where prices[i] is the price of a given stock on the ith day, and an integer fee representing a transaction fee.
Find the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.
Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

Example1:
Input: prices = [1,3,2,8,4,9], fee = 2
Output: 8
Explanation: The maximum profit can be achieved by:
- Buying at prices[0] = 1
- Selling at prices[3] = 8
- Buying at prices[4] = 4
- Selling at prices[5] = 9
The total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.

Example 2:
Input: prices = [1,3,7,5,10,3], fee = 3
Output: 6
*/
class Solution {
    public int maxProfit(int[] prices, int fee) {
        // dp[days][no stock or have stock]
        int[][] dp = new int[prices.length][2];
        // base case
        dp[0][0] = 0;
        dp[0][1] = -prices[0];
        for(int i = 1; i < prices.length; i++) {
            // There are two situations causes we do not have stock right now
            // 1. we do not have stock previous state and we do not buy it in this state
            // 2. we sold the stock in this state
            int noStock = Math.max(dp[i - 1][0], prices[i] + dp[i - 1][1] - fee);
            // There are two situations causes we have stock right now
            // 1. we have stock previous state and we do not sold it in this state
            // 2. we buy the stock in this state
            int haveStock = Math.max(dp[i - 1][1], dp[i- 1][0] - prices[i]);
            dp[i][0] = noStock;
            dp[i][1] = haveStock;
        }
        return Math.max(dp[prices.length - 1][0], dp[prices.length - 1][1]);
    }
}