// slightly same as 673. Number of Longest Increasing Subsequence
/*
Given a set of distinct positive integers, find the largest subset such that every pair (Si, Sj) of elements in this subset satisfies:
Si % Sj = 0 or Sj % Si = 0.

If there are multiple solutions, return any subset is fine.

Example 1:
Input: [1,2,3]
Output: [1,2] (of course, [1,3] will also be ok)

Example 2:
Input: [1,2,4,8]
Output: [1,2,4,8]
*/
class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        Arrays.sort(nums);
        
        int size = nums.length; 
        int maxValIdx = 0;
        int maxFreqVal = Integer.MIN_VALUE;
        int[] countTable = new int[size];
        countTable[0]  = 1;
        
        
        for(int i = 1; i < size; i++) {
            countTable[i] = 1; 
            for(int j = 0; j < i; j++) {
                if(nums[i] % nums[j] != 0 ) { continue; }
                // this "count table" is not count for how many element that can be mod by current element
                // thus table record the "longest mod chain"
                countTable[i] = Math.max(countTable[i], countTable[j] + 1);
                if(countTable[i] > maxFreqVal)  {
                    maxValIdx = i;
                    maxFreqVal = countTable[i];
                }
            }
        }
        
        
        List<Integer> res = new ArrayList<>();
        res.add(nums[maxValIdx]);
        for(int i = maxValIdx - 1; i >= 0; i--) {
            // we need to use these two conditions two make sure the element is fit in out ArrayList
            // for exampla: [4,8,10,240] if we do not have "currentCount == count[i])" we will get [240, 10]
            // But, [4,8,240] is the answer.
            // That is, if current element can mod by max value && current "mod chain" is same as maxChain - 1
            // and we have to update the "maxFreqVal" and "maxValIdx"
            if(nums[maxValIdx] % nums[i] == 0 && countTable[i] == maxFreqVal - 1) {
                maxFreqVal--;
                maxValIdx = i;
                res.add(nums[i]);
            }
        }
        return res;
    }
}