/*
https://leetcode.com/problems/target-sum/discuss/689346/Java(4-ms)-DP-solution-for-both-2d-array-and-1d-array
It pattern is similar as coin change 往前跳n格

You are given an integer array nums and an integer target.

You want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers.

For example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression "+2-1".
Return the number of different expressions that you can build, which evaluates to target.

Example 1:
Input: nums = [1,1,1,1,1], target = 3
Output: 5
Explanation: There are 5 ways to assign symbols to make the sum of nums be target 3.
-1 + 1 + 1 + 1 + 1 = 3
+1 - 1 + 1 + 1 + 1 = 3
+1 + 1 - 1 + 1 + 1 = 3
+1 + 1 + 1 - 1 + 1 = 3
+1 + 1 + 1 + 1 - 1 = 3
*/

class Solution {
    public int findTargetSumWays(int[] nums, int target) {
        int sum = 0;
        for (int num : nums) {
            sum += num;
        }
        //assuming target >= 0
        if (sum < target || (sum + target) % 2 == 1) return 0;
        /*
        we divide the set to 2 group positive(s1) and negative(s2)
        therefore, 
        s1 - s2 = target
        s1 + s2 = sum
        So, 
        2 * s1 = target + sum
        s1 = (target + sum) / 2   => so konw we want to find the subset which equal to s1
        */
        
        int W = (sum + target) / 2;
        int[] dp = new int[W + 1];
        //記錄有幾種方式可以達成
        dp[0] = 1;
        for (int num : nums) {
            // i - num >= 0 therefore, we need i >= num
            // 每次偷往前跳 num 格看
            for (int i = W; i >= num; i--) {
                dp[i] = dp[i] + dp[i - num];
            }
        }
        return dp[W];
    }
    
    // we do not need index parameter, becaus ewe h=have to use all elements in the given array
    public int dp(int[] nums, int target, int index, int curSum, Map<String, Integer> table) {
        
        if(index == nums.length) {
            if(curSum == target) {
                return 1;
            }
            else {
                return 0;
            }
        }
        
        // at this index(level), we have this sum. we store it in the map
        // in the future, if we meet this level and we have this sum. we can directly take the ans!
        String str = index + "," + curSum;
        if(table.containsKey(str)) {
            return table.get(str);
        }
        
        int add = dp(nums, target, index + 1, curSum + nums[index], table);
        int minus = dp(nums, target, index + 1, curSum - nums[index], table);
        table.put(str, add + minus);
        
        return add + minus;
    }
}

