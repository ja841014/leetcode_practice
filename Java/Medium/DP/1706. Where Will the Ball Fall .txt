/*
You have a 2-D grid of size m x n representing a box, and you have n balls. The box is open on the top and bottom sides.

Each cell in the box has a diagonal board spanning two corners of the cell that can redirect a ball to the right or to the left.

A board that redirects the ball to the right spans the top-left corner to the bottom-right corner and is represented in the grid as 1.
A board that redirects the ball to the left spans the top-right corner to the bottom-left corner and is represented in the grid as -1.
We drop one ball at the top of each column of the box. Each ball can get stuck in the box or fall out of the bottom. A ball gets stuck if it hits a "V" shaped pattern between two boards or if a board redirects the ball into either wall of the box.

Return an array answer of size n where answer[i] is the column that the ball falls out of at the bottom after dropping the ball from the ith column at the top, or -1 if the ball gets stuck in the box.

Example:
Input: grid = [[1,1,1,-1,-1],[1,1,1,-1,-1],[-1,-1,-1,1,1],[1,1,1,1,-1],[-1,-1,-1,-1,-1]]
Output: [1,-1,-1,-1,-1]
Explanation: This example is shown in the photo.
Ball b0 is dropped at column 0 and falls out of the box at column 1.
Ball b1 is dropped at column 1 and will get stuck in the box between column 2 and 3 and row 1.
Ball b2 is dropped at column 2 and will get stuck on the box between column 2 and 3 and row 0.
Ball b3 is dropped at column 3 and will get stuck on the box between column 2 and 3 and row 0.
Ball b4 is dropped at column 4 and will get stuck on the box between column 2 and 3 and row 1.
*/
class Solution {
    public int[] findBall(int[][] grid) {
        int row = grid.length;
        int col = grid[0].length;
        int[][] table = new int[row][col];
        
        // case 1: \/
        // case 2: |/. or \|
        // base Case
        for(int i = 0; i < col; i++) {
            if(grid[row - 1][i] == -1) {
                if( i - 1 >= 0 && grid[row - 1][i - 1] == -1 ) {
                    table[row - 1][i] = i - 1;
                }
                else {
                    table[row - 1][i] = -1;
                }
                
            }
            else {
                if( i + 1 < col && grid[row - 1][i + 1] == 1) {
                    table[row - 1][i] = i + 1;
                }
                else {
                    table[row - 1][i] = -1;
                }
            }
            
        }
        
       
        
        for(int i = row - 2; i >= 0; i--) {
            for(int j = 0; j < col; j++) {
                // grid[i][j] = /
                if(grid[i][j] == -1) {
                    // we want to check his left location ahs a same direction "/"
                    // otherwise, it will block his path
                    if(j - 1 >= 0 && grid[i][j - 1] == -1) {
                        table[i][j] = table[i + 1][j - 1];
                    }
                    else {
                        table[i][j] = -1;
                    }
                }
                else {
                    // we want to check his right location ahs a same direction "\"
                    // otherwise, it will block his path
                    if(j + 1 < col && grid[i][j + 1] == 1) {
                        table[i][j] = table[i + 1][j + 1];
                    }
                    else {
                        table[i][j] = -1;
                    }
                }
            }
        }

        return table[0];
    }
}