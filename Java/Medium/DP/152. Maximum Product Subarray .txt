// The reason behind keeping track of max_so_far is to keep track of the accumulated product of positive numbers. The reason behind keeping track of min_so_far is to properly handle negative numbers.
class Solution {
    public int maxProduct(int[] nums) {
        if(nums.length == 0) {
            return 0;
        }
        
        int maxSoFar = nums[0];
        int minSoFar = nums[0];
        int result = maxSoFar;
        for(int i = 1; i < nums.length; i++) {
            // we have to set up a new variable. If we do not set up a new variable "minsofar" will iuse the upadate "maxsofar" and it is not correct. 
            int tmp = Math.max(nums[i], Math.max(maxSoFar * nums[i], minSoFar * nums[i]));
            minSoFar = Math.min(nums[i], Math.min(minSoFar * nums[i], maxSoFar * nums[i]));
            maxSoFar = tmp;
            result = Math.max(result, maxSoFar);
        }
        return result;
    }
    // public int maxProduct(int[] nums) {
    //     if(nums.length == 0) {
    //         return 0;
    //     }
    //     int result = Integer.MIN_VALUE;
        // for(int i = 0; i < nums.length; i++) {
        //     int accum = 1;
        //     for(int j = i; j < nums.length; j++) {
        //         accum = accum * nums[j];
        //         result = Math.max(result, accum);
        //     }
        // }
    //     return result;
    // }
}