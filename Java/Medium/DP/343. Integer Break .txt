/*
Given an integer n, break it into the sum of k positive integers, where k >= 2, and maximize the product of those integers.
Return the maximum product you can get.

Example 1:
Input: n = 2
Output: 1
Explanation: 2 = 1 + 1, 1 × 1 = 1.

Example 2:
Input: n = 10
Output: 36
Explanation: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36.
*/
class Solution {
    
    public int integerBreak(int n) {
        int[] ans = new int[n + 1];
        if(n == 2) {
            return 1;
        }
        else if(n == 3) {
            return 2;
        }
        else if(n == 4) {
            return 4;
        }
        else if(n == 5) {
            return 6;
        }
        else if(n == 6) {
            return 9;
        }
        
        ans[2] = 1;
        ans[3] = 2;
        ans[4] = 4;
        ans[5] = 6;
        ans[6] = 9;
        for(int i = 7; i <= n; i++) {
            ans[i] = ans[i - 3] * 3;
        }
        return ans[n];
    }    
}
/* more concise and clear method
class Solution {
    public int integerBreak(int n) {
        if (n == 2) return 1;
        if (n == 3) return 2;
        
        int num_3 = (int) n / 3;
        int rem = n % 3;
        if (rem == 1) {
            rem = 4;
            num_3--;
        }
        if (rem == 0) rem = 1;
        return (int) Math.pow(3, num_3) * rem;
    }
}
*/