/*
Given a m * n matrix of ones and zeros, return how many square submatrices have all ones.

Example 1:
Input: matrix =
[
  [0,1,1,1],     [0,1,1,1]
  [1,1,1,1],  => [1,1,2,2]   
  [0,1,1,1]      [0,1,2,3]   
]
Output: 15
Explanation: 
There are 10 squares of side 1.
There are 4 squares of side 2.
There is  1 square of side 3.
Total number of squares = 10 + 4 + 1 = 15.

Example 2:
Input: matrix = 
[
  [1,0,1],
  [1,1,0],
  [1,1,0]
]
Output: 7
Explanation: 
There are 6 squares of side 1.  
There is 1 square of side 2. 
Total number of squares = 6 + 1 = 7.
*/
class Solution {
    public int countSquares(int[][] matrix) {
        int row = matrix.length;
        int col = matrix[0].length;
        int[][] table = new int[row][col];
        int sum = 0;
        for(int i = 0; i < row; i++) {
            table[i][0] = matrix[i][0];
        }
        for(int i = 0; i < col; i++) {
            table[0][i] = matrix[0][i];
        }
        
        for(int i = 0; i < row; i++) {
            for(int j = 0; j < col; j++) {
                if(matrix[i][j] == 0) {
                    continue;
                }
                if(i > 0 && j > 0) {
                    table[i][j] = Math.min(table[i - 1][j], Math.min(table[i - 1][j - 1], table[i][j - 1])) + 1;
                }
                
            }
        }
        
        for(int i = 0; i < row; i++) {
            for(int j = 0; j < col; j++) {
                sum = sum + table[i][j];
            }
        }
        return sum;
    }
    
}