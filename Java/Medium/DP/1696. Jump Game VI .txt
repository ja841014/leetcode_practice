/*
reference: https://leetcode.com/problems/jump-game-vi/discuss/1260843/C%2B%2BJavaPython-DP-and-Decreasing-Deque-Clean-and-Concise-Time-O(N)-Space-O(K)

You are given a 0-indexed integer array nums and an integer k.
You are initially standing at index 0. In one move, you can jump at most k steps forward without going outside the boundaries of the array. That is, you can jump from index i to any index in the range [i + 1, min(n - 1, i + k)] inclusive.

You want to reach the last index of the array (index n - 1). Your score is the sum of all nums[j] for each index j you visited in the array.
Return the maximum score you can get.

Example 1:
Input: nums = [1,-1,-2,4,-7,3], k = 2
Output: 7
Explanation: You can choose your jumps forming the subsequence [1,-1,4,3] (underlined above). The sum is 7.

Example 2:
Input: nums = [10,-5,-2,4,0,3], k = 3
Output: 17
Explanation: You can choose your jumps forming the subsequence [10,4,3] (underlined above). The sum is 17.

Example 3:
Input: nums = [1,-5,-20,4,-1,3,-6,-3], k = 2
Output: 0
*/
class Solution {
    
     public int maxResult(int[] nums, int k) {
         int size = nums.length;
         // store the index
         Deque<Integer> dq = new ArrayDeque<>();
         dq.offer(0);
         for(int i = 1; i < size; i++) {
             
             nums[i] = nums[i] + nums[dq.peekFirst()];
             
             // 如果現在的值比前Ｋ個大 那就poll out, 因為未來沒有一個比加上“現在”這個還要好
             while (!dq.isEmpty() && nums[dq.peekLast()] <= nums[i]) {
                 dq.pollLast();
             } // Eliminate elements less or equal to nums[i]
            dq.offerLast(i);
             // Remove if the last element is out of window size k
            if (i - dq.peekFirst() >= k) {
                dq.pollFirst();
            }
         }
         return nums[size - 1];
     }
    
    
    // public int maxResult(int[] nums, int k) {
    //     int size = nums.length;
    //     int[] maxScore = new int[size];
    //     maxScore[0] = nums[0];
    //     // (maxScore[i], i)
    //     PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> b[0] - a[0]);
    //     pq.offer(new int[] {nums[0], 0});
    //     for(int i = 1; i < size; i++) {
    //         while(pq.peek()[1] < i - k) {
    //             pq.poll();
    //         }
    //         maxScore[i] = nums[i] + pq.peek()[0];
    //         pq.offer(new int[]{maxScore[i], i});
    //     }
    //     return maxScore[size - 1];
    // }
}



