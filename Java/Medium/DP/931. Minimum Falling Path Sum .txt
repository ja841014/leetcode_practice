/**
Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.
A falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).

Example 1:
Input: matrix = [[2,1,3],[6,5,4],[7,8,9]]
Output: 13
Explanation: There are two falling paths with a minimum sum as shown.

Example 2:
Input: matrix = [[-19,57],[-40,-5]]
Output: -59
Explanation: The falling path with a minimum sum is shown.
 */
class Solution {
    public int minFallingPathSum(int[][] matrix) {
        /**
        In this dynamic programming problem
        we only consider the previous level value(upper left, upper, upeer right)
        and take the smallest one and add to current value.
         */
        int size = matrix.length;
        int res = Integer.MAX_VALUE;
        for(int i = 1; i < size; i++) {
            for(int j = 0; j < size; j++) {
                if(j == 0) {
                    matrix[i][j] = matrix[i][j] + Math.min(matrix[i - 1][j], matrix[i - 1][j + 1]);
                }
                else if(j == size - 1) {
                    matrix[i][j] = matrix[i][j] + Math.min(matrix[i - 1][j - 1], matrix[i - 1][j]);
                }
                else {
                    matrix[i][j] = matrix[i][j] + Math.min( Math.min(matrix[i - 1][j - 1], matrix[i - 1][j]), matrix[i - 1][j + 1]);
                }
            }
        }

        for(int i = 0; i < size; i++) {
            res = Math.min(res, matrix[size - 1][i]);
        }
        return res;
    }
}
/**

 */