class Solution {
    
    class comp implements Comparator<String> {
        public int compare(String s1, String s2) {
            return s2.length() - s1.length();
        }
    }
    
    public int longestStrChain(String[] words) {
        // form the longest to shortest
        Arrays.sort(words, new comp());
        
        Map<String, Integer> table = new HashMap<>();
        for(String s : words) {
            table.put(s, 1);
        }
        
        int cnt = 1;
        // traverse all string words
        for(String s : words) {
            
            for(int i = 0; i < s.length(); i++) {
                // if and only if we can insert exactly one letter anywhere in wordA without changing the order of the other characters to make it equal to wordB.
                String tmp = s.substring(0, i) + s.substring(i + 1);
                
                if(table.containsKey(tmp)) {
                    int newFreq = table.get(s) + 1;
                    table.put(tmp, newFreq);
                    cnt = Math.max(cnt, newFreq);
                }
            }
        }
        return cnt;
    }
}