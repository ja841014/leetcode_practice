/*
To build a tree contains {1,2,3,4,5}. First we pick 1 as root, for the left sub tree, there are none; for the right sub tree, we need count how many possible trees are there constructed from {2,3,4,5}, apparently it's the same number as {1,2,3,4}. So the total number of trees under "1" picked as root is dp[0] * dp[4] = 14. (assume dp[0] =1). Similarly, root 2 has dp[1]*dp[3] = 5 trees. root 3 has dp[2]*dp[2] = 4, root 4 has dp[3]*dp[1]= 5 and root 5 has dp[0]*dp[4] = 14. Finally sum the up and it's done.
*/
class Solution {
    public int numTrees(int n) {
        // dp[i] 代表 有幾種unique tree 用這1 ~ i個數字
       int[] dp = new int[n + 1];
        dp[0] = 1;
        dp[1] = 1;
        for(int totalNode = 2; totalNode <= n; totalNode++) {
            // every node can be a root node
            for(int root = 1; root <= totalNode; root++) {
		// 1 2 3 4 root(5) 6 7 8 9...
                                            //  left subtree * right subtree
                dp[totalNode] = dp[totalNode] + dp[root - 1] * dp[totalNode - root];
            }
        }
        return dp[n];
    }
}
