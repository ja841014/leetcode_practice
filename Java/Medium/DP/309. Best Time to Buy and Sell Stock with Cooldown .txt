/*
Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times) with the following restrictions:

You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).
After you sell your stock, you cannot buy stock on next day. (ie, cooldown 1 day)
Example:

Input: [1,2,3,0,2]
Output: 3 
Explanation: transactions = [buy, sell, cooldown, buy, sell]
*/
class Solution {
    public int maxProfit(int[] prices) {
        
        int[][] dp = new int[prices.length][2];
        for(int i = 0; i < dp.length; i++) {
            Arrays.fill(dp[i], -1);
        }
        int res = helper(prices, 0, 0, dp);
        res = Math.max(res, 0);
        return res;
    }
    
    public int helper(int[] prices, int index, int haveStock, int[][] dp) {
        if(index >= prices.length) {
            return 0;
        }
        // 這裡仍然可以選擇 買 不買 賣 => 所以這if是錯的
//         if(index == prices.length - 1) {
//             if(haveStock == 0) {
//                 return Integer.MIN_VALUE;
//             }
//             else {
//                 return prices[index];
//             }
            
//         }
        if(dp[index][haveStock] != -1) {
            return dp[index][haveStock];
        }
        
        int res = 0;
        // even: buy  odd: sold
        int curCost = haveStock == 0 ? -prices[index] : prices[index];
        
        // buy
        if(haveStock == 0) {
            //                  remain                                  buy                         
            int remain = helper(prices, index + 1, haveStock, dp);
            int buy = curCost + helper(prices, index + 1, 1, dp);
            res = Math.max(remain, buy);
        }
        // I have stock on hand. what I can do is "sold stock" or "don't sold stock"
        else {
            //                  remain                                  sold   
            int remain = helper(prices, index + 1, haveStock, dp);
            int sold = curCost + helper(prices, index + 2, 0, dp);
            res = Math.max(remain, sold);
        }
        
        dp[index][haveStock] = res;
        
        return dp[index][haveStock];
    }
    
}
/*
class Solution {
    public int maxProfit(int[] prices) {
        if(prices.length <= 1) {
            return 0;
        }
        int[] sold = new int[prices.length];
        
        int[] inHand = new int[prices.length];
        
        int[] noStock = new int[prices.length];
        
        
        inHand[0] = -prices[0];
        for(int i = 1; i < prices.length; i++) {
            // 賣出得狀態
            noStock[i] = Math.max(noStock[i - 1], sold[i - 1]);
            // (前一天的inhand和 “手上沒股票的狀況且買進當天股票(所以要減prices[i])” ) 手上有股票未賣出狀態
            inHand[i] = Math.max(inHand[i-1], noStock[i-1] - prices[i]);
            sold[i] = inHand[i - 1] + prices[i];
            
        }
        
        return Math.max(sold[prices.length - 1], noStock[prices.length - 1]);
    }
}
*/