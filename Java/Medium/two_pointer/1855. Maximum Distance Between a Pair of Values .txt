/*
You are given two non-increasing 0-indexed integer arrays nums1 and nums2
A pair of indices (i, j), where 0 <= i < nums1.length and 0 <= j < nums2.length, is valid if both i <= j and nums1[i] <= nums2[j]. The distance of the pair is j - i
Return the maximum distance of any valid pair (i, j). If there are no valid pairs, return 0.
An array arr is non-increasing if arr[i-1] >= arr[i] for every 1 <= i < arr.length.

Example 1:
Input: nums1 = [55,30,5,4,2], nums2 = [100,20,10,10,5]
Output: 2
Explanation: The valid pairs are (0,0), (2,2), (2,3), (2,4), (3,3), (3,4), and (4,4).
The maximum distance is 2 with pair (2,4).

Example 2:
Input: nums1 = [2,2,2], nums2 = [10,10,1]
Output: 1
Explanation: The valid pairs are (0,0), (0,1), and (1,1).
The maximum distance is 1 with pair (0,1).

Example 3:
Input: nums1 = [30,29,19,5], nums2 = [25,25,25,25,25]
Output: 2
Explanation: The valid pairs are (2,2), (2,3), (2,4), (3,3), and (3,4).
The maximum distance is 2 with pair (2,4).
*/
class Solution {
    public int maxDistance(int[] nums1, int[] nums2) {
        /*
        Valid:
        1) i <= j
        2) nums[i] <= nums2[j]
        result j - i => find maximum
        */
        /*
        Method 1: brute force: o(n^2)
        Method 2: filtet out duplicate element O(n ^ 2)
        Method 3: Two pointer 
        */
        int res = 0;
        int num2Idx = 0;
        int size2 = nums2.length;
        for(int i = 0; i < nums1.length; i++) {
            if(i > 0 && nums1[i - 1] == nums1[i]) {
                continue;
            }
            // rule: nums2 must >= nums1
            while(num2Idx < size2 - 1 && nums1[i] <= nums2[num2Idx + 1]) {
                num2Idx++;
            }
            
            res = Math.max(res, num2Idx - i);
            
            if(num2Idx == size2 - 1) break; 
        }
        
        return res;
    }
}