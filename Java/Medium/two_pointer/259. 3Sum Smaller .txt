/*
Given an array of n integers nums and an integer target, find the number of index triplets i, j, k with 0 <= i < j < k < n that satisfy the condition nums[i] + nums[j] + nums[k] < target.

Example 1:
Input: nums = [-2,0,1,3], target = 2
Output: 2
Explanation: Because there are two triplets which sums are less than 2:
[-2,0,1]
[-2,0,3]

Example 2:
Input: nums = [], target = 0
Output: 0

Example 3:
Input: nums = [0], target = 0
Output: 0

*/
class Solution {
    // O(n^2)
    public int threeSumSmaller(int[] nums, int target) {
        int count = 0;
        if(nums.length < 3) {
            return 0;
        }
        Arrays.sort(nums);
        for(int i = 0; i < nums.length - 2; i++) {
            if(3 * nums[i] >= target) {
                continue;
            }
            int low = i + 1;
            int high = nums.length - 1;
            
            while(low < high) {
                int sum = nums[low] + nums[high] + nums[i]; 
                if(sum < target) {
                    count = count + (high - low);
                    low++;
                }
                else {
                    high--;
                }
            }
        }
        return count;
    }
//     public int threeSumSmaller(int[] nums, int target) {
        
//         int count = 0;
//         if(nums.length < 3) {
//             return 0;
//         }
//         Arrays.sort(nums);
        
//         for(int i = 0; i < nums.length - 2; i++) {
//             if(3 * nums[i] >= target) {
//                 continue;
//             }
//             for(int secNumIdx = i + 1; secNumIdx < nums.length - 1; secNumIdx++) {
//                 int thirdNumIdx = secNumIdx + 1; 
//                 while(thirdNumIdx < nums.length && nums[i] + nums[secNumIdx] + nums[thirdNumIdx] < target) {
//                     thirdNumIdx++;
//                 }
//                 count = count + (thirdNumIdx - secNumIdx) - 1;
//             }
//         }
//         return count;
//     }
    // O(n^2 logn)
//     public int threeSumSmaller(int[] nums, int target) {
        
//         int count = 0;
//         if(nums.length < 3) {
//             return 0;
//         }
//         Arrays.sort(nums);
        
//         for(int i = 0; i < nums.length - 2; i++) {
            
//             for(int secNumIdx = i + 1; secNumIdx < nums.length - 1; secNumIdx++) {
                
//                 int newTarget = target - nums[i] - nums[secNumIdx];
//                 int thirdIdx = binarySearch(nums, newTarget, secNumIdx + 1);
//                 if(thirdIdx != -1) {
//                     count = count + (thirdIdx - secNumIdx);
//                 }
//             }
//         }
//         return count;
//     }
    
//     private int binarySearch(int[] nums, int target, int start) {
//         int startIdx = start;
//         int endIdx = nums.length - 1;
//         if(startIdx == endIdx) {
//             return nums[startIdx] < target ? startIdx : -1;
//         }
//         while(startIdx < endIdx) {
//             int mid = (endIdx - startIdx) / 2 + startIdx;
//             if(nums[mid] < target) {
//                 startIdx = mid + 1;
//             }
//             else {
//                 endIdx = mid;
//             }
//         }
//         return nums[startIdx] < target ? startIdx : startIdx - 1;
//     }
}