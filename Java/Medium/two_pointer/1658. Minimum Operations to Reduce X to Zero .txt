/*Maximum length sum Array
You are given an integer array nums and an integer x. In one operation, you can either remove the leftmost or the rightmost element from the array nums and subtract its value from x. Note that this modifies the array for future operations.
Return the minimum number of operations to reduce x to exactly 0 if it's possible, otherwise, return -1.


Example 1:
Input: nums = [1,1,4,2,3], x = 5
Output: 2
Explanation: The optimal solution is to remove the last two elements to reduce x to zero.

Example 2:
Input: nums = [5,6,7,8,9], x = 4
Output: -1

Example 3:
Input: nums = [3,2,20,1,1,3], x = 10
Output: 5
Explanation: The optimal solution is to remove the last three elements and the first two elements (5 operations in total) to reduce x to zero.
*/
/*
we cannot copy the input array twice becasuse it will encounter
this edge case
[1,1]
3

*/
class Solution {
    public int minOperations(int[] nums, int x) {
        int sum = 0;
        for(int i : nums) {
            sum += i;
        }
        int target = sum - x;
        if(target < 0) {
            return -1;
        }
        // now we want find the maximum sub Array
        int rightPtr = 0;
        int leftPtr = 0;
        int curSum = 0;
        int maxLengthArr = Integer.MIN_VALUE;
        while(rightPtr < nums.length) {
            
            curSum = curSum + nums[rightPtr];
            
            while(leftPtr <= rightPtr && curSum > target ) {
                curSum = curSum - nums[leftPtr];
                leftPtr++;
            }
            
            if(curSum == target) {
                maxLengthArr = Math.max(maxLengthArr,rightPtr - leftPtr + 1);
            }
            
            rightPtr++;
        }
        return maxLengthArr == Integer.MIN_VALUE ? -1 :  nums.length - maxLengthArr;
    }
}