class Solution {
    public int countCompleteSubarrays(int[] nums) {
        Map<Integer, Integer> map = new HashMap<>();
        for(int i: nums) {
            map.put(i, 1);
        }
        int distinctElements = map.size();
        map.clear();

        int res = 0;
        int right = 0;
        int size = nums.length;
        int window = 0;
        for(int left = 0; left < size; left++) {
            while(right < size && window < distinctElements) {
                map.put(nums[right], map.getOrDefault(nums[right], 0) + 1);
                if(map.get(nums[right]) == 1) {
                    window++;
                }
                
                right++;
            }
            /** 
            take exmpale [1,3,1,2,2] as exmpale
            Firstly we;ll mneet ths case at 1,3,1,2
            so res += size - right + 1 => 5 - 4 + 1 = 2
            in this time, left = index 0
            [1,3,1,2]
            [1,3,1,2,2]
            we take the left as one part
            Secondly we''ll meet the case 3,1,2
            so res += size - right + 1 => 5 - 4 + 1 = 2
            in this time left = index 1;
            [3,1,2]
            [3,1,2,2]
            */ 
            if(window == distinctElements) {
                res += size - right + 1;
            }
            map.put(nums[left], map.get(nums[left]) - 1);
            if(map.get(nums[left]) == 0) {
                window--;
            }
            
        }
        
        return res;
    }

}
