/**
You are given a 0-indexed integer array nums. A subarray of nums is called continuous if:
Let i, i + 1, ..., j be the indices in the subarray. Then, for each pair of indices i <= i1, i2 <= j, 0 <= |nums[i1] - nums[i2]| <= 2.
Return the total number of continuous subarrays.
A subarray is a contiguous non-empty sequence of elements within an array
 
Example 1:
Input: nums = [5,4,2,4]
Output: 8
Explanation: 
Continuous subarray of size 1: [5], [4], [2], [4].
Continuous subarray of size 2: [5,4], [4,2], [2,4].
Continuous subarray of size 3: [4,2,4].
Thereare no subarrys of size 4.
Total continuous subarrays = 4 + 3 + 1 = 8.
It can be shown that there are no more continuous subarrays.

Example 2:
Input: nums = [1,2,3]
Output: 6
Explanation: 
Continuous subarray of size 1: [1], [2], [3].
Continuous subarray of size 2: [1,2], [2,3].
Continuous subarray of size 3: [1,2,3].
Total continuous subarrays = 3 + 2 + 1 = 6.
 */
class Solution {
    public long continuousSubarrays(int[] nums) {
        int n = nums.length;
        long ret = 0l;
        // these deque is used to find the left index
        // big => small
        Deque<Integer> maxQueue = new ArrayDeque<>();
        // small -> big
        Deque<Integer> minQueue = new ArrayDeque<>();

        int l = 0;
        for (int r = 0; r < n; r++) {
            int curVal = nums[r];
            // why we need pop out last elements
            // take maxQueue for example, if the curVal > the last element of maxqueue
            // curval = 8, maxQueue: [9,3,2,1]
            // then we need pop out all elements from last which is samller than curVal
            // becasue curVal is including in the subarray, it always is the bigger value in that time.
            while (!maxQueue.isEmpty() && curVal > nums[maxQueue.peekLast()]) maxQueue.pollLast();
            while (!minQueue.isEmpty() && curVal < nums[minQueue.peekLast()]) minQueue.pollLast();
            
            maxQueue.offerLast(r);
            minQueue.offerLast(r);
            
            while (!maxQueue.isEmpty() && !minQueue.isEmpty() &&nums[maxQueue.peekFirst()] - nums[minQueue.peekFirst()] > 2) {
                if (maxQueue.peekFirst() < minQueue.peekFirst()) {
                    l = maxQueue.pollFirst() + 1;
                } else {
                    l = minQueue.pollFirst() + 1;
                }
            }

            ret += r - l + 1;
        }
        
        
        return ret;
    }
    
}
