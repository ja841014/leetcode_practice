/*
Today, the bookstore owner has a store open for customers.length minutes.  Every minute, some number of customers (customers[i]) enter the store, and all those customers leave after the end of that minute.
On some minutes, the bookstore owner is grumpy.  If the bookstore owner is grumpy on the i-th minute, grumpy[i] = 1, otherwise grumpy[i] = 0.  When the bookstore owner is grumpy, the customers of that minute are not satisfied, otherwise they are satisfied.
The bookstore owner knows a secret technique to keep themselves not grumpy for X minutes straight, but can only use it once.
Return the maximum number of customers that can be satisfied throughout the day.

Example 1:

Input: customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], X = 3
Output: 16
Explanation: The bookstore owner keeps themselves not grumpy for the last 3 minutes. 
The maximum number of customers that can be satisfied = 1 + 1 + 1 + 1 + 7 + 5 = 16.
*/
class Solution {
    public int maxSatisfied(int[] customers, int[] grumpy, int X) {
        
//         int orgSatiCustomer = 0;
//         // add all always satified customers
//         for(int i = 0; i < customers.length; i++) {
//             if(grumpy[i] == 0) {
//                 orgSatiCustomer = orgSatiCustomer + customers[i];
//             }
//         }
        
//         int end = 0;
//         int start = 0;
//         int totalStatisCustomer = orgSatiCustomer;
//         int result = -1;
//         while(end < customers.length) {
//             if(grumpy[end] == 1) {
//                 totalStatisCustomer = totalStatisCustomer + customers[end];
//             }
//             if(end + 1 >= X) {
//                 result = Math.max(result, totalStatisCustomer);
//             }
//             if(end - start + 1 >= X) {
//                 if(grumpy[start] == 1) {
//                     totalStatisCustomer  = totalStatisCustomer - customers[start];
//                 }
//                 start++;
//             }
//             end++;
//         }
//         return result;
        // it is same as method I: only clean up and modify the code
        int orgSatiCustomer = 0;
        int start = 0;
        int usePower = 0;
        int maxPowerSatisfy = 0;
        for (int i = 0; i < customers.length; i++) {
            if(grumpy[i] == 0) {
                orgSatiCustomer = orgSatiCustomer + customers[i];
            }
            usePower = usePower + customers[i] * grumpy[i];
            if(i >= X) {
                usePower = usePower - customers[i - X] * grumpy[i - X];
            }
            if(usePower > maxPowerSatisfy) {
                maxPowerSatisfy = usePower;
            }
            
        }
        return maxPowerSatisfy + orgSatiCustomer;
        
    }
}