/*
Given a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is greater than or equal to k.

Example 1:
Input: s = "aaabb", k = 3
Output: 3
Explanation: The longest substring is "aaa", as 'a' is repeated 3 times.

Example 2:
Input: s = "ababbc", k = 2
Output: 5
Explanation: The longest substring is "ababb", as 'a' is repeated 2 times and 'b' is repeated 3 times.
*/
class Solution {
    public int longestSubstring(String s, int k) {
        // first we have to find out how many unique character in the string
        int uniqueChar = getUniqueChar(s);
        int MaxLength = 0;
        
        for(int i = 1; i <= uniqueChar; i++) {
            
            int numOfAtLeastK = 0;
            int left = 0;
            int right = 0;
            int[] countMap = new int[26];
            int unique = 0;
            
            while(right < s.length()) {
                
                // if the current window frame's number of unique character is less than i
                if(unique <= i) {
                    int cRight = s.charAt(right) - 'a';
                    if(countMap[cRight] == 0) {
                        unique++; 
                    }
                    countMap[cRight]++;
                    // this character match the threshold
                    if(countMap[cRight] == k) {
                        numOfAtLeastK++;
                    }
                    right++;
                    
                }
                // shrink the window frame
                else {
                    int cLeft = s.charAt(left) - 'a';
                    if(countMap[cLeft] == k) {
                        numOfAtLeastK--;
                    }
                    countMap[cLeft]--;
                    if(countMap[cLeft] == 0) {
                        unique--;
                    }
                    left++;
                }
                
                if(unique == i && unique == numOfAtLeastK) {
                    MaxLength = Math.max(MaxLength, right - left);
                }
            }            
        }
        return MaxLength;
    }
    
    private int getUniqueChar(String s) {
        boolean[] charExist = new boolean[26];
        int unique = 0;
        for(int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if(charExist[c - 'a'] == false) {
                charExist[c - 'a'] = true;
                unique++;
            }
        }
        return unique;
    }
}