/*
Given a binary array nums, return the maximum number of consecutive 1's in the array if you can flip at most one 0.

Example 1:
Input: nums = [1,0,1,1,0]
Output: 4
Explanation: Flip the first zero will get the maximum number of consecutive 1s. After flipping, the maximum number of consecutive 1s is 4.

Example 2:
Input: nums = [1,0,1,1,0,1]
Output: 4
*/
class Solution {
    // you can flip at most one 0.
    public int findMaxConsecutiveOnes(int[] nums) {
        // Sliding Window
        int zeroIdxLoc = -1;
        int right = 0;
        int res = 0;
        int count = 0;
        boolean toggle = false;
        while(right != nums.length) {
            
            if(nums[right] != 0) {
                right++;
            }
            else {
                if(toggle) {                    
                    count = right - zeroIdxLoc - 1;
                }
                else {
                    toggle = true;
                }
                zeroIdxLoc = right;
                right++;
                
            }
            count++;
            res = Math.max(res, count);
        }
        
        return res;
        
        // Dynamic Programming
//         int size = nums.length;
        
//         int[][] dp = new int[size + 1][2];
//         int res = 0;
        
//         for(int i = 1; i <= size; i++) {
//             // flip
//             if(nums[i - 1] == 0) {
//                 dp[i][1] = dp[i - 1][0] + 1;
//                 dp[i][0] = 0;
//                 res = Math.max(res, dp[i][1]);
//             }// no need to flip
//             else {
//                 dp[i][0] = dp[i - 1][0] + 1;
//                 dp[i][1] = dp[i - 1][1] + 1;
//                 res = Math.max(res, Math.max(dp[i][0], dp[i][1]));
//             }
//         }
//         return res;
    }
    
    
}