/*
Given a binary array data, return the minimum number of swaps required to group all 1â€™s present in the array together in any place in the array.

Example 1:
Input: data = [1,0,1,0,1]
Output: 1
Explanation: There are 3 ways to group all 1's together:
[1,1,1,0,0] using 1 swap.
[0,1,1,1,0] using 2 swaps.
[0,0,1,1,1] using 1 swap.
The minimum is 1.

Example 2:
Input: data = [0,0,0,1,0]
Output: 0
Explanation: Since there is only one 1 in the array, no swaps are needed.

Example 3:
Input: data = [1,0,1,0,1,0,0,1,1,0,1]
Output: 3
Explanation: One possible solution that uses 3 swaps is [0,0,0,0,0,1,1,1,1,1,1].
*/
class Solution {
    public int minSwaps(int[] data) {
        int oneNum = 0;
        int res = Integer.MAX_VALUE;
        for(int i = 0; i < data.length; i++) {
            if(data[i] == 1) {
                oneNum++;
            }
        }
        
        int curCnt = 0;
        for(int i = 0; i < oneNum; i++) {
            if(data[i] == 1) {
               curCnt++; 
            }
        }
        
        for(int right = oneNum - 1; right < data.length; right++) {
            int left = right - oneNum + 1;
            
            if(res > oneNum - curCnt) {
                res = oneNum - curCnt;
            }
            if(right + 1 < data.length && data[left] == 1 && data[right + 1] == 0) {
                curCnt--;
            }
            else if(right + 1 < data.length && data[left] == 0 && data[right + 1] == 1) {
                curCnt++;
            }
        }
        return res;
    }
}