/*
Given a binary array nums and an integer k, return the maximum number of consecutive 1's in the array if you can flip at most k 0's.

Example 1:
Input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2
Output: 6
Explanation: [1,1,1,0,0,1,1,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.

Example 2:
Input: nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3
Output: 10
Explanation: [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.
*/
class Solution {
    public int longestOnes(int[] nums, int k) {
        int max = 0;
        int remain = k;
        int left = 0;
        int right = 0;
        while(right != nums.length) {
            if(nums[right] == 0) {
                if(remain > 0) {
                    remain--;
                    max = Math.max(max, right - left + 1);
                    // System.out.println("right == 0: " + right + "," + left);
                    right++;
                }
                else {
                    while(nums[left] != 0) {
                        left++;
                    }
                    remain++;
                    left++;
                }
            }
            else {
                max = Math.max(max, right - left + 1);
                // System.out.println("right == 0: " + right + "," + left);
                right++;
                
            }
        }
        max = Math.max(max, right - left);
        // System.out.println("outside: " + right + "," + left);
        return max;
    }
}
/* This method using a monotonously increase. we don't care the K < 0, 
what we do is maintain the window size!
class Solution {
  public int longestOnes(int[] A, int K) {
    int left = 0, right;
    for (right = 0; right < A.length; right++) {
      // If we included a zero in the window we reduce the value of K.
      // Since K is the maximum zeros allowed in a window.
      if (A[right] == 0) K--;
      // A negative K denotes we have consumed all allowed flips and window has
      // more than allowed zeros, thus increment left pointer by 1 to keep the window size same.
      if (K < 0) {
        // If the left element to be thrown out is zero we increase K.
        if (A[left] == 0) K++;
        left++;
      }
    }
    return right - left;
  }
}
*/