/*
Given an array of integers arr, find the sum of min(b), where b ranges over every (contiguous) subarray of arr. Since the answer may be large, return the answer modulo 109 + 7.

Example 1:
Input: arr = [3,1,2,4]
Output: 17
Explanation: 
Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. 
Minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.
Sum is 17.

Example 2:
Input: arr = [11,81,94,43,3]
Output: 444
*/
class Solution {
    public int sumSubarrayMins(int[] arr) {
        int size = arr.length;
        int MOD = 1000000007;
        // the Stack is store the index
        Stack<Integer> st = new Stack<>();
        int res = 0;
        int[] sumArr = new int[size];
        
        for(int i = 0; i < size; i++) {
            int sum = 0;
            if(st.isEmpty()) {
                // this means the arr[i] is the minimum value from start to now.
                sum = sum + (arr[i] * (i + 1));
            }
            else {
                while( !st.isEmpty() && arr[st.peek()] > arr[i]) {
                    st.pop();
                }
                // if the cur element is the smallest means the stack pop out all elements
                if(st.isEmpty()) {
                    sum = sum + (arr[i] * (i + 1));
                }
                else {
                    // left and right is based on the stack's peek element
                    // the right value
                    sum = sum + arr[i] * (i - st.peek());
                    // the left value
                    if(st.peek() >= 0) {
                        sum = sum + sumArr[st.peek()];
                    }
                }
            }
            st.add(i);
            sumArr[i] = sum;
            res = (res + sum) % MOD;
            
        }
        return res % MOD;
    }
}