// board =
// [
//   ['A','B','C','E'],
//   ['S','F','C','S'],
//   ['A','D','E','E']
// ]

// Given word = "ABCCED", return true.
// Given word = "SEE", return true.
// Given word = "ABCB", return false.

class Solution {
    public boolean exist(char[][] board, String word) {
        for(int i = 0; i < board.length; i++) {
            for(int j = 0; j < board[i].length; j++) {
                if(board[i][j] == word.charAt(0)) {
                    if(find_path(i, j, board, word, 0) == true) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
    
    public boolean find_path(int row, int col, char[][] board, String word, int cnt) {
        if(word.length() == cnt) {
            return true;
        }
        if(row < 0 || row >= board.length || col < 0 || col >= board[0].length || board[row][col] != word.charAt(cnt)) {
            return false;
        }
        char temp=board[row][col];
        board[row][col]=' ';
        // left right up down
        boolean find = find_path(row, col - 1, board, word, cnt + 1) ||
                  find_path(row, col + 1, board, word, cnt + 1) ||
                  find_path(row - 1, col, board, word, cnt + 1) ||
                  find_path(row + 1, col, board, word, cnt + 1);
        board[row][col]=temp;
        return find;
    }
    
}