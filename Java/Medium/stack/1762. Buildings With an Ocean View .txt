/*
There are n buildings in a line. You are given an integer array heights of size n that represents the heights of the buildings in the line.
The ocean is to the right of the buildings. A building has an ocean view if the building can see the ocean without obstructions. Formally, a building has an ocean view if all the buildings to its right have a smaller height.
Return a list of indices (0-indexed) of buildings that have an ocean view, sorted in increasing order.

Example 1:
Input: heights = [4,2,3,1]
Output: [0,2,3]
Explanation: Building 1 (0-indexed) does not have an ocean view because building 2 is taller.

Example 2:
Input: heights = [4,3,2,1]
Output: [0,1,2,3]
Explanation: All the buildings have an ocean view.

Example 3:
Input: heights = [1,3,2,4]
Output: [3]
Explanation: Only building 3 has an ocean view.

Example 4:
Input: heights = [2,2,2,2]
Output: [3]
Explanation: Buildings cannot see the ocean if there are buildings of the same height to its right.

*/
class Solution {
    public int[] findBuildings(int[] heights) {
        Stack<Integer> st = new Stack<>();
        int size = heights.length;
        for(int i = size - 1; i >= 0 ; i--) {
            if(st.isEmpty() || heights[st.peek()] < heights[i]) {
                st.add(i);
            }
        }
        int[] res = new int[st.size()];
        for(int i = 0; i < res.length; i++) {
            res[i] = st.pop();
        }
        return res;
    }
}

class Solution {
    public int[] findBuildings(int[] heights) {
        if(heights.length == 1) {
            return new int[] {0};
        }
        Stack<Integer> st = new Stack<>();
        
        for(int i = 0; i < heights.length; i++) {
            while(!st.isEmpty() && heights[st.peek()] <= heights[i] ) {
                st.pop();
            }
            st.push(i);
        }
        
        int[] arr = new int[st.size()];
        for(int i = arr.length - 1; i >= 0; i--) {
            arr[i] = st.pop();
        }
        return arr;
        
    }
//     public int[] findBuildings(int[] heights) {
//         if(heights.length == 1) {
//             return new int[] {0};
//         }
//         Stack<Node> st = new Stack<>();
//         Queue<Integer> q = new LinkedList<>();
//         st.push(new Node(heights.length - 1, heights[heights.length - 1]));
//         for(int i = heights.length - 2; i >= 0; i-- ) {
//             Node tmp = st.peek();
//             if(tmp.val < heights[i]) {
//                 st.pop();
//                 q.offer(tmp.index);
//                 st.push(new Node(i, heights[i] ) );
//             }
//         }
//         q.offer(st.pop().index);
//         int[] arr = new int[q.size()];
//         for(int i = arr.length - 1; i >= 0; i--) {
//             arr[i] = q.poll();
//         }
//         return arr;
//     }
    
//     public class Node {
//         int index;
//         int val;
//         public Node(int index, int val) {
//             this.index = index;
//             this.val = val;
//         }
//     }
}

/*
4 2 3 1
1x 3x 4
0 2 3

3 2 4 3 1
1x 3x 4
4 3
*/