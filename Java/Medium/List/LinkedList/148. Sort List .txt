// Merge Sort && LinkedList
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
        if(head == null || head.next == null) {
            return head;
        }
        ListNode mid = getmid(head);
        ListNode left_part = sortList(head);
        ListNode right_part = sortList(mid);
        return mergeNode(left_part, right_part);
        // if(head == null) {
        //     return null;
        // }
        // PriorityQueue<ListNode> pq = new PriorityQueue<>((a, b) -> a.val - b.val);
        // while(head != null) {
        //     pq.offer(head);
        //     head = head.next;
        // }
        // ListNode dummy = new ListNode(-1);
        // head = dummy;
        // while(!pq.isEmpty()) {
        //     head.next = pq.poll();
        //     head = head.next;
        // }
        // head.next = null;
        // return dummy.next;
            
    }
    
    private ListNode mergeNode(ListNode left_part, ListNode right_part) {
        ListNode dummy = new ListNode();
        ListNode tail = dummy;
        while(left_part != null && right_part != null) {
            if(left_part.val > right_part.val) {
                tail.next = right_part;
                right_part = right_part.next;
                tail = tail.next;
            }
            else {
                tail.next = left_part;
                left_part = left_part.next;
                tail = tail.next;
            }
        }
        if(left_part == null) {
            tail.next = right_part;
        }
        else {
            tail.next = left_part;
        }
        return dummy.next;
    }
    
    private ListNode getmid(ListNode head) {
        ListNode fast = head;
        ListNode slow = null;
        while(fast != null && fast.next != null) {
            slow = (slow == null) ? head : slow.next;
            fast = fast.next.next;
        }
        ListNode mid = slow.next;
        
        slow.next = null;
        
       
        return mid;
    }
    
    
}