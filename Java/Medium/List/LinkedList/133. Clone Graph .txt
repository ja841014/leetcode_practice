/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

class Solution {
    public Node cloneGraph(Node node) {
        if(node == null) {
            return null;
        }
        Node root = node;
        // map (old node, new node)
        Map<Node, Node> map = new HashMap<>();
        Queue<Node> q = new LinkedList<>();
        q.offer(root);
        map.put(root, new Node(root.val, new ArrayList<Node>()));
        // build up the map with all Node
        // BFS
        while(!q.isEmpty()) {
            Node tmp = q.poll(); 
            for(int i = 0; i < tmp.neighbors.size(); i++) {
                if(map.containsKey(tmp.neighbors.get(i)) == false) {
                    q.offer(tmp.neighbors.get(i));
                    map.put(tmp.neighbors.get(i), new Node(tmp.neighbors.get(i).val, new ArrayList<Node>()));  
                }
            }
        }
        // build up the node neighbor
        for(Node n : map.keySet()) {
            // new node refernce
            Node tmp = map.get(n);
            for(Node n_neighbor : n.neighbors) {
                tmp.neighbors.add(map.get(n_neighbor));
            }
        }
        return map.get(node);
    }
}