/*
Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.

Example 1:
Input: head = [1,2,3,3,4,4,5]
Output: [1,2,5]

Eample 2:
Input: head = [1,1,1,2,3]
Output: [2,3]
*/
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        if(head == null) {
            return null;
        }
        ListNode root = new ListNode(0);
        ListNode result = root;
        int index = 0;
        while(head.next != null) {
            if(head.val == head.next.val) {
                index++;
            }
            else {
                if(index == 0) {
                    root.next = new ListNode(head.val);
                    root = root.next;
                }
                index = 0;
            }      
            head = head.next;
        }
        if(index == 0) {
            root.next = new ListNode(head.val);
        }
        return result.next;
    }
}