/*
Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.
You should preserve the original relative order of the nodes in each of the two partitions.

Input: head = [1,4,3,2,5,2], x = 3
Output: [1,2,2,4,3,5]

Input: head = [2,1], x = 2
Output: [1,2]
*/
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode partition(ListNode head, int x) {
        ListNode front = new ListNode(0);
        ListNode tmpFront = front;
        ListNode back = new ListNode(0);
        ListNode tmpBack = back;
        while(head != null) {
            if(head.val < x) {
                ListNode curNode = new ListNode(head.val);
                tmpFront.next = curNode;
                tmpFront = tmpFront.next;
                head = head.next;
            }
            else {
                ListNode curNode = new ListNode(head.val);
                tmpBack.next = curNode;
                tmpBack = tmpBack.next;
                head = head.next;
            }
        }
        
        tmpFront.next = back.next;
        return front.next;
    }
}