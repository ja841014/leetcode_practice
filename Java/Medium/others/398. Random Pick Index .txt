/* Reservoir Sampling https://cloud.tencent.com/developer/article/1376934
Given an array of integers with possible duplicates, randomly output the index of a given target number. You can assume that the given target number must exist in the array.

Note:
The array size can be very large. Solution that uses too much extra space will not pass the judge.

Example:

int[] nums = new int[] {1,2,3,3,3};
Solution solution = new Solution(nums);

// pick(3) should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.
solution.pick(3);

// pick(1) should return 0. Since in the array only nums[0] is equal to 1.
solution.pick(1);
*/
class Solution {
    // (num, Index)
    private Map<Integer, List<Integer>> map;
    private Random rnd;
    
    public Solution(int[] nums) {
        map = new HashMap<>();
        rnd = new Random();
        // build map
        buildMap(nums, map);
    }
    
    public int pick(int target) {
        int size = map.get(target).size();
        int num = rnd.nextInt(size);
        return map.get(target).get(num);
    }
    
    
    private void buildMap(int[] nums, Map<Integer, List<Integer>> map) {
        for(int i = 0; i < nums.length; i++) {
            if(map.containsKey(nums[i]) == false) {
                map.put(nums[i], new ArrayList<>());
            }
            map.get(nums[i]).add(i);
        }
    }
}

/**
 * Your Solution object will be instantiated and called as such:
 * Solution obj = new Solution(nums);
 * int param_1 = obj.pick(target);
 */