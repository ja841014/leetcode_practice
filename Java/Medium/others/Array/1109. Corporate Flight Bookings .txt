// lazy propagation
/*
There are n flights, and they are labeled from 1 to n.
We have a list of flight bookings.  The i-th booking bookings[i] = [i, j, k] means that we booked k seats from flights labeled i to j inclusive.
Return an array answer of length n, representing the number of seats booked on each flight in order of their label.

Example 1:
Input: bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5
Output: [10,55,45,25,25]
*/
class Solution {
    public int[] corpFlightBookings(int[][] bookings, int n) {
        
        int[] totalSeats = new int[n];
        for(int i = 0; i < bookings.length; i++) {
            // why we minus 1 ? because our array start from 0 but the restriction start from 1
            int start = bookings[i][0] - 1;
             // Actually, we have to plus 1 index in our array but because the restriction start from 1. Therefore, we have to minus 1 back
            int end = bookings[i][1] + 1 - 1;
            int cost = bookings[i][2];
            
            totalSeats[start] = totalSeats[start] + cost;
            if(end < n) {
                totalSeats[end] = totalSeats[end] - cost;
            }
        }
        
        // lazy update
        for(int i = 1; i < totalSeats.length; i++) {
            totalSeats[i] = totalSeats[i - 1] + totalSeats[i];
        }
        
        return totalSeats;
    }
}