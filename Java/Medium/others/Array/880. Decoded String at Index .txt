// https://www.youtube.com/watch?v=6iE7QJRMXzs&ab_channel=AlgorithmsMadeEasy
/*
An encoded string S is given.  To find and write the decoded string to a tape, the encoded string is read one character at a time and the following steps are taken:

If the character read is a letter, that letter is written onto the tape.
If the character read is a digit (say d), the entire current tape is repeatedly written d-1 more times in total.
Now for some encoded string S, and an index K, find and return the K-th letter (1 indexed) in the decoded string.

Example 1:
Input: S = "leet2code3", K = 10
Output: "o"
Explanation: 
The decoded string is "leetleetcodeleetleetcodeleetleetcode".
The 10th letter in the string is "o".

Example 2:
Input: S = "ha22", K = 5
Output: "h"
Explanation: 
The decoded string is "hahahaha".  The 5th letter is "h".

Example 3:
Input: S = "a2345678999999999999999", K = 1
Output: "a"
Explanation: 
The decoded string is "a" repeated 8301530446056247680 times.  The 1st letter is "a".
*/
class Solution {
    public String decodeAtIndex(String S, int k) {
        StringBuilder sb = new StringBuilder();
        long size = 0;
        
        for(int i = 0; i < S.length(); i++) {
            char currChar = S.charAt(i);
            // if is a number
            if(Character.isDigit(currChar)) {
                size = size * (currChar - '0');
            }
            else {
                size++;
            }
        }
        // using backward
        for(int i = S.length() - 1; i >= 0; i--) {
            char currChar = S.charAt(i);
            // reduece index K
            k %= size;
            if((k == 0 || k == size) &&  Character.isLetter(currChar)) {
                return Character.toString(currChar);
            }
            if(Character.isDigit(currChar)) {
                size = size / (currChar - '0');
            }
            else {
                size--;
            }
        }
        return null;
        // for(int i = 0; i < S.length(); i++) {
        //     char currChar = S.charAt(i);
        //     // if is a number
        //     if(Character.isDigit(currChar)) {
        //         int times = Integer.parseInt(currChar + "") - 1;
        //         paste(sb, times);
        //     }
        //     else {
        //         sb.append(currChar);
        //     }
        // }
        // return sb.substring(K - 1, K);
    }
    
    // private void paste(StringBuilder sb, int times) {
    //     String str = sb.toString();
    //     for(int i = 0; i < times; i++ ) {
    //         sb.append(str);
    //     }
    // }
}