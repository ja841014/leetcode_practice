/*
You are given an integer array nums. You can choose exactly one index (0-indexed) and remove the element. Notice that the index of the elements may change after the removal.
For example, if nums = [6,1,7,4,1]:
Choosing to remove index 1 results in nums = [6,7,4,1].
Choosing to remove index 2 results in nums = [6,1,4,1].
Choosing to remove index 4 results in nums = [6,1,7,4].
An array is fair if the sum of the odd-indexed values equals the sum of the even-indexed values.
Return the number of indices that you could choose such that after the removal, nums is fair.

 

Example 1:
Input: nums = [2,1,6,4]
Output: 1
Explanation:
Remove index 0: [1,6,4] -> Even sum: 1 + 4 = 5. Odd sum: 6. Not fair.
Remove index 1: [2,6,4] -> Even sum: 2 + 4 = 6. Odd sum: 6. Fair.
Remove index 2: [2,1,4] -> Even sum: 2 + 4 = 6. Odd sum: 1. Not fair.
Remove index 3: [2,1,6] -> Even sum: 2 + 6 = 8. Odd sum: 1. Not fair.
There is 1 index that you can remove to make nums fair.

Example 2:
Input: nums = [1,1,1]
Output: 3
Explanation: You can remove any index and the remaining array is fair.

Example 3:
Input: nums = [1,2,3]
Output: 0
Explanation: You cannot make a fair array after removing any index.
*/
class Solution {
    public int waysToMakeFair(int[] nums) {
        if(nums.length == 1) {
            return 1;
        }
        int orgOdd = 0;
        int orgEven = 0;
        
        for(int i = 0; i < nums.length; i++) {
            if(i % 2 == 0) {
                orgEven = orgEven + nums[i];
            }
            else {
                orgOdd = orgOdd + nums[i];
            }
        }
        
        int leftOddSum = 0;
        int leftEvenSum = 0;
        int res = 0;
        
        for(int i = 0; i < nums.length; i++) {
            int curOddSum = 0;
            int curEvenSum = 0;
            if( i % 2 == 0) {
                curEvenSum = leftEvenSum + (orgOdd - leftOddSum);
                curOddSum = leftOddSum + (orgEven - leftEvenSum) - nums[i];
                leftEvenSum = leftEvenSum + nums[i];
            }
            else {
                curEvenSum = leftEvenSum + (orgOdd - leftOddSum) - nums[i];
                curOddSum = leftOddSum + (orgEven - leftEvenSum);
                leftOddSum = leftOddSum + nums[i];
            }
            
            if(curEvenSum == curOddSum) {
                res++;
            }
        }
        
        return res;
    }
}
/*
6 1 7 4 1
odd = 14
even = 5
---------
1 7 4 1
odd =  5 + 0
even = 0 + (14 - 0) - 6  = 8

6 7 4 1
odd = 6 + (5 - 1) = 10
even = (14 - 6) + 0 = 8

6 1 4 1
odd = 6 +(5-1) = 10
even = 1 + (14 - 6) - 7 = 2

6 1 7 1
odd = 13 + (5 - 1) - 4 = 13

6 1 7 4
 => odd to even and even to odd
 odd is odd even is even <=
*/