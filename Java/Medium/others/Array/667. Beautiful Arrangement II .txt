/*
Given two integers n and k, you need to construct a list which contains n different positive integers ranging from 1 to n and obeys the following requirement: 
Suppose this list is [a1, a2, a3, ... , an], then the list [|a1 - a2|, |a2 - a3|, |a3 - a4|, ... , |an-1 - an|] has exactly k distinct integers.
If there are multiple answers, print any of them.

Example 1:
Input: n = 3, k = 1
Output: [1, 2, 3]
Explanation: The [1, 2, 3] has three different positive integers ranging from 1 to 3, and the [1, 1] has exactly 1 distinct integer: 1.

Example 2:
Input: n = 3, k = 2
Output: [1, 3, 2]
Explanation: The [1, 3, 2] has three different positive integers ranging from 1 to 3, and the [2, 1] has exactly 2 distinct integers: 1 and 2.
*/
class Solution {
    public int[] constructArray(int n, int k) {
        int[] ans = new int[n];
        // record the thresohold, (i.e. numbers under "num" are used already)
        int num = 1 + k + 1;
        boolean toggle = false;
        // record the current index
        int index = 1;
        ans[0] = 1;
        for(int i = k; i > 0 ; i--) {
            
            if(toggle == false) {
                ans[index] = ans[index - 1] + i;
                toggle = true;
            }
            else {
                ans[index] = ans[index - 1] - i;
                toggle = false;
            }
            index++;
        }
        // fill up the rest of the array
        for(int i = index; i < n; i++) {
            ans[i] = num;
            num++;
        }
        return ans;
    }
}