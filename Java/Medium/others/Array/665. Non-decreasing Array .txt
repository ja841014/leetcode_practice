/*
Given an array nums with n integers, your task is to check if it could become non-decreasing by modifying at most one element.
We define an array is non-decreasing if nums[i] <= nums[i + 1] holds for every i (0-based) such that (0 <= i <= n - 2).

Example 1:
Input: nums = [4,2,3]
Output: true
Explanation: You could modify the first 4 to 1 to get a non-decreasing array.

Example 2:
Input: nums = [4,2,1]
Output: false
Explanation: You can't get a non-decreasing array by modify at most one element.
testCase:
[3,4,2,3]  false
[-1,4,2,3] true

[6,1,2,3]  true
[6,1,7,8]  true

[5,7,1,8] true: eliminate the most smallest element

[4,2,1]
*/
class Solution {
    public boolean checkPossibility(int[] nums) {
                
        int numViolation = 0;
        for(int i = 1; i < nums.length; i++) {
            if(nums[i - 1] > nums[i]) {
                if(numViolation == 1) {
                    return false;
                }
                // small, large, medium
                if( i < 2 || nums[i - 2] <= nums[i]) {
                    // small, medium, medium
                    nums[i - 1] = nums[i];
                }// medium, large, small
                else {
                    // small, large, large
                    nums[i] = nums[i- 1];
                }
                numViolation++;
                
            }
            
        }
        return true;
        
    }
   
}