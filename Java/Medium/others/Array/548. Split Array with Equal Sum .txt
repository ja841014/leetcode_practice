/*
Given an array with n integers, you need to find if there are triplets (i, j, k) which satisfies following conditions:

0 < i, i + 1 < j, j + 1 < k < n - 1
Sum of subarrays (0, i - 1), (i + 1, j - 1), (j + 1, k - 1) and (k + 1, n - 1) should be equal.
where we define that subarray (L, R) represents a slice of the original array starting from the element indexed L to the element indexed R.
Example:

Input: [1,2,1,2,1,2,1]
Output: True
Explanation:
i = 1, j = 3, k = 5. 
sum(0, i - 1) = sum(0, 0) = 1
sum(i + 1, j - 1) = sum(2, 2) = 1
sum(j + 1, k - 1) = sum(4, 4) = 1
sum(k + 1, n - 1) = sum(6, 6) = 1
*/
class Solution {
    public boolean splitArray(int[] nums) {
        int sum = 0;
        int target = 0;
        for(int n : nums) {
            sum += n;
        }
        // System.out.println(sum);
        for(int i = 1; i < nums.length - 5; i++) {
            if(nums[i - 1] == 0) {
                continue;
            }
            target = target + nums[i - 1];
            if(helper(nums, i + 1, sum - target - nums[i] ,target, 1)) {
                return true;
            }
            
        }
        return false;
        
    }
    
    
    private boolean helper(int[] nums, int startIdx, int remain, int curTarget, int depth) {
        
        if(depth == 3) {
            if(remain == curTarget) {
                return true;
            }
            return false;
        }
        
        int sub = 0;
        // we have to remian at least nums.length - 5 + depth * 2 space for other subArray
        for(int i = startIdx + 1; i < nums.length - 5 + depth * 2; i++) {
            sub = sub + nums[i - 1];
            if(sub == curTarget) {
                if(helper(nums, i + 1, remain - curTarget - nums[i], curTarget, depth + 1)) {
                    return true;
                }
            }
        }
        return false;
    }
    
}