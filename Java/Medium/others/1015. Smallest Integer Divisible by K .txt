// find the length of the smallest positive integer N
// N is divisible by K
// N only contains the digit 1
// ref: https://leetcode.com/problems/smallest-integer-divisible-by-k/discuss/263041/Java-Solution-explanation-with-picture

/*
Given a positive integer K, you need to find the length of the smallest positive integer N such that N is divisible by K, and N only contains the digit 1.
Return the length of N. If there is no such N, return -1.
Note: N may not fit in a 64-bit signed integer.

Example 1:
Input: K = 1
Output: 1
Explanation: The smallest answer is N = 1, which has length 1.

Example 2:
Input: K = 2
Output: -1
Explanation: There is no such positive integer N divisible by 2.

Example 3:
Input: K = 3
Output: 3
Explanation: The smallest answer is N = 111, which has length 3.
*/
class Solution {
    public int smallestRepunitDivByK(int K) {
        int remain = 0;
        for(int i = 1; i <= K; i++) {
            remain = (remain * 10 + 1) % K;
            if(remain == 0) {
                return i;
            }
        }
        return -1;
    }
}