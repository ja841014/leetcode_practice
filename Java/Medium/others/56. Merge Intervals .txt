// lambda function, List change to Array
/*
Given a collection of intervals, merge all overlapping intervals.
Example 1:
Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].

Example 2:
Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
*/
class Solution {
    public int[][] merge(int[][] intervals) {
        if(intervals.length == 0) {
            int[][] a = {};
            return a;
        }
        Arrays.sort(intervals, (a, b) -> a[0] - b[0]);
        int slow = 0;
        int fast = 0;
        int gate = -1;
        int start = 0;
        int end = 0;
        List<int[]> ls = new ArrayList<>();

        while(fast < intervals.length) {
            // means slow ptr interval's end time is bigger than new interval's strat time => overlap
            if(intervals[slow][1] >= intervals[fast][0]) {
                if(gate == -1) {
                    start = intervals[slow][0];
                }
                gate++;
                // if "end" is not bigger than new interval's end time, we have to update
                if(end <= intervals[fast][1]) {
                    slow = fast;    
                    end = intervals[fast][1];
                }      
                fast++;
                // we have to complete the last merge interval and add into List.
                if(fast >= intervals.length) {
                    ls.add(new int[] {start, end});
                    break;
                }
            }
            else {
                // reset the gate
                gate = -1;
                ls.add(new int[] {start, end});
                // reset
                slow = fast;
                start = intervals[slow][0];
                end = intervals[slow][1];
            }
        }
        int[][] arr = new int[ls.size()][2];
        // list change to Array
        arr = ls.toArray(arr); 
        return arr;
    }
}