/**
You are given two integers num1 and num2.
In one operation, you can choose integer i in the range [0, 60] and subtract 2i + num2 from num1.
Return the integer denoting the minimum number of operations needed to make num1 equal to 0.
If it is impossible to make num1 equal to 0, return -1.

Example 1:
Input: num1 = 3, num2 = -2
Output: 3
Explanation: We can make 3 equal to 0 with the following operations:
- We choose i = 2 and substract 22 + (-2) from 3, 3 - (4 + (-2)) = 1.
- We choose i = 2 and substract 22 + (-2) from 1, 1 - (4 + (-2)) = -1.
- We choose i = 0 and substract 20 + (-2) from -1, (-1) - (1 + (-2)) = 0.
It can be proven, that 3 is the minimum number of operations that we need to perform.

Example 2:
Input: num1 = 5, num2 = 7
Output: -1
Explanation: It can be proven, that it is impossible to make 5 equal to 0 with the given operation.
 */

class Solution {
    /**
    formula
    i in the range [0, 60] 
    num1 - (2^i1 + num2) - (2^i2 + num2) + .....= 0
    => num1 - ( 2^i1 + 2^i2 + 2^i3.... ) - k * num2 = 0
    => num1 =  ( 2^i1 + 2^i2 + 2^i3.... ) + k * num2
    => num1 - k * num2 = ( 2^i1 + 2^i2 + 2^i3.... )
    k means how many operation
    at most 60 operations
     */
    public int makeTheIntegerZero(int num1, int num2) {
        if(num1 < num2) {
            return -1;
        }
        
        for(int operation = 0; operation <= 100; operation++) {
            long tmpAns = num1 - 1l * operation * num2;
            int bits = countBits(tmpAns);
            /**
            num1 = 11, num2 = 5
            It's not possible to do this with 0 or 1 operations 
            But what about 2 operations? 
            Well, in this case, k = 2, target = 11 - 2 * 5 = 1. 
            However, we cannot make target = 1 with two powers of two;
            we can only make a minimum of 2^0 + 2^0 = 2 > 1.
             */
             // bits <= tmpAns
            if(bits <= operation && operation <= tmpAns) {
                return operation;
            }
        }
        return -1;
    }

    private int countBits(long val) {
        int count = 0;
        while(val > 0) {
            if( (val & 1)  == 1) {
                count++;
            }
            val = val >> 1;
        }
        return count;
    }

}
