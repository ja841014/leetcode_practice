/* TreeSet
Given an array of integers, find out whether there are two distinct indices i and j in the array such that the absolute difference between nums[i] and nums[j] is at most t and the absolute difference between i and j is at most k.

Example 1:
Input: nums = [1,2,3,1], k = 3, t = 0
Output: true

Example 2:
Input: nums = [1,0,1,1], k = 1, t = 2
Output: true

Example 3:
Input: nums = [1,5,9,1,5,9], k = 2, t = 3
Output: false*/
class Solution {
    // index i and j 位置差k  nums[i] nums[j]值差 t 
    public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {
        if(nums.length == 0 ) {
            return false;
        }
        // we have to use tree set, because we can use it feature.
        // floor can find the max element which is not bigger than target 
        // and ceil can find the min element which is not smaller than target.
        TreeSet<Long> treeset = new TreeSet<>();
        for(int i = 0; i < nums.length; i++) {
            // why we use Integer not int, becasuse it might return null, but this cannot pass the 2147483647 and -2147483648
            // Therfeore, we have to use Long type Long and long are differnet
            Long findup = treeset.floor((long)nums[i] + t);
            Long find_down = treeset.ceiling((long)nums[i] - t);
            
            if((findup != null && findup >= nums[i] ) || (find_down != null && find_down <= nums[i]) ) {
                return true;
            }
            treeset.add((long)nums[i]);
            if(i >= k) {
                treeset.remove((long)nums[i - k]);
            }
        }
        return false;
    }
}