/*
You are given a 0-indexed integer array nums. You have to partition the array into one or more contiguous subarrays.
We call a partition of the array valid if each of the obtained subarrays satisfies one of the following conditions:
The subarray consists of exactly 2 equal elements. For example, the subarray [2,2] is good.
The subarray consists of exactly 3 equal elements. For example, the subarray [4,4,4] is good.
The subarray consists of exactly 3 consecutive increasing elements, that is, the difference between adjacent elements is 1. For example, the subarray [3,4,5] is good, but the subarray [1,3,5] is not.
Return true if the array has at least one valid partition. Otherwise, return false.

Example 1:
Input: nums = [4,4,4,5,6]
Output: true
Explanation: The array can be partitioned into the subarrays [4,4] and [4,5,6].
This partition is valid, so we return true.

Example 2:
Input: nums = [1,1,1,2]
Output: false
Explanation: There is no valid partition for this array.
*/
class Solution {
    boolean find;
    Map<Integer, Boolean> cache;
    public boolean validPartition(int[] nums) {
        find = false;
        //System.out.println("nums.length == index");
        cache = new HashMap<>();
        backTracking(0, nums);
        return find;
    }
    
    private void backTracking(int index, int[] nums) {
        if(nums.length == index) {
            //System.out.println("nums.length == index");
            find = true;
        }
        if(find) {
            return;
        }
        if(cache.containsKey(index)) {
            return;
        }

        // case 1
        if(index + 1< nums.length && nums[index] == nums[index + 1]) {
            backTracking(index + 2, nums);
        }
        //case 2
        if(index + 2 < nums.length && nums[index] == nums[index + 1] && nums[index + 1] == nums[index + 2]) {
            backTracking(index + 3, nums);
        }
        
        //case 3
        if(index + 2 < nums.length && nums[index] == nums[index + 1]  - 1 && nums[index + 1] == nums[index + 2] - 1) {
            backTracking(index + 3, nums);
        }
        
        cache.put(index, false);
        
        
    }

}