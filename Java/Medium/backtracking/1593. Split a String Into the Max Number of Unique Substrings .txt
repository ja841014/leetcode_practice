// class Solution {
//     public int maxUniqueSplit(String s) {
//         if(s.length() == 0) {
//             return 0;
//         }
//         Set<String> set = new HashSet<>();
//         return backtrack(0, set, s);
        
//     }
//     // if the backtrack problem thae we have a return type. we have to count from the bottom
//     public int backtrack(int start, Set<String> set, String s) {
//         if(start >= s.length() ) {
//             return 0;
//         }
//         int maxsize = 0;
//         for(int i = start; i < s.length(); i++) {
//             if(set.contains(s.substring(start, i + 1)) ) {
//                 continue;
//             }
//             set.add(s.substring(start, i + 1));
//             int tmp_max = backtrack(i + 1, set, s);
//             // int tmp_max = set.size();
//             // count from the bottom.
//             maxsize = Math.max(maxsize, tmp_max + 1);
//             set.remove(s.substring(start, i + 1));
//         }
//         return maxsize;
//     }
// }

class Solution {
    int max = 0;
    public int maxUniqueSplit(String s) {
        dfs(s, 0, new HashSet<String>());
        return max;
    }
    private void dfs(String s, int pos, HashSet<String> seen) {
        if(pos == s.length()) {
            max = Math.max(max, seen.size());
            return;
        }
        for(int i = pos; i < s.length(); i++) {
            String cur = s.substring(pos, i + 1);
            if(seen.contains(cur)) continue;
            seen.add(cur);
            dfs(s, i + 1, seen);
            seen.remove(cur);
        }
    }
}