/*
Given a collection of distinct integers, return all possible permutations.

Example:

Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]
*/
//Dynamic- Programming
class Solution {
    List<List<Integer>> res;
    public List<List<Integer>> permute(int[] nums) {
        res = new ArrayList<>();
        helepr(nums, new ArrayList<>());
        return res;
    }
    
    public void helepr(int[] nums, List<Integer> ls) {
        if(ls.size() == nums.length) {
            res.add(new ArrayList<>(ls) );
        }
        
        for(int i = 0; i < nums.length; i++) {
            if(ls.contains(nums[i]) == false) {
                ls.add(nums[i]);
                helepr(nums, ls);
                ls.remove(ls.size() - 1);
            }
            else {
                continue;
            }
            
        }
    }
}