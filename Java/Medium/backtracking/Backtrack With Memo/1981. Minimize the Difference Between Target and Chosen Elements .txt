/*
You are given an m x n integer matrix mat and an integer target.
Choose one integer from each row in the matrix such that the absolute difference between target and the sum of the chosen elements is minimized.
Return the minimum absolute difference.
The absolute difference between two numbers a and b is the absolute value of a - b.

Example 1:
Input: mat = [[1,2,3],[4,5,6],[7,8,9]], target = 13
Output: 0
Explanation: One possible choice is to:
- Choose 1 from the first row.
- Choose 5 from the second row.
- Choose 7 from the third row.
The sum of the chosen elements is 13, which equals the target, so the absolute difference is 0.

Example 2:
Input: mat = [[1],[2],[3]], target = 100
Output: 94
Explanation: The best possible choice is to:
- Choose 1 from the first row.
- Choose 2 from the second row.
- Choose 3 from the third row.
The sum of the chosen elements is 6, and the absolute difference is 94.

*/
class Solution {
    // int minDiff;
    public int minimizeTheDifference(int[][] mat, int target) {
        // minDiff = Integer.MAX_VALUE;
        // for(int i = 0; i < mat.length; i++) {
        //     Arrays.sort(mat[i]);
        // }
        int[][] dp=  new int[mat.length][5000];
        // must assign to -1
        for(int[] arr:dp) Arrays.fill(arr,-1);
        return helper(mat, target, 0, 0, dp);
    }
    
    public int helper(int[][] mat, int target, int row, int sum, int[][] dp) {
        if(row >= mat.length) {
            int curMinDiff = Math.abs(target - sum);
            // minDiff = Math.min(minDiff, curMinDiff);
            return curMinDiff;
        }
        if(dp[row][sum] != -1) {
            return dp[row][sum];
        }
        int ans = Integer.MAX_VALUE;
        for(int i = 0; i < mat[row].length; i++) {
            ans = Math.min(ans, helper(mat, target, row + 1, sum + mat[row][i], dp));
        }
        dp[row][sum] = ans;
        return ans;
    }
}
//. not finish
// class Solution {
//     int minDiff;
//     public int minimizeTheDifference(int[][] mat, int target) {
//         minDiff = Integer.MAX_VALUE;
//         for(int i = 0; i < mat.length; i++) {
//             Arrays.sort(mat[i]);
//         }
//         Map<Integer, Integer> map = new HashMap<>();
//         helper(mat, target, 0, 0);
//         return minDiff;
//     }
    
//     public int helper(int[][] mat, int target, int row, int sum) {
//         if(row >= mat.length) {
//             int curMinDiff = Math.abs(target - sum);
//             minDiff = Math.min(minDiff, curMinDiff);
//             if(sum > target) {
//                 return 1;
//             }
//             else if(sum < target) {
//                 return -1;
//             }
//             return 0;
//         }
        
//         // traverse cols
//         int left = 0;
//         int right = mat[row].length - 1;
//         while(left <= right) {
//             int mid = (right - left) / 2 + left;
//             int res =  helper(mat, target, row + 1, sum + mat[row][mid]);
//             if(res == 0) {
//                 return 0;
//             }
//             else if(res == 1) {
//                 right = mid - 1;
//             }
//             else {
//                 left = mid + 1;
//             }
//         }
        
//         if(right < 0) {
//             return 1;
//         }
//         return -1;
        
//     }
// }