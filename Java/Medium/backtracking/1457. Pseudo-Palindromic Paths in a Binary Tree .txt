/*
Given a binary tree where node values are digits from 1 to 9. A path in the binary tree is said to be pseudo-palindromic if at least one permutation of the node values in the path is a palindrome.
https://leetcode.com/problems/pseudo-palindromic-paths-in-a-binary-tree/discuss/648263/Simple-Java-solution-using-DFS
Return the number of pseudo-palindromic paths going from the root node to leaf nodes.
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int cnt;
    public int pseudoPalindromicPaths (TreeNode root) {
        // we use array to record the frequency
        int[] freq = new int[10];
        cnt = 0;
        // dfs and determine
        dfs(root, freq);
        
        return cnt;
    }
    private void dfs(TreeNode root, int[] freq) {
        if(root == null) {
            return;
        }
        
        freq[root.val]++;
        if(root.right == null && root.left == null) {
            if(isValid(freq)) {
                cnt++;
            }
            freq[root.val]--;
            return;
        }
        dfs(root.left, freq);
        dfs(root.right, freq);
        // at this point, we  will back to upper stack
        // therefore, we have to minus this layer's freq
        freq[root.val]--;
    }
    
    private boolean isValid(int[] freq) {
        int even = 0;
        int odd = 0;
        for(int num: freq) {
            if(num % 2 != 0) {
                odd++;
                // palindromic: at most one digit has odd frequency.
                if(odd >= 2) {
                    return false;
                }
            }
        }
        return true;
    }
}