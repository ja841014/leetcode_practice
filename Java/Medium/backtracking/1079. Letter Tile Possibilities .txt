// Backtracking
// StringBuilder deleteCharAt()
// You have a set of tiles, where each tile has one letter tiles[i] printed on it.  Return the number of possible non-empty sequences of letters you can make.
    
// Example 1:
// Input: "AAB"
// Output: 8
// Explanation: The possible sequences are "A", "B", "AA", "AB", "BA", "AAB", "ABA", "BAA".
class Solution {
    boolean[] visited;
    public int numTilePossibilities(String tiles) {
        Set<String> s = new HashSet<>();
        
        int tiles_size = tiles.length();
        visited = new boolean[tiles_size];
        helper(tiles, s, new StringBuilder(), visited);
        return s.size();
    }
    public void helper(String tiles, Set<String> s, StringBuilder sb, boolean[] visited) {
        if(sb.length() > 0) {
            s.add(sb.toString());
        }
        for(int i = 0; i < tiles.length(); i++) {
            // already visited
            if(visited[i] == true) {
                continue;
            }
            visited[i] = true;
            StringBuilder tmp = sb.append(tiles.charAt(i));
            // backtracking
            helper(tiles, s, tmp, visited);
            //restore phase
            sb.deleteCharAt(sb.length() - 1);
            visited[i] = false;
        }
    }
}