/*
Given a string s, find two disjoint palindromic subsequences of s such that the product of their lengths is maximized. The two subsequences are disjoint if they do not both pick a character at the same index.
Return the maximum possible product of the lengths of the two palindromic subsequences.
A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters. A string is palindromic if it reads the same forward and backward.

Example 1:
example-1
Input: s = "leetcodecom"
Output: 9
Explanation: An optimal solution is to choose "ete" for the 1st subsequence and "cdc" for the 2nd subsequence.
The product of their lengths is: 3 * 3 = 9.

Example 2:
Input: s = "bb"
Output: 1
Explanation: An optimal solution is to choose "b" (the first character) for the 1st subsequence and "b" (the second character) for the 2nd subsequence.
The product of their lengths is: 1 * 1 = 1.

Example 3:
Input: s = "accbcaxxcxx"
Output: 25
Explanation: An optimal solution is to choose "accca" for the 1st subsequence and "xxcxx" for the 2nd subsequence.
The product of their lengths is: 5 * 5 = 25.
*/
class Solution {
    
    int maxProduct = 0;
    public int maxProduct(String s) {
        findAllPali(s, new StringBuilder(), new StringBuilder(), 0);
        return maxProduct;
    }
    
    public void findAllPali(String s, StringBuilder sb1, StringBuilder sb2, int pos) {
        if(pos == s.length()) {
            if(isValid(sb1) && isValid(sb2)) {
                maxProduct = Math.max(maxProduct, sb1.length() * sb2.length());
            }
            return;
        }
        
        sb1.append(s.charAt(pos));
        findAllPali(s, sb1, sb2, pos + 1);
        sb1.deleteCharAt(sb1.length() - 1);
        
        sb2.append(s.charAt(pos));
        findAllPali(s, sb1, sb2, pos + 1);
        sb2.deleteCharAt(sb2.length() - 1);
        
        findAllPali(s, sb1, sb2, pos + 1);
        
        
    }
    
    private boolean isValid(StringBuilder sb) {
        int left = 0;
        int right = sb.length() - 1;
        while(left < right) {
            if(sb.charAt(left) != sb.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
}