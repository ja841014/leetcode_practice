/*
Additive number is a string whose digits can form additive sequence.

A valid additive sequence should contain at least three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.

Given a string containing only digits '0'-'9', write a function to determine if it's an additive number.

Note: Numbers in the additive sequence cannot have leading zeros, so sequence 1, 2, 03 or 1, 02, 3 is invalid.

 

Example 1:

Input: "112358"
Output: true
Explanation: The digits can form an additive sequence: 1, 1, 2, 3, 5, 8. 
             1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8
Example 2:

Input: "199100199"
Output: true
Explanation: The additive sequence is: 1, 99, 100, 199. 
             1 + 99 = 100, 99 + 100 = 199
*/
class Solution {
    
    public boolean isAdditiveNumber(String num) {
        int size = num.length();
        
        // this is an entry, we want to find out the very first two number
        for(int i = 1; i <= size / 2; i++) {
            if(i > 1 && num.charAt(0) == '0') {
                return false;
            }
            for(int j = 1; size - i -j >= Math.max(i, j); j++ ) {
                if(j > 1 && num.charAt(i) == '0') {
                    continue;
                }
                long val1 = Long.parseLong(num.substring(0, i));
                long val2 = Long.parseLong(num.substring(i, i + j));
                if(isVlaid(num, i + j, val1, val2)) {
                    return true;
                }
            }
        }
        
        return false;
    }
    
    private boolean isVlaid(String str, int index, long a, long b) {
        if(str.length() == index) {
            return true;
        }
        for(int i = index; i < str.length(); i++) {
            if(i > index && str.charAt(index) == '0') {
               break;
            }
            long potentialVal = Long.parseLong(str.substring(index, i + 1));
            if(a + b < potentialVal) {
                break;
            }
            if(a + b == potentialVal && isVlaid(str, i + 1, b, potentialVal)) {
                return true;
            }
        }
        return false;
    }
    
  
}