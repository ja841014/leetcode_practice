// backtracking; slightly different!
// when we want to transfer from list to int array, we have to use stream
// ls.stream().mapToInt(num -> num).toArray();
/*
Return all non-negative integers of length N such that the absolute difference between every two consecutive digits is K.
Note that every number in the answer must not have leading zeros except for the number 0 itself. For example, 01 has one leading zero and is invalid, but 0 is valid.
You may return the answer in any order.

Example 1:
Input: N = 3, K = 7
Output: [181,292,707,818,929]
Explanation: Note that 070 is not a valid number, because it has leading zeroes.

Example 2:
Input: N = 2, K = 1
Output: [10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]
*/
class Solution {
    boolean check = false;
    public int[] numsSameConsecDiff(int N, int K) {
        if(K == 0) {
             check = true;
        }
        StringBuilder sb = new StringBuilder();
        ArrayList<Integer> ls = new ArrayList<>();
        if(N == 1) {
            int[] corner_case = new int[]{0,1,2,3,4,5,6,7,8,9};
            return corner_case;
        }
        for(int i = 1; i < 10; i++) {
            sb.append(i); // append the first digits, avoid make 0 as the first digit.
            helper(N, K, sb, ls);
            sb.deleteCharAt(sb.length() - 1);
        }
        
        return ls.stream().mapToInt(num -> num).toArray();
    }
    
    public void helper(int N, int K, StringBuilder sb, List<Integer> ls) {
        
        if(sb.length() == N) {
            ls.add(Integer.parseInt(sb.toString()));
            return;
        }
        // if we use this pattern we have to be careful about this case N = 2, K = 0, Therefore, we have to put a boolean check to avoid duplicate occur.
        
        int lastdigit = sb.charAt(sb.length() - 1) - '0';
        if(lastdigit + K < 10) {
            sb.append(lastdigit + K);
            helper(N, K, sb, ls );
            sb.deleteCharAt(sb.length()-1);
        }
        if(lastdigit - K >= 0 && check == false) {
            sb.append(lastdigit - K);
            helper(N, K, sb, ls );
            sb.deleteCharAt(sb.length()-1);
        }
        // This method is normal backtrack pattern //
        // for(int i = 0; i < 10; i++) {
        //     int lastdigit = sb.charAt(sb.length() - 1) - '0';
        //     if(Math.abs(lastdigit - i) == K) {
        //         sb.append(i);
        //         helper(N, K, sb, ls );
        //         sb.deleteCharAt(sb.length()-1);
        //     }
        // }
        
    }
}