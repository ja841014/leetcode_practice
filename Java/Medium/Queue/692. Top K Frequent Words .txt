/* PQ; pair; HashMap; lambda
Given a non-empty list of words, return the k most frequent elements.
Your answer should be sorted by frequency from highest to lowest. If two words have the same frequency, then the word with the lower alphabetical order comes first.

Example 1:
Input: ["i", "love", "leetcode", "i", "love", "coding"], k = 2
Output: ["i", "love"]
Explanation: "i" and "love" are the two most frequent words.
    Note that "i" comes before "love" due to a lower alphabetical order.
    
Example 2:
Input: ["the", "day", "is", "sunny", "the", "the", "the", "sunny", "is", "is"], k = 4
Output: ["the", "is", "sunny", "day"]
Explanation: "the", "is", "sunny" and "day" are the four most frequent words,
    with the number of occurrence being 4, 3, 2 and 1 respectively.
*/
class Solution {
    public List<String> topKFrequent(String[] words, int k) {
        Map<String, Integer> map = new HashMap<>();
        List<String> ls = new ArrayList<>();
        // build up the map with the String and its frequency
        for(int i = 0; i < words.length; i++) {
            map.put(words[i], map.getOrDefault(words[i], 0) + 1);
        }
        // * a , b is represent pair
        // ** x.compareTo(y) can compare two strings which is bigger by alphabetical order
        PriorityQueue<Pair<String, Integer>> pq = new PriorityQueue<>((a, b) -> 
                                                                      b.getValue() == a.getValue() ? a.getKey().compareTo(b.getKey()) : b.getValue() - a.getValue());
        // put the map's key into Priority queue
        for(String s: map.keySet()) {
            pq.offer(new Pair(s, map.get(s)));
        }
        // then poll out the first k item
        for(int i = 0; i < k; i++) {
            Pair<String, Integer> p = pq.poll();
            ls.add(p.getKey());
        }
        return ls;
    }
}