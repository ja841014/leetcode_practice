/*
Given a non-empty array of integers, return the k most frequent elements.

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
*/
class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        List<Integer> list = new ArrayList<Integer>(); 
        Map<Integer, Integer> map = new HashMap<>();
        // lambda expression
        Queue<Integer> maxheap = new PriorityQueue<Integer>((a, b) -> map.get(b) - map.get(a));
        for(int i = 0; i < nums.length; i++) {
            map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);
        }  
        // map only has keySet(), values(), entrySet()
        for(Integer key: map.keySet()) {
            maxheap.add(key);
        }
        
         for(int i = 0; i < k; i++) {
             list.add(maxheap.poll());
         }
        return list;
    }
}
