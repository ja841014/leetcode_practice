/*
We improve from searching all space -> searching 1/4 -> searching 1/8
searching 1/4 is let which meet the requirement 
( visited == false x >= -1 and y >= -1 ) can go to next depth
searching 1/8 is let variable to be this format

x = Math.abs(x);
y = Math.abs(y);
if(x > y) {
    int tmp = y;
    y = x;
    x = tmp;
}

*/
/*
In an infinite chess board with coordinates from -infinity to +infinity, you have a knight at square [0, 0].

A knight has 8 possible moves it can make, as illustrated below. Each move is two squares in a cardinal direction, then one square in an orthogonal direction.

Return the minimum number of steps needed to move the knight to the square [x, y].  It is guaranteed the answer exists.
*/

class Solution {
    private int[][] DIR = new int[][]{{1,2}, {2,1}, {2,-1}, {1,-2}, {-1,-2}, {-2,-1}, {-2,1}, {-1,2}};
    public int minKnightMoves(int x, int y) {
        boolean[][] table = new boolean[605][605];
        Queue<int[]> q = new LinkedList<>();
        
        x = Math.abs(x);
        y = Math.abs(y);
        if(x > y) {
            int tmp = y;
            y = x;
            x = tmp;
        }
        
        q.offer(new int[]{0, 0});
        table[0 + 302][0 + 302] = true;
        int cnt = 0;
        
        while(!q.isEmpty()) {
            
            int size = q.size();
            for(int i = 0; i < size; i++) {
                int[] curLoc = q.poll();
                if(curLoc[0] == x && curLoc[1] == y ) {
                    return cnt;
                }
                for(int[] next : DIR) {
                    
                    int nextX = Math.abs(curLoc[0] + next[0]);
                    int nextY = Math.abs(curLoc[1] + next[1]);
                    if(x > y) {
                        int tmp = nextY;
                        nextY = nextX;
                        nextX = tmp;
                    }
                    
                    if(table[nextX + 302][nextY + 302] == false) {
                        q.offer(new int[]{nextX, nextY});
                        table[nextX + 302][nextY + 302] = true;
                    }
                    
                }
                
            }
            cnt++;
        }
        return -1;
    }
    
}