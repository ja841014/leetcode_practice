// Input: points = [[1,3],[-2,2]], K = 1
// Output: [[-2,2]]
// Explanation: 
// The distance between (1, 3) and the origin is sqrt(10).
// The distance between (-2, 2) and the origin is sqrt(8).
// Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.
// We only want the closest K = 1 points from the origin, so the answer is just [[-2,2]].
// class lesscompare implements Comparator<int[]>() {
//     public int compare(int[] a, int[] b) {
//         return (a[0])*(a[0]) + (a[1])*(a[1]) ) - ( (b[0])*(b[0]) + (b[1])*(b[1]) );
//     }
// }

class Solution {
    public int[][] kClosest(int[][] points, int K) {
//         PriorityQueue<int[]> minHeap = new PriorityQueue<>(new lesscompare());
        PriorityQueue<int[]> minHeap = new PriorityQueue<>( 
            (a, b) -> ( (a[0])*(a[0]) + (a[1])*(a[1]) ) - ( (b[0])*(b[0]) + (b[1])*(b[1]) )  );
        for (int i = 0; i < points.length; i++) {
            minHeap.offer(new int[]{points[i][0], points[i][1]});
        }
        int[][] result = new int[K][2];
        for(int i = 0; i < K; i++) {
            result[i] = minHeap.poll();
        }
        return result;
    }
}