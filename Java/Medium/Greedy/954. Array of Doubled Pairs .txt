/*
Given an array of integers arr of even length, return true if and only if it is possible to reorder it such that arr[2 * i + 1] = 2 * arr[2 * i] for every 0 <= i < len(arr) / 2.

Example 1:
Input: arr = [3,1,3,6]
Output: false

Example 2:
Input: arr = [2,1,2,6]
Output: false

Example 3:
Input: arr = [4,-2,2,-4]
Output: true
Explanation: We can take two groups, [-2,-4] and [2,4] to form [-2,-4,2,4] or [2,4,-2,-4].

Example 4:
Input: arr = [1,2,4,16,8,4]
Output: false
*/
class Solution {
    public boolean canReorderDoubled(int[] arr) {
        
        arr = Arrays.stream(arr)
        .boxed()
        .sorted((a, b) -> (a < 0 && b < 0) == true ? b - a :a - b)   // just use 'sorted()' for ascending order
        .mapToInt(Integer::intValue)
        .toArray();

        Map<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i < arr.length; i++) {
            map.put(arr[i], map.getOrDefault(arr[i], 0) + 1);
        }
        // from the bigger => bigger num cannot multiple 2
        int count = 0;
        for(int i = arr.length - 1; i >= 0; i--) {
            if(map.get(arr[i]) <= 0) {
                continue;
            }
            if(arr[i] % 2 != 0) {
                return false;
            }
            int nextNum = arr[i] / 2;
            if(!map.containsKey(nextNum)) {
                return false;
            }
            else {
                if(map.get(nextNum) <= 0) {
                    return false;
                }
                map.put(arr[i], map.get(arr[i]) - 1);
                map.put(nextNum, map.get(nextNum) - 1);
            }
            count = count + 2;
        }
        if(count != arr.length) {
            return false;
        }
        return true;
    }
}