// using minheap to track the earliest finished time and to see the next tine frame whether can use pld room or have to open a new room.
// Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si < ei), find the minimum number of conference rooms required.

// Example 1:
// Input: [[0, 30],[5, 10],[15, 20]]
// Output: 2
    
// Example 2:
// Input: [[7,10],[2,4]]
// Output: 1
class Solution {
    public int minMeetingRooms(int[][] intervals) {
        // we want to find out the most overlap point
        Arrays.sort(intervals, (a, b) -> a[0] - b[0]);
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        int room = 1;
        for(int[] curInterval : intervals) {
            // In this situation, it means this interval never encounter the peek interval
            if(!pq.isEmpty() && pq.peek() <= curInterval[0]) {
                room = Math.max(room, pq.size());
                pq.poll();
            }
            pq.offer(curInterval[1]);
        }
        // there might be remaing room in pq, we need to make sure that remaing room is max or not
        room = Math.max(room, pq.size());
        return room;
    }
}
}