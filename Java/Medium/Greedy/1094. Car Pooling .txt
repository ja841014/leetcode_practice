// You are driving a vehicle that has capacity empty seats initially available for passengers.  The vehicle only drives east (ie. it cannot turn around and drive west.)

// Given a list of trips, trip[i] = [num_passengers, start_location, end_location] contains information about the i-th trip: the number of passengers that must be picked up, and the locations to pick them up and drop them off.  The locations are given as the number of kilometers due east from your vehicle's initial location.

// Return true if and only if it is possible to pick up and drop off all passengers for all the given trips. 
// Example 1:
// Input: trips = [[2,1,5],[3,3,7]], capacity = 4
// Output: false
    
// Example 2:
// Input: trips = [[2,1,5],[3,3,7]], capacity = 5
// Output: true
    
// Example 3:
// Input: trips = [[2,1,5],[3,5,7]], capacity = 3
// Output: true
class Solution {
    public boolean carPooling(int[][] trips, int capacity) {
        // sort by started time
        Arrays.sort(trips, (a, b) -> a[1] - b[1]);
        // sort by ended time
        PriorityQueue<int[]> minheap = new PriorityQueue<>((a, b) -> a[2] - b[2]);
        int count = 0;
        int[] temp = {};
        for(int i = 0; i < trips.length; i++) {
            minheap.offer(new int[]{ trips[i][0], trips[i][1], trips[i][2] });
            // if the ended time of first element in the Minheap smaller than current trip started time, we must poll out.
            while(minheap.peek()[2] <= trips[i][1] ) {
                temp = minheap.poll();
                count = count - temp[0];
            }
            count = count +  trips[i][0];
            if(capacity < count) {
                return false;
            }
        }
        return true;
    }
}