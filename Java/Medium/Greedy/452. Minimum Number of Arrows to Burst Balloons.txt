// there is a better solution that sort by the finished time. If therer is another started time > its finished time. it must has to one more arrow.
// An arrow can be shot up exactly vertically from different points along the x-axis. A balloon with xstart and xend bursts by an arrow shot at x if xstart ≤ x ≤ xend. There is no limit to the number of arrows that can be shot. An arrow once shot keeps travelling up infinitely. The problem is to find the minimum number of arrows that must be shot to burst all balloons.

// Example:
// Input:
// [[10,16], [2,8], [1,6], [7,12]]
// Output:
// 2

// Explanation:
// One way is to shoot one arrow for example at x = 6 (bursting the balloons [2,8] and [1,6]) and another arrow at x = 11 (bursting the other two balloons).


class Solution {
    public int findMinArrowShots(int[][] points) {
        // cause the overflow issue [[-2147483646,-2147483645],[2147483646,2147483647]]
        // we have to use Integer.compare()
        Arrays.sort(points, (a, b) -> Integer.compare(a[1], b[1]));
        int res = 0;
        int index = 0;
        while(index < points.length) {
            int[] curBaloon = points[index];
            int nextIdx = index + 1;
            while(nextIdx < points.length && curBaloon[1] >= points[nextIdx][0]) {
                nextIdx++;
            }
            index = nextIdx;
            res++;
        }
        return res;
    }
}


class Solution {
    public int findMinArrowShots(int[][] points) {
        if(points.length == 0) {
            return 0;
        }
//         we cannot use this , we have to use compare, otherwise we cannot pass [[-2147483646,-2147483645],[2147483646,2147483647]]
        // Arrays.sort(points, (a, b) -> a[0] - b[0]);
        // Arrays.sort(points, new Comparator<int[]>() {
        //   public int compare(int[] o1, int[] o2) {
        //     return o1[1] - o2[1];
        //   }
        // });
        
        // I can comment out all of start time, because it is useless to this issue.
        // int start = points[0][0];
        // sort by start time
        Arrays.sort(points, (a, b) -> Integer.compare(a[0], b[0]));
        int numArrow = 1;
        int end = points[0][1];
        for(int i = 1; i < points.length; i++) {
            // 
            if(end >= points[i][0]) {
                if(end > points[i][1]) {
                    end = points[i][1];
                }
            }
            else {
                end = points[i][1];
                numArrow++;
            }
        }
        return numArrow;
    }
}