// Greedy using Math.max it is similar to 769. Max Chunks To Make Sorted
/*
A string S of lowercase English letters is given. We want to partition this string into as many parts as possible so that each letter appears in at most one part, and return a list of integers representing the size of these parts.
Example 1:

Input: S = "ababcbacadefegdehijhklij"
Output: [9,7,8]
Explanation:
The partition is "ababcbaca", "defegde", "hijhklij".
This is a partition so that each letter appears in at most one part.
A partition like "ababcbacadefegde", "hijhklij" is incorrect, because it splits S into less parts.
*/
class Solution {
    public List<Integer> partitionLabels(String S) {
        Map<Character, Integer> map = new HashMap<>();
        // int[] first_loc = new int[26];
        List<Integer> result = new ArrayList<>();
        for(int i = 0; i < S.length(); i++) {
            map.put(S.charAt(i), i);
        }
        int curr_loc = 0;
        int start = 0;
        for(int i = 0; i < S.length(); i++) {
            curr_loc = Math.max( map.get(S.charAt(i)), curr_loc);
            if(curr_loc == i) {
                result.add(curr_loc - start + 1);
                start = curr_loc + 1;
            }
        }
        return result;
    }
}