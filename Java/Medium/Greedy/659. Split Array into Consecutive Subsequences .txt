/* Slightly same as 1296. Divide Array in Sets of K Consecutive Numbers
   
Given an array nums sorted in ascending order, return true if and only if you can split it into 1 or more subsequences such that each subsequence consists of consecutive integers and has length at least 3.
Example 1:
Input: [1,2,3,3,4,5]
Output: True
Explanation:
You can split them into two consecutive subsequences : 
1, 2, 3
3, 4, 5

Example 2:
Input: [1,2,3,3,4,4,5,5]
Output: True
Explanation:
You can split them into two consecutive subsequences : 
1, 2, 3, 4, 5
3, 4, 5

Example 3:
Input: [1,2,3,4,4,5]
Output: False
*/
class Solution {
    public boolean isPossible(int[] nums) {
        if(nums.length < 3) {
            return false;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for(int i : nums) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        int index = 0;
        int cnt = 0;
                
        for(int i : nums) {
            if(map.get(i) == 0) {
                continue;
            }
            
            index = i;
            
            while(map.containsKey(index) && map.get(index) > 0) {
                // determine whether we have to keep growing our sequence or not
                // ex: 1,2,3,3,4,5
                if(cnt >= 3 &&  map.get(index) <= map.get(index - 1) ) {
                    break;
                }
                map.put(index, map.get(index) - 1);
                index++;
                cnt++;
            }
            if(cnt < 3) {
                return false;
            }
            cnt = 0;
        }
        
        return true;
    }
}