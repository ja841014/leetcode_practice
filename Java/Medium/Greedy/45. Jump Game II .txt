/*
Given an array of non-negative integers nums, you are initially positioned at the first index of the array
Each element in the array represents your maximum jump length at that position.
Your goal is to reach the last index in the minimum number of jumps.
You can assume that you can always reach the last index.
 
Example 1:
Input: nums = [2,3,1,1,4]
Output: 2
Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.

Example 2:
Input: nums = [2,3,0,1,4]
Output: 2
*/

class Solution {
    public int jump(int[] nums) {
        // Edge Case
        if(nums.length == 1) {
            return 0;
        }
        int curEnd = 0;
        int curFarthest = 0;
        int cnt = 0;
        for(int i = 0; i < nums.length - 1; i++) {
            curFarthest = Math.max(curFarthest, i + nums[i]);
            if(curEnd == i) {
                cnt++;
                curEnd = curFarthest;
            }
            
        }
        return cnt;
    }
}
    
    
    
// compress BFS would work
// public int jump(int[] nums) {
//         if(nums.length == 1) {
//             return 0;
//         }
//         int currentMax = 0;
//         int nextMax = 0;
//         int level = 0;
//         int i = 0;
        
//         while(true) {
//             level++;
            
//             for(; i <= currentMax; i++) {
//                 nextMax = Math.max(nextMax, nums[i] + i);
//                 if(nextMax >= nums.length - 1) {
//                     return level;
//                 }
//             }
//             currentMax = nextMax;
//         }
//     }
    // BFS TLE
//     public int jump(int[] nums) {
//         if(nums.length == 1) {
//             return 0;
//         }
//         int target = nums.length - 1;
//         // store index
//         Queue<Integer> q = new LinkedList<>();
//         q.offer(0);
//         int count = 0;
//         while(!q.isEmpty()) {
//             int size = q.size();
//             count++;
            
//             for(int j = 0; j < size; j++) {
//                 int curIndex = q.poll();
//                 for(int i = 1; i <= nums[curIndex]; i++) {
//                     int nextIndex = curIndex + i;
//                     if(nextIndex == target) {
//                         return count;
//                     }
//                     else if(nextIndex < nums.length) {
//                         q.offer(nextIndex);
//                     }
//                 }
//             }
            
//         }
//         return -1;
//     }

