/*
Design a HashMap without using any built-in hash table libraries.

Implement the MyHashMap class:

MyHashMap() initializes the object with an empty map.
void put(int key, int value) inserts a (key, value) pair into the HashMap. If the key already exists in the map, update the corresponding value.
int get(int key) returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key.
void remove(key) removes the key and its corresponding value if the map contains the mapping for the key.
*/
class MyHashMap {
    List<Node>[] bucket;
    private final int size = 7793;
    
    /** Initialize your data structure here. */
    public MyHashMap() {
        bucket = new LinkedList[size];
        for(int i = 0; i < size; i++) {
            bucket[i] = new LinkedList<>();
        }
    }
    
    /** value will always be non-negative. */
    public void put(int key, int val) {
        int index = Integer.hashCode(key) % size;
        Node newNode = new Node(key, val);
        if(bucket[index].size() == 0) {
            bucket[index].add(newNode);
        }
        else {
            UpdateOrAdd(key, val, bucket[index], newNode);
        }
    }
    
    private void UpdateOrAdd(int key, int val, List<Node> ls, Node node) {
        for(Node n : ls) {
            if(n.key == key) {
                n.val = val;
                return;
            }
        }
        ls.add(node);
        return;
    }
    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */
    public int get(int key) {
        int index = Integer.hashCode(key) % size;
        for(Node n : bucket[index]) {
            if(n.key == key) {
                return n.val;
            }
        }
        return -1;
    }
    
    /** Removes the mapping of the specified value key if this map contains a mapping for the key */
    public void remove(int key) {
        int index = Integer.hashCode(key) % size;
        for(Node n : bucket[index]) {
            if(n.key == key) {
                bucket[index].remove(n);
                return;
            }
        }
    }
    
    public class Node {
        int val;
        int key;
        public Node(int key, int val) {
            this.key = key;
            this.val = val;
            
        }
    }
  
}

/**
 * Your MyHashMap object will be instantiated and called as such:
 * MyHashMap obj = new MyHashMap();
 * obj.put(key,value);
 * int param_2 = obj.get(key);
 * obj.remove(key);
 */