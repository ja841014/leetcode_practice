/*
Given an integer array nums, handle multiple queries of the following types:
Update the value of an element in nums.
Calculate the sum of the elements of nums between indices left and right inclusive where left <= right.
Implement the NumArray class:
NumArray(int[] nums) Initializes the object with the integer array nums.
void update(int index, int val) Updates the value of nums[index] to be val.
int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).
 
Example 1:
Input
["NumArray", "sumRange", "update", "sumRange"]
[[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]
Output
[null, 9, null, 8]

Explanation
NumArray numArray = new NumArray([1, 3, 5]);
numArray.sumRange(0, 2); // return 1 + 3 + 5 = 9
numArray.update(1, 2);   // nums = [1, 2, 5]
numArray.sumRange(0, 2); // return 1 + 2 + 5 = 8
*/
class NumArray {
    
    int[] bucket;
    int[] nums;
    int totalBlock;
    public NumArray(int[] nums) {
        this.nums = nums;
        int numSize = nums.length;
        double blockSize = Math.sqrt(numSize);
        totalBlock = (int)Math.ceil(numSize / blockSize);
        bucket = new int[totalBlock];
        for(int i = 0; i < numSize; i++) {
            int bucketIndex = i / totalBlock;
            bucket[bucketIndex] = bucket[bucketIndex] + nums[i];
        }
    }
    
    public void update(int index, int val) {
        int bucketIndex = index / totalBlock;
        bucket[bucketIndex] = bucket[bucketIndex] - nums[index] + val;
        nums[index] = val;
    }
    
    public int sumRange(int left, int right) {
        int startIndex = left / totalBlock;
        int endIndex = right / totalBlock;
        int ans = 0;
        if(startIndex == endIndex){
            for(int i = left; i <= right; i++) {
                ans = ans + nums[i];
            }
            return ans;
        }
        else {
            // calculate the last index for this block "(startIndex + 1) * totalBlock - 1"
            for(int i = left; i <= (startIndex + 1) * totalBlock - 1; i++ ) {
                ans = ans + nums[i];
            }
            for(int i = startIndex + 1; i <= endIndex - 1; i++ ) {
                ans = ans + bucket[i];
            }
            for(int i = endIndex * totalBlock; i <= right; i++){
                ans = ans + nums[i];
            }
        }
        return ans;
    }
}

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray obj = new NumArray(nums);
 * obj.update(index,val);
 * int param_2 = obj.sumRange(left,right);
 */