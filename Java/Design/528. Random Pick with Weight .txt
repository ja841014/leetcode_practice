/*
You are given an array of positive integers w where w[i] describes the weight of ith index (0-indexed).

We need to call the function pickIndex() which randomly returns an integer in the range [0, w.length - 1]. pickIndex() should return the integer proportional to its weight in the w array. For example, for w = [1, 3], the probability of picking the index 0 is 1 / (1 + 3) = 0.25 (i.e 25%) while the probability of picking the index 1 is 3 / (1 + 3) = 0.75 (i.e 75%).

More formally, the probability of picking index i is w[i] / sum(w).
*/
class Solution {
    int[] prefixSum;
    public Solution(int[] w) {
        
        prefixSum = new int[w.length];
        prefixSum[0] = w[0];
        for(int i = 1; i < w.length; i++) {
            prefixSum[i] = prefixSum[i - 1] + w[i];
        }        
    }
    
    public int pickIndex() {
        int low = 0;
        int high = prefixSum.length;
        Random rnd = new Random();
        int val = rnd.nextInt(prefixSum[prefixSum.length - 1]) + 1;
        while(low < high) {
            int mid = (high - low) / 2 + low;
            if(prefixSum[mid] < val) {
                low = mid + 1;
            }
            else {
                high = mid;
            }
        }
        return low;
    }
    
    
}

/**
 * Your Solution object will be instantiated and called as such:
 * Solution obj = new Solution(w);
 * int param_1 = obj.pickIndex();
 */