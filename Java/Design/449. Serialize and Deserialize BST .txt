/*
Serialization is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.
Design an algorithm to serialize and deserialize a binary search tree. There is no restriction on how your serialization/deserialization algorithm should work. You need to ensure that a binary search tree can be serialized to a string, and this string can be deserialized to the original tree structure.
The encoded string should be as compact as possible.


Example 1:
Input: root = [2,1,3]
Output: [2,1,3]
Example 2:

Input: root = []
Output: []
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {
    Queue<String> q;
    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if(root == null) {
            return "";
        }
        return String.valueOf(root.val) + "," + serialize(root.left) + "," + serialize(root.right);
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        String[] dataArr = data.split(",");
        q = new LinkedList<>();
        for(String str : dataArr) {
            q.offer(str);
        }
        
        return helper(q);
    }
    
    private TreeNode helper(Queue<String> q) {
        while(!q.isEmpty()) {
            String tmp = q.poll();
            if(tmp.equals("")) {
                return null;
            }
            TreeNode node = new TreeNode(Integer.valueOf(tmp));
            node.left = helper(q);
            node.right = helper(q); 
            return node;
        }
        return null;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec ser = new Codec();
// Codec deser = new Codec();
// String tree = ser.serialize(root);
// TreeNode ans = deser.deserialize(tree);
// return ans;