/*
Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.

Implement the LRUCache class:

LRUCache(int capacity) Initialize the LRU cache with positive size capacity.
int get(int key) Return the value of the key if the key exists, otherwise return -1.
void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.
The functions get and put must each run in O(1) average time complexity.

Example 1:
Input
["LRUCache", "put", "put", "get", "put", "get", "put", "get", "get", "get"]
[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]
Output
[null, null, null, 1, null, -1, null, -1, 3, 4]

Explanation
LRUCache lRUCache = new LRUCache(2);
lRUCache.put(1, 1); // cache is {1=1}
lRUCache.put(2, 2); // cache is {1=1, 2=2}
lRUCache.get(1);    // return 1
lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}
lRUCache.get(2);    // returns -1 (not found)
lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}
lRUCache.get(1);    // return -1 (not found)
lRUCache.get(3);    // return 3
lRUCache.get(4);    // return 4

*/
class LRUCache {
    int capacity;
    Map<Integer, Node> map;
    Node tail;
    Node head;
    
    public LRUCache(int capacity) {
        this.capacity = capacity;
        map = new HashMap<>();
        // dummy head/tail
        tail = new Node(-1, -1);
        head = new Node(-1, -1);
        head.next = tail;
        tail.pre = head;
        
    }
    
    public int get(int key) {
        if(map.containsKey(key) == false) {
            return -1;
        }
        Node cur = map.get(key);
        removeNode(cur);
        putHead(cur);
        return cur.val;
    }
    
    public void put(int key, int value) {
        // already in the LinkedList
        if(map.containsKey(key)) {
            Node cur = map.get(key);
            cur.val = value;
            removeNode(cur);
            putHead(cur);
        } // not in the linkedlist
        else {
            if(map.size() >= capacity) {
                removeTail();
            }
            Node n = new Node(key, value);
            map.put(key, n);
            putHead(n);
        }
        
    }
    
    public void removeNode(Node cur) {
        /*
            (cur的pre)的next的記憶體位置 給 cur的next記憶體位置
        */
        cur.pre.next = cur.next;
        /*
            (cur的next)的pre的記憶體位置 給 cur的next記憶體位置
        */
        cur.next.pre = cur.pre;
    }
    
    public void removeTail() {
        
        Node node = tail.pre;
        map.remove(node.key);
        
        node.pre.next = tail;
        tail.pre = node.pre;
       
    }
    
    public void putHead(Node cur) {        
        cur.next = head.next;
        cur.pre = head;
        
        head.next.pre = cur;
        head.next = cur;
        
    }
    
    
}
public class Node{
    Node pre;
    Node next;
    int val;
    int key;
    public Node(int key, int val) {
        this.key = key;
        this.val = val;
        next = null;
        pre = null;
    }
}
/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */