// Using array data structure to implement the circular Deque
// TailIndex = (HeadIndex + currentSize) % totalSize
class MyCircularDeque {

    int[] arr;
    int currentSize;
    int headIndex;
    int totalSize;
    /** Initialize your data structure here. Set the size of the deque to be k. */
    public MyCircularDeque(int k) {
        arr = new int[k];
        totalSize = k;
        currentSize = 0;
        headIndex = 0;
    }
    
    /** Adds an item at the front of Deque. Return true if the operation is successful. */
    public boolean insertFront(int value) {
        if(isFull() == false) {
            if(headIndex == 0) {
                headIndex = totalSize - 1;
            }
            else {
                headIndex = headIndex - 1;
            }
            arr[headIndex] = value;
            currentSize++;
            return true;
        }
        return false;
    }
    
    /** Adds an item at the rear of Deque. Return true if the operation is successful. */
    public boolean insertLast(int value) {
        if(isFull() == false) {
            int tailIndex = (headIndex + currentSize) % totalSize;
            arr[tailIndex] = value;
            currentSize++;
            return true;
        }
        return false;
        
        
    }
    
    /** Deletes an item from the front of Deque. Return true if the operation is successful. */
    public boolean deleteFront() {
        if(isEmpty() == false) {
            if(headIndex == totalSize - 1) {
                headIndex = 0;
            }
            else {
                headIndex++;
            }
            currentSize--;
            return true;
        }
        return false;
    }
    
    /** Deletes an item from the rear of Deque. Return true if the operation is successful. */
    public boolean deleteLast() {
        if(isEmpty() == false) {
            currentSize--;
           
            return true;
        }
        return false;
    }
    
    /** Get the front item from the deque. */
    public int getFront() {
        if(isEmpty() == false) {
            // System.out.println(arr[headIndex]);
            return arr[headIndex];
        }
        return -1;
    }
    
    /** Get the last item from the deque. */
    public int getRear() {
        if(isEmpty() == false) {
            // System.out.println(arr[(headIndex + currentSize - 1) % totalSize]);
            return arr[(headIndex + currentSize - 1) % totalSize];
        }
        return -1;
    }
    
    /** Checks whether the circular deque is empty or not. */
    public boolean isEmpty() {
        if(currentSize == 0) {
            return true;
        }
        return false;
    }
    
    /** Checks whether the circular deque is full or not. */
    public boolean isFull() {
        if(currentSize == totalSize) {
            return true;
        }
        return false;
    }
}

/**
 * Your MyCircularDeque object will be instantiated and called as such:
 * MyCircularDeque obj = new MyCircularDeque(k);
 * boolean param_1 = obj.insertFront(value);
 * boolean param_2 = obj.insertLast(value);
 * boolean param_3 = obj.deleteFront();
 * boolean param_4 = obj.deleteLast();
 * int param_5 = obj.getFront();
 * int param_6 = obj.getRear();
 * boolean param_7 = obj.isEmpty();
 * boolean param_8 = obj.isFull();
 */