// using stack to store some information that we need to process after.
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public int[] nextLargerNodes(ListNode head) {
        // maybe we can using pair<Integer, Integer> --> (value, index)
        Stack<Integer> st = new Stack<>();
        List<Integer> ls = new ArrayList<>();
        while(head != null) {
            ls.add(head.val);
            head = head.next;
        }
        int[] result = new int[ls.size()];
                
        for(int i = 0; i < ls.size(); i++) {
            while(!st.isEmpty() && ls.get(st.peek()) < ls.get(i)) {
                result[st.peek()] = ls.get(i);
                st.pop();
            }
            // here have to put the index, otherwise, the while loop do not know where to put the element
            st.push(i);
        }
        
        return result;
    }
}