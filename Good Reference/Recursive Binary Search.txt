/*
Given a set of intervals, for each of the interval i, check if there exists an interval j whose start point is bigger than or equal to the end point of the interval i, which can be called that j is on the "right" of i.

For any interval i, you need to store the minimum interval j's index, which means that the interval j has the minimum start point to build the "right" relationship for interval i. If the interval j doesn't exist, store -1 for the interval i. Finally, you need output the stored value of each interval as an array.

Input: [ [3,4], [2,3], [1,2] ]
Output: [-1, 0, 1]

Explanation: There is no satisfied "right" interval for [3,4].
For [2,3], the interval [3,4] has minimum-"right" start point;
For [1,2], the interval [2,3] has minimum-"right" start point.
*/
class Solution {
    boolean check;
    public int[] findRightInterval(int[][] intervals) {
        if(intervals.length == 1) {
            return new int[] { -1 };
        }
        // map<start time of interval, the index in original array>
        Map<Integer, Integer> map = new HashMap<>();
        int[] original_interval_first = new int[intervals.length];
        for(int i = 0; i < intervals.length; i++) {
            map.put(intervals[i][0], i);
            original_interval_first[i] = intervals[i][1];
        }
        Arrays.sort(intervals, (a, b) -> a[0] - b[0]); // samll to big
        int[] result = new int[intervals.length];
        
        for(int i = 0 ; i < intervals.length; i++) {
            check = false;
            int process_ans = binary_search(intervals, original_interval_first[i], 0, intervals.length - 1);
            // we cannot use only "process_ans == -1 "  to resolve the -1 problem, because there is a case contain -1 value. Therefore, we create global variable "boolean check" to handle this case.
            if( process_ans == -1 && check == false) {
                result[i] = -1;
            }
            else {
                result[i] = map.get(process_ans);
            }
             
        }
        return result;
    }
    // be careful the bst 'end' boudary
    public int binary_search(int[][] intervals, int target, int start, int end) {
        if(start == end) {
            if(intervals[start][0] >= target) {
                check = true;
                return intervals[start][0];
            }
            return -1;
        }
        int mid = (end - start) / 2 + start;
        // this two condition will find th most close element for you
        // target is bigger, so find right hand side.
        if(intervals[mid][0] < target) {
            // be careful the start boundary.
            return binary_search(intervals, target, mid + 1, end);
        }
        // intervals[start][0] >= target,  find left hand side
        // '==' condition --> [[1,2], [2,3], [3,4]], when my target is 2, we have to change our "end" to "mid"
        else {
            return binary_search(intervals, target, start, mid);
        }        
    }
}