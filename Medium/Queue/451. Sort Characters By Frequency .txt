/*'map' queue labda expression
*/
/*
Given a string, sort it in decreasing order based on the frequency of characters.

Example 1:

Input:
"tree"

Output:
"eert"

Explanation:
'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.
*/
class Solution {
    public String frequencySort(String s) {
        Map<Character, Integer> map = new HashMap<Character, Integer>();
        PriorityQueue<Character> maxHeap = new PriorityQueue<>((a, b) -> map.get(b) - map.get(a));

        for(int i = 0; i < s.length(); i++) {
            map.put(s.charAt(i), map.getOrDefault(s.charAt(i), 0) + 1);
        }
        maxHeap.addAll(map.keySet());
        
        
        String result = "";
        while(!maxHeap.isEmpty()) {
            char c = maxHeap.poll();
            for(int i = 0; i < map.get(c); i++) {
                result = result + c;
            }
        }
        return result;
    }
}