/*
You are a hiker preparing for an upcoming hike. You are given heights, a 2D array of size rows x columns, where heights[row][col] represents the height of cell (row, col). You are situated in the top-left cell, (0, 0), and you hope to travel to the bottom-right cell, (rows-1, columns-1) (i.e., 0-indexed). You can move up, down, left, or right, and you wish to find a route that requires the minimum effort.

A route's effort is the maximum absolute difference in heights between two consecutive cells of the route.

Return the minimum effort required to travel from the top-left cell to the bottom-right cell.
*/
class Solution {
    int directions[][] = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
    
    public int minimumEffortPath(int[][] heights) {
        int row = heights.length;
        int col = heights[0].length;
        int maxDiff = 0;
        
        PriorityQueue<Cell> pq = new PriorityQueue<>((a, b) -> a.difference - b.difference);
        boolean[][] visited = new boolean[heights.length][heights[0].length];
        
        pq.offer(new Cell(0, 0, 0, 0));
        while(true) {
            Cell curr = pq.poll();
            // we count the cell is visited here, if we count in the for loop below, it will miss some smaller diff value
            visited[curr.x][curr.y] = true;
            
            if(curr.x == heights.length - 1 && curr.y == heights[0].length - 1) {
                return curr.maxDiff;
            }
            
            for(int[] dir : directions) {
                int newX = curr.x + dir[0];
                int newY = curr.y + dir[1];
                if(isValidCell(newX, newY, row, col) && visited[newX][newY] == false) {
                    int currDifference = Math.abs(heights[curr.x][curr.y] - heights[newX][newY]);
                    // we keep track the maxDiff in every cell
                    pq.offer(new Cell(newX, newY, currDifference, Math.max(currDifference, curr.maxDiff)));
                }
            }
        }
        
    }
    
    boolean isValidCell(int x, int y, int row, int col) {
        return x >= 0 && x <= row - 1 && y >= 0 && y <= col - 1;
    }
}

class Cell {
    int x;
    int y;
    int difference;
    int maxDiff;
    public Cell(int x, int y, int difference, int maxDiff) {
        this.x = x;
        this.y = y;
        this.difference = difference;
        this.maxDiff = maxDiff;
    }
}