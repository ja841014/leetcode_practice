/*
You need to construct a binary tree from a string consisting of parenthesis and integers.

The whole input represents a binary tree. It contains an integer followed by zero, one or two pairs of parenthesis. The integer represents the root's value and a pair of parenthesis contains a child binary tree with the same structure.
You always start to construct the left child node of the parent first if it exists.

Example 1:
Input: s = "4(2(3)(1))(6(5))"
Output: [4,2,6,3,1,5]

Example 2:
Input: s = "4(2(3)(1))(6(5)(7))"
Output: [4,2,6,3,1,5,7]

Example 3:
Input: s = "-4(2(3)(1))(6(5)(7))"
Output: [-4,2,6,3,1,5,7]
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

// Character.isDigit(s.charAt(i))
class Solution {
    public TreeNode str2tree(String s) {
        if(s.length() == 0) {
            return null;
        }
        TreeNode tmp = new TreeNode();
        TreeNode node = new TreeNode();
        Stack<TreeNode> st = new Stack<>();
        int start_index = 0;
        for(int i = 0; i < s.length(); i++) {
            
            if(s.charAt(i) == '-' || Character.isDigit(s.charAt(i))) {
                if(s.charAt(i) == '-') {
                    start_index = i;
                    // if we do not have this condition "i + 1 < s.length()", we cannit pass "1", "3" cases
                    while(i + 1 < s.length() && s.charAt(i + 1) <= '9' && s.charAt(i + 1) >= '0') {
                        i = i + 1;
                    }
                    // we have to use substring, because we have 534(294)(40), this kind of case.
                    String str_digit = s.substring(start_index, i + 1);
                    int digit = Integer.parseInt(str_digit);
                    node = new TreeNode(digit);
                }
                else {
                    start_index = i;
                    while(i + 1 < s.length() && s.charAt(i + 1) <= '9' && s.charAt(i + 1) >= '0') {
                        i = i + 1;
                    }
                    String str_digit = s.substring(start_index, i + 1);
                    int digit = Integer.parseInt(str_digit) ;
                    node = new TreeNode(digit);
                }
                
                st.add(node);
            }
            // built tree connection
            else if(s.charAt(i) == ')') {
                // "tmp" is children
                tmp = st.pop();
                // when we pop out the tmp, then the next one is its parent, because it is DFS.
                TreeNode parent = st.peek();
                // we always have left tree than have a right tree.
                // and we cannot have 123()(54) this kind of empty cases. 
                if(parent.left == null) {
                    parent.left = tmp;
                }
                else {
                    parent.right = tmp;
                }
            }
        }
        return st.peek();
    }
}