// to check whether the tree is complete binary tree.
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isCompleteTree(TreeNode root) {
        if(root == null) {
            return true;
        }
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        boolean activate = false;
        while(!q.isEmpty()) {
            int size = q.size();
            for(int i = 0; i < size; i++) {
                TreeNode tmp = q.poll();
                
                if( activate && (tmp.left != null || tmp.right != null) ) {
                    return false;
                }
                
                if(tmp.left != null && tmp.right != null) { // both sides are not null
                    q.offer(tmp.left);
                    q.offer(tmp.right);
                }
                else if(tmp.left == null && tmp.right != null) { 
                    // left side is null but right side is not null, it is impossible
                    return false;
                }
                else if(tmp.left != null && tmp.right == null) {
                    // left side is not null, but right side is null, have to make more steps to lokk up
                    q.offer(tmp.left);
                    activate = true;
                }
                else { // both sides are null
                    activate = true;
                }                
            }
        }
        return true;
    }
}