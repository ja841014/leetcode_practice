/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode subtreeWithAllDeepest(TreeNode root) {
        if(root == null) {
            return null;
        }
        Map<TreeNode, TreeNode> map = new HashMap<>();
        
        Queue<TreeNode> q = new LinkedList<>();
                
        q.offer(root);
        while(!q.isEmpty()) {
            Queue<TreeNode> DeepestNode = new LinkedList<>();
            
            for(TreeNode tmp : q) {
                // TreeNode tmp = q.poll();
                if(tmp.left != null) {
                    map.put(tmp.left, tmp);
                    DeepestNode.offer(tmp.left);
                }
                if(tmp.right != null) {
                    map.put(tmp.right, tmp);
                    DeepestNode.offer(tmp.right);
                }
            }
            if(!DeepestNode.isEmpty()) {
                q = DeepestNode;
            }
            else {
                break;
            }
            
        }
        
        
        TreeNode pre = new TreeNode();
        TreeNode curr;
        
        while(q.size() != 1) {
            
            curr = q.poll();
            if(pre == curr) {
                continue;
            }
            q.offer(map.get(curr));
            pre = map.get(curr);
            
        }
        
        
        
        return q.peek();
    }
    
}

/**
class Solution {
    public TreeNode subtreeWithAllDeepest(TreeNode root) {
        if (root == null) {
            return null;
        }
        int leftDepth = getDepth(root.left);  // get depth of left
        int rightDepth = getDepth(root.right); // get depth of right
        if (leftDepth == rightDepth) {
            return root;    // You got it!
        } else {
            // Go with the deepest side 
            if(leftDepth > rightDepth){
                return subtreeWithAllDeepest(root.left);
            } else {
                return subtreeWithAllDeepest(root.right);
            }
        }
    }
    
    // Method to get depth of tree at any node.
    public int getDepth (TreeNode node) {
        if (node == null) {
            return 0;
        }
        return 1 + Math.max(getDepth(node.left), getDepth(node.right)); 
    }
}
*/