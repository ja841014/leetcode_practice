/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    /*
    inorder:   left,  mid, right
    postorder: left, right, mid
    */
    int postIdx;
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        Map<Integer, Integer>  cache = new HashMap<>();
        postIdx = postorder.length - 1;
        for(int i = 0; i < inorder.length; i++) {
            cache.put(inorder[i], i);
        }
        
        return constructTree(cache, postorder, 0, postorder.length - 1);
    }
    
    private TreeNode constructTree(Map<Integer, Integer> cache, int[] postorder, int left, int right) {
        
        if(left > right) {
            return null;
        }
        int curVal = postorder[postIdx];
        TreeNode root = new TreeNode(curVal);
        postIdx--;
        root.right = constructTree(cache, postorder, cache.get(curVal) + 1, right);
        root.left = constructTree(cache, postorder, left, cache.get(curVal) - 1 );
        
        return root;
    }
}