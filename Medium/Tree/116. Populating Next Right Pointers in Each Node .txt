/* using the upper level Node to handle the deeper level
You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:

struct Node {
  int val;
  Node *left;
  Node *right;
  Node *next;
}
Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.

Initially, all next pointers are set to NULL.
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

class Solution {
    public Node connect(Node root) {
        if(root == null) {
            return null;
        }
        Queue<Node> q = new LinkedList<>();
        q.offer(root);
        
        while(!q.isEmpty()) {
            int size = q.size();
            Node pre = null;
            for(int i = 0 ; i < size; i++) {
                Node curr = q.poll();
                // if pre is not equla to null, we know that always has a pre nodeinfron of this curr.left
                // process in the same level
                if(pre != null) {
                    pre.next = curr.left;
                }

                
                if(curr.left != null) {
                    q.offer(curr.left);
                    // if we knowcurr.left == null, we do not process the next level
                    // process in the upper level
                    curr.left.next = curr.right; 
                }
                if(curr.right != null) {
                    q.offer(curr.right);
                }
                
                pre = curr.right;
            }
        }
        return root;
    }
}