
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> getAllElements(TreeNode root1, TreeNode root2) {
        List<Integer> ls = new ArrayList<>();
        Stack<TreeNode> s1 = new Stack<>();
        Stack<TreeNode> s2 = new Stack<>();
        TreeNode tmp = null;
        
        // s1 or s2 is not empty, so they can step into while loop to proceed the element in the stack. 
        //root1 or root2 is not null, so they can step into traverse remain node in the tree 
        while(!s1.isEmpty() || !s2.isEmpty() || root1 != null || root2 != null) {
            while (root1 != null) {
                s1.add(root1);
                root1 = root1.left;
            }
            while (root2 != null) {
                s2.add(root2);
                root2 = root2.left;
            }
            
            if(s2.isEmpty() || (!s1.isEmpty() && s1.peek().val < s2.peek().val) ) {
                tmp = s1.pop();
                ls.add(tmp.val);
                root1 = tmp.right;
            } else {
                tmp = s2.pop();
                ls.add(tmp.val);
                root2 = tmp.right;
            }
            
        }
        
        return ls;
    }
}