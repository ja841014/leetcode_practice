/* it is same as 433. Minimum Genetic Mutation

Given two words (beginWord and endWord), and a dictionary's word list, find the length of shortest transformation sequence from beginWord to endWord, such that:

Only one letter can be changed at a time.
Each transformed word must exist in the word list.
Note:

Return 0 if there is no such transformation sequence.
All words have the same length.
All words contain only lowercase alphabetic characters.
You may assume no duplicates in the word list.
You may assume beginWord and endWord are non-empty and are not the same.
Example 1:

Input:
beginWord = "hit",
endWord = "cog",
wordList = ["hot","dot","dog","lot","log","cog"]

Output: 5

Explanation: As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog",
return its length 5.
Example 2:

Input:
beginWord = "hit"
endWord = "cog"
wordList = ["hot","dot","dog","lot","log"]

Output: 0

Explanation: The endWord "cog" is not in wordList, therefore no possible transformation.
*/
class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        if(!wordList.contains(endWord)) {
            return 0;
        }
        // we have to use set, because remove and contain in set is O(1), but list is O(n)
        Set<String> set = new HashSet<>();
        for(String s : wordList) {
            set.add(s);
        }
        int level = 1;
        
        Queue<String> q = new LinkedList<>();
        q.offer(beginWord);
        
        while(!q.isEmpty()) {
            int size = q.size();
            for(int i = 0; i < size; i++) {
                String str = q.poll();
                // we make the String which poll from queue to array
                char[] charArr = str.toCharArray();
                
                int new_level = helper(charArr, set, q, endWord, level);
                
                if(new_level != level) {
                    return new_level;
                }
                level = new_level;
            }
            level++;
        }
        return 0;
    }
    
    
    private int helper(char[] charArr, Set<String> set, Queue<String> q, String endWord, int level) {
        // we travese the String char by char
        for(int j = 0; j < charArr.length; j++) {
            // record the original character
            char charAlter = charArr[j];
            for(char tmp = 'a'; tmp <= 'z'; tmp++) {
                // same character do nothing
                if(charAlter == tmp) {
                    continue;
                }
                charArr[j] = tmp;
                String tmpAns = String.valueOf(charArr);
                // check whether is the endWord
                if(tmpAns.equals(endWord)) {
                    return level + 1;
                }
                // if the "tmpAns" is potential intermidiate word, we put in the queue.
                if(set.contains(tmpAns)) {
                    q.offer(tmpAns);
                    // avoid duplicate
                    set.remove(tmpAns);
                }
            }
            // change back to original character.
            charArr[j] = charAlter;
        }
        return level;
    }
    
    
    
}