/*
A full binary tree is a binary tree where each node has exactly 0 or 2 children.

Return a list of all possible full binary trees with N nodes.  Each element of the answer is the root node of one possible tree.

Each node of each tree in the answer must have node.val = 0.

You may return the final list of trees in any order.
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    // use Map to cache the result to avoid duplicate counting
    Map<Integer, List<TreeNode>> memo = new HashMap();
    
    public List<TreeNode> allPossibleFBT(int N) {
        if(N <= 0 || N % 2 == 0) {
            return new ArrayList<>();
        }
        
        List<TreeNode> res = new ArrayList<>();
        if(N == 1) {
            res.add(new TreeNode(0));
            return res;
        }
        
        if(memo.containsKey(N)) {
            return memo.get(N);
        }
        
        for(int i = 1; i < N; i = i + 2) {
            List<TreeNode> leftTree = allPossibleFBT(i);
            // N - 1(root) - i(left tree Node)
            List<TreeNode> rightTree = allPossibleFBT(N - 1 - i);
            
            for(TreeNode left: leftTree) {
                for(TreeNode right: rightTree) {
                    TreeNode root = new TreeNode(0);
                    root.left = left;
                    root.right = right;
                    res.add(root);
                }
            }
        }
        
        memo.put(N, res);
        return memo.get(N);
        
    }
    
    
}