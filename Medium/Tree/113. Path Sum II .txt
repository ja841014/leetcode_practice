/*
Time Complexity n * logn
To get to a leaf --> logN
You do this N/2 times (for every leaf) -> N/2 = N
Every time you do #1, you need to add a path to the solution. Copying the path --> path is logN long
Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where each path's sum equals targetSum.
A leaf is a node with no children.

Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22
Output: [[5,4,11,2],[5,8,4,5]]
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<List<Integer>> ans;
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        ans = new ArrayList<>();
        if(root == null) {
            return ans;
        }
        List<Integer> path = new ArrayList<>();
        dfs(root, path, 0, targetSum);
        return ans;
    }
    
    private void dfs(TreeNode root, List<Integer> path, int curSum, int targetSum) {
        if(root.left == null && root.right == null) {
            if(curSum + root.val == targetSum) {
                path.add(root.val);
                ans.add(new ArrayList<>(path));
                path.remove(path.size() - 1);
            }
            return;
        }
        
        path.add(root.val);
        
        if(root.left != null) {
            dfs(root.left, path, curSum + root.val, targetSum);
        }
        if(root.right != null) {
            dfs(root.right, path, curSum + root.val, targetSum);
        }
        
        path.remove(path.size() - 1);
        
        
    }
}