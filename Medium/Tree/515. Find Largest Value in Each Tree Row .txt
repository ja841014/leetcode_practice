/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> largestValues(TreeNode root) {
        List<Integer> ls = new ArrayList<>();
        if(root == null) {
            return ls;
        }
        Queue<TreeNode> q = new LinkedList<>();
        int max_num = Integer.MIN_VALUE;
        q.offer(root);
        while(!q.isEmpty()) {
            int size = q.size();
            // before we go to next level, we set "max_num" to minumum
            max_num = Integer.MIN_VALUE;
            for(int i = 0; i < size; i++) {
                TreeNode tmp = q.poll();
                // we compare each node in same level
                max_num = Math.max(max_num, tmp.val);
                if(tmp.left != null) {
                    q.offer(tmp.left);
                }
                if(tmp.right != null) {
                    q.offer(tmp.right);
                }
            }
            // we add the max number we get from above
            ls.add(max_num);
        }
        return ls;
    }
}