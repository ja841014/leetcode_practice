/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/
// in this method we will use the top level to assign next level.
class Solution {
    public Node connect(Node root) {
        if(root == null) {
            return root;
        }
        // we use queue to handle the node level by level
        Queue<Node> q = new LinkedList<>();
        q.offer(root);
        while(!q.isEmpty()) {
            int size = q.size();
            // every loop (a.k.a every level) we will set pre to null
            // we will use the "pre" to assign the next node 
            Node pre = null;
            for(int i = 0; i < size; i++) {
                Node tmp = q.poll();
                if(tmp.left != null) {
                    q.offer(tmp.left);
                    // if there is exist a node before we proceed this node.
                    if(pre != null) {
                        pre.next = tmp.left;
                    }
                    // change the "pre" information
                    pre = tmp.left;
                }
                if(tmp.right != null) {
                    q.offer(tmp.right);
                    if(pre != null) {
                        pre.next = tmp.right;
                    }
                    pre = tmp.right;
                }
            }
        }
        return root;
    }
}