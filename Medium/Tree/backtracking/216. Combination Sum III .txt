//backtrack
/*
Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.
Note:
All numbers will be positive integers.
The solution set must not contain duplicate combinations.

Example 1:
Input: k = 3, n = 7
Output: [[1,2,4]]

Example 2:
Input: k = 3, n = 9
Output: [[1,2,6], [1,3,5], [2,3,4]]
*/
class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> ls = new ArrayList<>();
        // int cnt = 0;
        helper(k, n, 1, 0, ls, result);
        return result;
    }
    public void helper(int size, int value, int start, int cnt, List<Integer> ls, List<List<Integer>> result) {
        // backtrack stop situation
        if(ls.size() == size) {
            if(cnt == value) {
                result.add(new ArrayList<>(ls));
            }
            return;
        }
        // backtrack pattern
        for(int i = start; i < 10; i++) {
            cnt = cnt + i;
            if(cnt > value) {
                cnt = cnt - i;
                break;
            }
            ls.add(i);
            helper(size, value, i + 1, cnt, ls, result);
            ls.remove(ls.size() - 1);
            cnt = cnt - i;
        }
    }
}

