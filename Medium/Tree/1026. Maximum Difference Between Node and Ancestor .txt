/*
Given the root of a binary tree, find the maximum value V for which there exists different nodes A and B where V = |A.val - B.val| and A is an ancestor of B.

(A node A is an ancestor of B if either: any child of A is equal to B, or any child of A is an ancestor of B.)

Example 1:
Input: [8,3,10,1,6,null,14,null,null,4,7,13]
Output: 7
Explanation: 
We have various ancestor-node differences, some of which are given below :
|8 - 3| = 5
|3 - 7| = 4
|8 - 1| = 7
|10 - 13| = 3
Among all possible differences, the maximum value of 7 is obtained by |8 - 1| = 7.
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int maxDifference = 0;
    public int maxAncestorDiff(TreeNode root) {
        if(root == null) {
            return 0;
        }
        helper(root, root.val, root.val);
        return maxDifference;
    }
    private void helper(TreeNode node, int min, int max) {
        if(node == null) {
            return;
        }
        
        min = Math.min(min, node.val);
        max = Math.max(max, node.val);
        maxDifference = Math.max(maxDifference, Math.abs(max - min));
        
        helper(node.left, min, max);
        helper(node.right, min, max);
    }
}