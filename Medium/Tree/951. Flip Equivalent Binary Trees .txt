/*
For a binary tree T, we can define a flip operation as follows: choose any node, and swap the left and right child subtrees.

A binary tree X is flip equivalent to a binary tree Y if and only if we can make X equal to Y after some number of flip operations.

Given the roots of two binary trees root1 and root2, return true if the two trees are flip equivelent or false otherwise.
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
// class Solution {
//     public boolean flipEquiv(TreeNode root1, TreeNode root2) {
//         if(root1 == null && root2 == null) {
//             return true;
//         }
//         else if(root1 == null && root2 != null) {
//             return false;
//         }
//         else if(root1 != null && root2 == null) {
//             return false;
//         }
//         else if(root1.val != root2.val) {
//             return false;
//         }
//         Queue<TreeNode> q1 = new LinkedList<>();
//         Queue<TreeNode> q2 = new LinkedList<>();
//         q1.offer(root1);
//         q2.offer(root2);
        
//         while(!q1.isEmpty() && !q2.isEmpty()) {
//             TreeNode tmp1 = q1.poll();
//             TreeNode tmp2 = q2.poll();
//             List<TreeNode> ls1 = new ArrayList<>();
//             List<TreeNode> ls2 = new ArrayList<>();
            
//             if(tmp1.left != null) {
//                 ls1.add(tmp1.left);
//             }
//             if(tmp1.right != null) {
//                 ls1.add(tmp1.right);
//             }
//             ls1.sort((a, b) -> a.val - b.val);
            
//             if(tmp2.left != null) {
//                 ls2.add(tmp2.left);
//             }
//             if(tmp2.right != null) {
//                 ls2.add(tmp2.right);
//             }
//             ls2.sort((a, b) -> a.val - b.val);
            
//             if(ls1.size() != ls2.size()) {
//                 return false;
//             }
            
//             for(int i = 0; i < ls1.size(); i++) {
//                 if(ls1.get(i).val == ls2.get(i).val) {
//                     q1.offer(ls1.get(i));
//                     q2.offer(ls2.get(i));
//                 }
//                 else {
//                     return false;
//                 }
//             }
            
            
//         }
//         if(!q1.isEmpty() || !q2.isEmpty()) {
//             return false;
//         }
//         return true;
//     }
// }

class Solution {
    public boolean flipEquiv(TreeNode root1, TreeNode root2) {
        if (root1 == null && root2 == null)
            return true;
        if (root1 == null || root2 == null || root1.val != root2.val)
            return false;
        // one is for swap amd on eis for not swap
        return (flipEquiv(root1.left, root2.left) && flipEquiv(root1.right, root2.right) ||
                flipEquiv(root1.left, root2.right) && flipEquiv(root1.right, root2.left));
    }
}