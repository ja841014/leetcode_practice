/** first we build up a HashMap which store the (node, parent of node)
    second, we use tagetNode as root node and add in the Queue than we traverse level by level
    then we can find our targert nodes
We are given a binary tree (with root node root), a target node, and an integer value K.
Return a list of the values of all nodes that have a distance K from the target node.  The answer can be returned in any order.

Example 1:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, K = 2
Output: [7,4,1]

Explanation: 
The nodes that are a distance 2 from the target node (with value 5)
have values 7, 4, and 1.
    
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    int targetLevel = 0;
    public List<Integer> distanceK(TreeNode root, TreeNode target, int K) {
        Map<TreeNode, TreeNode> table = new HashMap<>();
        
        TreeNode head = root;
        
        builtParentNode(head, table);
        
        return findNodeinKLevel(K, target, table);
        
        
    }
    
    
    private List<Integer> findNodeinKLevel(int targetLevel, TreeNode cur, Map<TreeNode, TreeNode> table) {
        Queue<TreeNode> q = new LinkedList<>();
        List<Integer> ls = new ArrayList<>();
        Set<TreeNode> visited = new HashSet<>();
        int level = 0;
        if(targetLevel == 0) {
            ls.add(cur.val);
            return ls;
        }
        q.offer(cur);
        visited.add(cur);
        
        while(!q.isEmpty()) {
            int size = q.size();
            // if level == targetLevel
            if(level < targetLevel) {
               for(int i = 0; i < size; i++) {
                    TreeNode tmp = q.poll();
                    if(tmp.left != null && !visited.contains(tmp.left)) {
                        q.offer(tmp.left);
                        visited.add(tmp.left);
                    }
                    if(tmp.right != null && !visited.contains(tmp.right)) {
                        q.offer(tmp.right);
                        visited.add(tmp.right);
                    }
                    if(table.containsKey(tmp) && !visited.contains(table.get(tmp))) {
                        q.offer(table.get(tmp));
                        visited.add(table.get(tmp));
                    }
                } 
            }
            else {
                break;
            }
            level++;
        }
        
        for(TreeNode node: q) {
            ls.add(node.val);
        }
        return ls;
    }
    
    
    private void builtParentNode(TreeNode head, Map<TreeNode, TreeNode> table) {
        Queue<TreeNode> q = new LinkedList<>();
        
        q.offer(head);
        while(!q.isEmpty()) {
            int size = q.size();
            for(int i = 0; i < size; i++) {
                TreeNode tmp = q.poll();
                if(tmp.left != null) {
                    table.put(tmp.left, tmp);
                    
                    q.offer(tmp.left);
                }
                if(tmp.right != null) {
                    table.put(tmp.right, tmp);
                    
                    q.offer(tmp.right);
                    
                }
            }
        }
    }
}