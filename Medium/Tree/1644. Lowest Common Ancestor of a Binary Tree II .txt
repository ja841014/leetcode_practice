/*
Given the root of a binary tree, return the lowest common ancestor (LCA) of two given nodes, p and q. If either node p or q does not exist in the tree, return null. All values of the nodes in the tree are unique.

According to the definition of LCA on Wikipedia: "The lowest common ancestor of two nodes p and q in a binary tree T is the lowest node that has both p and q as descendants (where we allow a node to be a descendant of itself)". A descendant of a node x is a node y that is on the path from node x to some leaf node.

EX1:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
Output: 5
Explanation: The LCA of nodes 5 and 4 is 5. A node can be a descendant of itself according to the definition of LCA.

EX2:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 10
Output: null
Explanation: Node 10 does not exist in the tree, so return null.
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean findP = false;
    public boolean findQ = false;
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        TreeNode res = helper(root, p, q);
       
        return findP == true && findQ == true ? res : null;
    }
    
    public TreeNode helper(TreeNode root, TreeNode p, TreeNode q) {
         if(root == null) {
            return null;
        }
        
        
        TreeNode left = helper(root.left, p, q);
        TreeNode right = helper(root.right, p, q);
        
        // Ensure we find these two nodes. 
        if(findP == false && root.val == p.val) {
            findP = true;
        }
        if(findQ == false && root.val == q.val) {
            findQ = true;
        }
        
        if(root.val == p.val || root.val == q.val) {
            return root;
        }
        else if(left == null) {
            return right;
        }
        else if(right == null) {
            return left;
        }
        
        return root;
    }
}