/*
Input: [1,0,0,0,1,1]
Output: 6

Input: [1,0,0,0,0,1,1]
Output: 4
*/
class Solution {
    public int findMaxLength(int[] nums) {
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        int count = 0;
        int max_length = 0;
        // base case //
        map.put(0, -1);
        for(int i = 0; i < nums.length; ++i) {
            if(nums[i] == 0) {
                count = count - 1;
            }
            else {
                count = count + 1;
            }
            // we use the count as key index as value;
            // because we know that if the key appear seacond time
            // wit must has a subarray in it.
            if(map.containsKey(count)) {
                max_length = Math.max(max_length, i - map.get(count));
            }
            else {
                map.put(count, i);
            }
            
        }
        return max_length;
    }
}