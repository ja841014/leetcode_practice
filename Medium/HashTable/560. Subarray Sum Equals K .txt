/*
We cannot use sliding window technique, because testcases contain negative value.
Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.

Example 1:

Input:nums = [1,1,1], k = 2
Output: 2
*/
class Solution {
    public int subarraySum(int[] nums, int k) {
//         int sum = 0;
//         int left = 0;
//         int right = 0;
//         int ans = 0;
        
        
//         while(right < nums.length) {
//             sum = sum + nums[right];
            
//             while(sum > k) {
//                 sum = sum - nums[left];
//                 left++;
//             }
            
//             if(sum == k) {
//                 ans++;
//             }
            
//             right++;
//         }
//         return ans;
        
        // HashMap method
        //      Sum, Freq 
        Map<Integer, Integer> cache = new HashMap<>();
        int sum = 0;
        int res = 0;
        cache.put(0, 1);
        for(int i : nums) {
            sum = sum + i;
            // minus current value
            if(cache.containsKey(sum - k)) {
                res = res + cache.get(sum - k);
            }
            cache.put(sum, cache.getOrDefault(sum, 0) + 1);
        }
        return res;
        
    }
}