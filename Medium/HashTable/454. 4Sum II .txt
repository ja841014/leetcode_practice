/* It is a general solution
public int fourSumCount(int[] A, int[] B, int[] C, int[] D) {
    return kSumCount(new int[][]{A, B, C, D});
}
public int kSumCount(int[][] lists) {
    Map<Integer, Integer> m = new HashMap<>();
    addToHash(lists, m, 0, 0);
    return countComplements(lists, m, lists.length / 2, 0);
}
void addToHash(int[][] lists, Map<Integer, Integer> m, int i, int sum) {
    if (i == lists.length / 2)
        m.put(sum, m.getOrDefault(sum, 0) + 1);
    else
        for (int a : lists[i])
            addToHash(lists, m, i + 1, sum + a);
}
int countComplements(int[][] lists, Map<Integer, Integer> m, int i, int complement) {
    if (i == lists.length)
        return m.getOrDefault(complement, 0);
    int cnt = 0;
    for (int a : lists[i])
        cnt += countComplements(lists, m, i + 1, complement - a);
    return cnt;
}
Given four lists A, B, C, D of integer values, compute how many tuples (i, j, k, l) there are such that A[i] + B[j] + C[k] + D[l] is zero.

To make problem a bit easier, all A, B, C, D have same length of N where 0 ≤ N ≤ 500. All integers are in the range of -228 to 228 - 1 and the result is guaranteed to be at most 231 - 1.

Example:

Input:
A = [ 1, 2]
B = [-2,-1]
C = [-1, 2]
D = [ 0, 2]

Output:
2

Explanation:
The two tuples are:
1. (0, 0, 0, 1) -> A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0
2. (1, 1, 0, 0) -> A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0
*/
class Solution {
    public int fourSumCount(int[] A, int[] B, int[] C, int[] D) {
        
        Map<Integer, Integer> map = new HashMap<>();
        int result = 0;
        for(int i : A) {
            for(int j : B) {
                map.put( i + j,  map.getOrDefault(i + j, 0) + 1);
            }
        }
        
        for(int i : C) {
            for(int j : D) {
               int twoSum = i + j;
                if(map.containsKey(-twoSum)) {
                    result += map.get(-twoSum);
                }
            }
        }
        return result;
    }
}