/*
You are given a string s, a split is called good if you can split s into 2 non-empty strings p and q where its concatenation is equal to s and the number of distinct letters in p and q are the same.

Return the number of good splits you can make in s.

 

Example 1:

Input: s = "aacaba"
Output: 2
Explanation: There are 5 ways to split "aacaba" and 2 of them are good. 
("a", "acaba") Left string and right string contains 1 and 3 different letters respectively.
("aa", "caba") Left string and right string contains 1 and 3 different letters respectively.
("aac", "aba") Left string and right string contains 2 and 2 different letters respectively (good split).
("aaca", "ba") Left string and right string contains 2 and 2 different letters respectively (good split).
("aacab", "a") Left string and right string contains 3 and 1 different letters respectively.
Example 2:

Input: s = "abcd"
Output: 1
Explanation: Split the string as follows ("ab", "cd").
Example 3:

Input: s = "aaaaa"
Output: 4
Explanation: All possible splits are good.
Example 4:

Input: s = "acbadbaada"
Output: 2
*/
class Solution {
    public int numSplits(String s) {
        boolean[] leftVisited = new boolean[26];
        int leftCount = 0;
        boolean[] rightVisited = new boolean[26];
        int rightCount = 0;
        
        int res = 0;
        //we filled up the table from left
        int[] leftRemain = new int[s.length()];
        char[] arr = s.toCharArray();
        for(int i = 0; i < s.length(); i++) {
            if(leftVisited[arr[i] - 'a'] == false) {
                leftVisited[arr[i] - 'a'] = true;
                leftCount++;
            }
            leftRemain[i] = leftCount;
        }
        // we count it from right, it means 
        // if "rightCount" == "leftRemain[]" the string have same distinct char on each side
        for(int i = s.length() - 1; i > 0; i--) {
            if(rightVisited[arr[i] - 'a'] == false) {
                rightVisited[arr[i] - 'a'] = true;
                rightCount++;
            }
            if(rightCount == leftRemain[i - 1]) {
                res++;
            }
        }
        return res;
        
//         Map<Character, Integer> left = new HashMap<>();
//         Map<Character, Integer> right = new HashMap<>();
//         int count = 0;
//         for(int i = 0; i < s.length(); i++) {
//             char c = s.charAt(i);
//             left.put(c, left.getOrDefault(c, 0) + 1);
//         }
        
//         for(int i = 0; i < s.length(); i++) {
//             char c = s.charAt(i);
//             if(left.size() == right.size()) {
//                 count++;
//             }
//             left.put(c, left.get(c) - 1);
//             right.put(c, right.getOrDefault(c, 0) + 1);
//             if(left.get(c) == 0) {
//                 left.remove(c);
//             }
//         }
//         return count;
    }
}