/*
There are n people that are split into some unknown number of groups. Each person is labeled with a unique ID from 0 to n - 1.
You are given an integer array groupSizes, where groupSizes[i] is the size of the group that person i is in. For example, if groupSizes[1] = 3, then person 1 must be in a group of size 3.
Return a list of groups such that each person i is in a group of size groupSizes[i].
Each person should appear in exactly one group, and every person must be in a group. If there are multiple answers, return any of them. It is guaranteed that there will be at least one valid solution for the given input.

Example 1:
Input: groupSizes = [3,3,3,3,3,1,3]
Output: [[5],[0,1,2],[3,4,6]]
Explanation: 
The first group is [5]. The size is 1, and groupSizes[5] = 1.
The second group is [0,1,2]. The size is 3, and groupSizes[0] = groupSizes[1] = groupSizes[2] = 3.
The third group is [3,4,6]. The size is 3, and groupSizes[3] = groupSizes[4] = groupSizes[6] = 3.
Other possible solutions are [[2,1,6],[5],[0,4,3]] and [[5],[0,6,2],[4,3,1]].

Example 2:
Input: groupSizes = [2,1,3,3,3,2]
Output: [[1],[0,5],[2,3,4]]

*/
class Solution {
    public List<List<Integer>> groupThePeople(int[] groupsizes) {
        
        List<List<Integer>> ans= new ArrayList<List<Integer>>();
        
        int n = groupsizes.length;
        
        for(int i = 0 ; i<n ; i++) {
            //  because we set the groupsizes[j] = -1 
            if(groupsizes[i] != -1) {
                List<Integer> count = new ArrayList<Integer>();
                
                int x = groupsizes[i];
                int temp = x;
                // greedy pick, because we set the groupsizes[j] = -1 after we pick the element up
                for(int j = i ; j<n ; j++) {
                    // when the group fill => break
                    if(x == 0) {
                        break;
                    }
                    
                    if(groupsizes[j] == temp) {
                        count.add(j);
                        groupsizes[j] = -1;
                        x--;
                    } 
                    
                }
                ans.add(count);
            }
        }
        return ans;
        
    }
}

/*
class Solution {
    public List<List<Integer>> groupThePeople(int[] groupSizes) {
        List<List<Integer>> res = new ArrayList<>();
        //   group          ID
        Map<Integer, List<Integer>> table = new HashMap<>();
        
        for(int i = 0; i < groupSizes.length; i++) {
            if(!table.containsKey(groupSizes[i])) {
                table.put(groupSizes[i], new ArrayList<>());
            }
            table.get(groupSizes[i]).add(i);
        }
        
        for(Map.Entry<Integer, List<Integer>> entry: table.entrySet()) {
            int groupSize = entry.getKey();
            List<Integer> groupMember = entry.getValue();
            List<Integer> group = new ArrayList<>();
            int count = 0;
            
            for(int i = 0; i < groupMember.size(); i++ ) {
                
                group.add(groupMember.get(i));
                count++;
                if( count == groupSize) {
                    res.add(group);
                    count = 0;
                    group = new ArrayList<>();
                }
            }
            
        }
        return res;
    }
}
*/