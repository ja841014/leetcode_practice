/*
Given an array of strings nums containing n unique binary strings each of length n, return a binary string of length n that does not appear in nums. If there are multiple answers, you may return any of them.

Example 1:
Input: nums = ["01","10"]
Output: "11"
Explanation: "11" does not appear in nums. "00" would also be correct.

Example 2:
Input: nums = ["00","01"]
Output: "11"
Explanation: "11" does not appear in nums. "10" would also be correct.

Example 3:
Input: nums = ["111","011","001"]
Output: "101"
Explanation: "101" does not appear in nums. "000", "010", "100", and "110" would also be correct.
*/
class Solution {
    public String findDifferentBinaryString(String[] nums) {
        Set<Integer> set = new HashSet<>();
        int size = nums[0].length();
        int range = (int)(Math.pow(2, size)) - 1;
        for(String str : nums) {
            int a = Integer.parseInt(str, 2);
            set.add(a);
        }
        int target = 0;
        for(int i = 0; i <= range; i++) {
            if(!set.contains(i)) {
                target = i;
            }
        }
        
        String ans = Integer.toBinaryString(target);
        if(ans.length() != size) {
            int diff = size - ans.length();
            for(int i = 0; i < diff; i++) {
                ans = "0" + ans; 
            }
        }
        
        
        
//         // using 11 to xor nums
//         StringBuilder sb = new StringBuilder();
//         int size = nums[0].length();
//         for(int i = 0; i < size; i++) {
//             sb.append(1);
//         }
        
//         // int base = Integer.parseInt(sb.toString(), 2);
//         int base = Integer.parseInt(nums[0], 2);
//         for(int i = 1; i < nums.length; i++) {
//             base = base & Integer.parseInt(nums[i], 2);
//             // base = base ^ Integer.parseInt(str, 2); 
//             // System.out.println(base);
//         }
//         base = base ^ Integer.parseInt(sb.toString(), 2);
        
        // String ans = Integer.toBinaryString(base);
        // if(ans.length() != size) {
        //     int diff = size - ans.length();
        //     for(int i = 0; i < diff; i++) {
        //         ans = "0" + ans; 
        //     }
        // }
        
        return ans;
    }
}