/*
Given two strings a and b, return the minimum number of times you should repeat the string a so that string b is a substring of it. If it's impossible for b to be a substring of a after repeating it, return -1.

Notice: string "abc" repeated 0 times is "",  repeated 1 time is "abc" and repeated 2 times is "abcabc".

Example 1:
Input: a = "abcd", b = "cdabcdab"
Output: 3
Explanation: We return 3 because by repeating a three times "abcdabcdabcd", b is a substring of it.

Example 2:
Input: a = "a", b = "aa"
Output: 2

Example 3:
Input: a = "a", b = "a"
Output: 1

Example 4:
Input: a = "abc", b = "wxyz"
Output: -1
*/
class Solution {
    public int repeatedStringMatch(String a, String b) {
        StringBuilder sb = new StringBuilder();

        int cnt = 0;
        while(sb.length() < b.length()) {
            sb.append(a);
            cnt++;
        }
        if(check(sb.toString(), b) == true) {
            return cnt;
        }

        sb.append(a);
        cnt++;
        if(check(sb.toString(), b) == true) {
            return cnt;
        }
        return -1;
    }
    public boolean check(String fake, String b) {
        int fake_cnt = 0;
        int b_count = 0;
        while(fake_cnt != fake.length() ) {
            // find the entry character
            if(b.charAt(0) == fake.charAt(fake_cnt)) {
                // check is the remain length is enoght
                if(fake_cnt + b.length() <= fake.length()) {
                    String tmp = fake.substring(fake_cnt, fake_cnt + b.length());
                    if(tmp.equals(b)) {
                        return true;
                    }
                }
                else {
                    break;
                }
                
            }
            fake_cnt++;
        }
        return false;
    }
}