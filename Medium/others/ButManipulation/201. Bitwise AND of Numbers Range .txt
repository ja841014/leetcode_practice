/*
Given two integers left and right that represent the range [left, right], return the bitwise AND of all numbers in this range, inclusive.

Example 1:
Input: left = 5, right = 7
Output: 4

Example 2:
Input: left = 0, right = 0
Output: 0

Example 3:
Input: left = 1, right = 2147483647
Output: 0
*/
class Solution {
    public int rangeBitwiseAnd(int left, int right) {
        /*
            The idea is that we shift both numbers to the right, until the numbers become equal, 
            i.e. the numbers are reduced into their common prefix. 
            Then we append zeros to the common prefix in order to obtain the desired result, by shifting the 
            common prefix to the left.        
        */
        int shift = 0;
        while(left != right) {
            left = left >> 1;
            right = right >> 1;
            shift++;
        }
        return right << shift;
        
        // int res = left;
        // for(int i = left + 1; i <= right && i >= 0; i++) {
        //     res = res & i;
        //     if(res == 0) {
        //         return 0;
        //     }
        // }
        // return res;
    }
}