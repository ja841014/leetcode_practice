/*
We are given an array nums of positive integers, and two positive integers left and right (left <= right).
Return the number of (contiguous, non-empty) subarrays such that the value of the maximum array element in that subarray is at least left and at most right.
Example:
Input: 
nums = [2, 1, 4, 3]
left = 2
right = 3
Output: 3
Explanation: There are three subarrays that meet the requirements: [2], [2, 1], [3].
*/
class Solution {
    public int numSubarrayBoundedMax(int[] nums, int left, int right) {
        // ex:
        //  1,1,2 => end - start = 2 - (-1) = 3
        int start = -1;
        int end = -1;
        int res = 0;
        
        for(int i = 0; i < nums.length; i++) {
            int curVal = nums[i];
            if(curVal > right) {
                start = i;
                end = i;
                continue;
            }
            if(curVal >= left) {
                end = i;
            }
            res = res + end - start;
        }
        return res;
    }
}