/*
Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.

Example 1:
Input: intervals = [[1,3],[6,9]], newInterval = [2,5]
Output: [[1,5],[6,9]]

Example 2:
Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
Output: [[1,2],[3,10],[12,16]]
Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].

Example 3:
Input: intervals = [], newInterval = [5,7]
Output: [[5,7]]

Example 4:
Input: intervals = [[1,5]], newInterval = [2,3]
Output: [[1,5]]

Example 5:
Input: intervals = [[1,5]], newInterval = [2,7]
Output: [[1,7]]
*/
class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
        // Method I
        List<int[]> ls = new ArrayList<>(0);
        
        int newIntervalStart = newInterval[0];
        int newIntervalEnd = newInterval[1];
        int newStart = 0;
        int newEnd = 0;
        int i = 0;
        
        // put the non-overlapping interval into ls
        while(i < intervals.length && intervals[i][1] < newInterval[0]) {
            ls.add(intervals[i++]);
        }
        
        // find the overlapping part
        while(i < intervals.length && intervals[i][0] <= newInterval[1] ) {
            int[] cur = intervals[i++];
            newInterval[0] = Math.min(newInterval[0], cur[0] );
            newInterval[1] = Math.max(newInterval[1], cur[1]);
        }
        
        ls.add(newInterval);
        // put the remaining non-overlapping part
        while(i < intervals.length) {
            ls.add(intervals[i++]);
        }
        int[][] result = new int[ls.size()][2];
        result = ls.toArray(result);
        
        return result;
        
        
        // Method II
//         int flag_start = 0;
//         int flag_end = 0;
//         int new_interval_start = newInterval[0];
//         int new_interval_end = newInterval[1];
//         int index_start = 0;
//         int index_end = 0;
//         int[]  alter = new int[2];
        
//         int[][] new_arr = new int[intervals.length + 1][2];
        
//         if(intervals.length == 0) {
//             return new int[][] {{newInterval[0], newInterval[1]}};
//         }
//         int cnt = 0;
//         boolean check = false;
//         int smaller = 0;
            
//         for(int i = 0; i < intervals.length; i++) {
            
//             if(new_interval_start < intervals[i][0] && flag_start == 0) {
//                 index_start = i;
//                 alter[0] = new_interval_start;
//                 flag_start++;
//             } else if(new_interval_start >= intervals[i][0] && new_interval_start <= intervals[i][1] && flag_start == 0) {
//                 index_start = i;
//                 alter[0] = intervals[i][0];
//                 flag_start++;
//             } 
//             // start has not find yet
//             if(flag_start == 0) {
//                 new_arr[cnt][0] = intervals[i][0];
//                 new_arr[cnt][1] = intervals[i][1];
//                 cnt++;
//             }
            
//             if(new_interval_end < intervals[i][0] && flag_start != 0 && flag_end == 0) {
//                 index_end = i;
//                 alter[1] = new_interval_end;
//                 flag_end++;
//                 smaller = -1;
//             } else if(new_interval_end >= intervals[i][0] && new_interval_end <= intervals[i][1] && flag_start != 0 && flag_end == 0) {
//                 index_end = i; 
//                 alter[1] = intervals[i][1];
//                 flag_end++;
//                 smaller = 1;
//             }
//             if(flag_start != 0 && flag_end != 0) {
//                 if(check == false) {
//                     new_arr[cnt][0] = alter[0] ;
//                     new_arr[cnt][1] = alter[1];
//                     cnt++;
//                     if(smaller == -1) { //need add this roind
//                         new_arr[cnt][0] = intervals[i][0];
//                         new_arr[cnt][1] = intervals[i][1];
//                         cnt++;
//                     }
//                     check = true;
//                 }
//                 else {
//                     new_arr[cnt][0] = intervals[i][0];
//                     new_arr[cnt][1] = intervals[i][1];
//                     cnt++;

//                 }
//             }
//         }
//         // bigger than all
//         if(flag_start == 0 && flag_end == 0) {
//             alter[0] = new_interval_start;
//             alter[1] = new_interval_end;
//             new_arr[cnt][0] = alter[0];
//             new_arr[cnt][1] = alter[1];
//             cnt++;
//         }
//         // end biiger than all else
//         else if(flag_start != 0 && flag_end == 0 ) {
//             alter[1] = new_interval_end;
//             new_arr[cnt][0] = alter[0];
//             new_arr[cnt][1] = alter[1];
//             cnt++;
//         }
        
        
//         int[][] result = Arrays.copyOf(new_arr, cnt);

        
        
        
//         return result;
        
    }
    
   
}