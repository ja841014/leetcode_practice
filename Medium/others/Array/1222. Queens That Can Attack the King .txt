/*
On an 8x8 chessboard, there can be multiple Black Queens and one White King.

Given an array of integer coordinates queens that represents the positions of the Black Queens, and a pair of coordinates king that represent the position of the White King, return the coordinates of all the queens (in any order) that can attack the King.

Input: queens = [[0,1],[1,0],[4,0],[0,4],[3,3],[2,4]], king = [0,0]
Output: [[0,1],[1,0],[3,3]]
Explanation:  
The queen at [0,1] can attack the king cause they're in the same row. 
The queen at [1,0] can attack the king cause they're in the same column. 
The queen at [3,3] can attack the king cause they're in the same diagnal. 
The queen at [0,4] can't attack the king cause it's blocked by the queen at [0,1]. 
The queen at [4,0] can't attack the king cause it's blocked by the queen at [1,0]. 
The queen at [2,4] can't attack the king cause it's not in the same row/column/diagnal as the king.

*/
class Solution {
    public List<List<Integer>> queensAttacktheKing(int[][] queens, int[] king) {
        int[] dir = new int[]{-1, 0, 1};
        boolean[][] table = new boolean[8][8];
        List<List<Integer>> result = new ArrayList<>();
        for(int[] queensLoc : queens) {
            table[queensLoc[0]][queensLoc[1]] = true;
        }
        
        for(int dx : dir) {
            for(int dy : dir) {
                if(dx == 0 && dy == 0) {
                    continue;
                }
                int x = king[0];
                int y = king[1];
                while(x + dx >= 0 && x + dx < 8 && y + dy >= 0 && y + dy < 8) {
                    x = x + dx;
                    y = y + dy;
                    if(table[x][y] == true) {
                        result.add(Arrays.asList(x, y));
                        break;
                    }
                }
            }
        }
        return result;
    }
}


