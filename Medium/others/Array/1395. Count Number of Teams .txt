/*
There are n soldiers standing in a line. Each soldier is assigned a unique rating value.

You have to form a team of 3 soldiers amongst them under the following rules:
Choose 3 soldiers with index (i, j, k) with rating (rating[i], rating[j], rating[k]).
A team is valid if: (rating[i] < rating[j] < rating[k]) or (rating[i] > rating[j] > rating[k]) where (0 <= i < j < k < n).
Return the number of teams you can form given the conditions. (soldiers can be part of multiple teams).

Example 1:
Input: rating = [2,5,3,4,1]
Output: 3
Explanation: We can form three teams given the conditions. (2,3,4), (5,4,1), (5,3,1). 

Example 2:
Input: rating = [2,1,3]
Output: 0
Explanation: We can't form any team given the conditions.

Example 3:
Input: rating = [1,2,3,4]
Output: 4
*/

class Solution {
    
    public int numTeams(int[] rating) {
        int ans = 0;
        for(int i = 0; i < rating.length; i++) {
            int curVal = rating[i];
            int left = 0;
            int right = 0;
            // check left . we only check increase order, becasuse we can use "minus" to get the decrease number
            for(int j = 0; j < i; j++) {
                if(rating[j] < curVal) {
                    left++;
                }
            }
            // check right
            for(int j = i + 1; j < rating.length; j++) {
                if(curVal < rating[j]) {
                    right++;
                }
            }
            //           increase tuple  decrease tuplr
            ans = ans + (left * right) + (i - left) * (rating.length - 1 - i- right);
        }
        return ans;
    }
    // backtracking will cause TLE
//     int cnt = 0;
//     public int numTeams(int[] rating) {
//         // strictly increase
//         increaseCheck(rating, 0, -1, 3);
//         // strictly decrease
//         decreaseCheck(rating, 0, -1, 3);
//         return cnt;
//     }
//     private void increaseCheck(int[] rating, int index, int prevVal, int remain) {
//         if(remain == 0) {
//             // System.out.println("increase");
//             cnt++;
//             return;
//         }
        
//         for(int i = index; i < rating.length; i++) {
//             int curVal = rating[i];
//             if(prevVal == -1 || prevVal < curVal) {
//                 increaseCheck(rating, i + 1, curVal, remain - 1);
//             }
//         }
//         return;
//     }
    
//     private void decreaseCheck(int[] rating, int index, int prevVal, int remain) {
//         if(remain == 0) {
//             cnt++;
//             return;
//         }
        
//         for(int i = index; i < rating.length; i++) {
//             int curVal = rating[i];
//             if(prevVal == -1 || prevVal > curVal) {
//                 decreaseCheck(rating, i + 1, curVal, remain - 1);
//             }
//         }
//         return;
//     }
}