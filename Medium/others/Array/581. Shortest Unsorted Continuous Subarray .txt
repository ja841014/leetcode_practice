/*
Given an integer array nums, you need to find one continuous subarray that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order.
Return the shortest such subarray and output its length.
 
Example 1:
Input: nums = [2,6,4,8,10,9,15]
Output: 5
Explanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.

Example 2:
Input: nums = [1,2,3,4]
Output: 0

Example 3:
Input: nums = [1]
Output: 0
*/
class Solution {
    public int findUnsortedSubarray(int[] nums) {
        //***** Without Stack ******//
        int max = Integer.MIN_VALUE;
        int min = Integer.MAX_VALUE;
        int size = nums.length; 
        
        int right = -1;
        int left = 0;
        
        for(int i = 0; i < size; i++) {
            // why we need "<=" not "<" because th etestcase has duplicate number
            // [1,2,3,3,3]
            if(max <= nums[i]) {
                max = nums[i];
            }
            else {
                right = i;
            }
           
            if(min >= nums[size - i - 1]) {
                min = nums[size - i - 1];
            }
            else {
                left = size - i - 1;
            }
        }
        if(right == -1) {
            return 0;
        }
        return right - left + 1;
        //***** With Stack ******//
        // Stack< Integer > st = new Stack<>();
        // int size = nums.length; 
        // int left = Integer.MAX_VALUE;
        // int right = -1;
        // // find left
        // for(int i = 0; i < size; i++) {
        //     while(!st.isEmpty() && nums[st.peek()] > nums[i]) {
        //         left = Math.min(left, st.pop());
        //     }
        //     st.push(i);
        // }
        // st.clear();
        // //find right
        // for(int i = size - 1; i >= 0; i--) {
        //     while(!st.isEmpty() && nums[st.peek()] < nums[i]) {
        //         right = Math.max(right, st.pop());
        //     }
        //     st.push(i);
        // }
        // if(right == -1) {
        //     return 0;
        // }
        // return right - left + 1;
    }
}