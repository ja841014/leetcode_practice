//Given an array of integers, 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.
// Find all the elements that appear twice in this array.
    
// Example:
// Input:
// [4,3,2,7,8,2,3,1]
// Output:
// [2,3]
class Solution {
    public List<Integer> findDuplicates(int[] nums) {
        List<Integer> ls = new ArrayList<>();
        for(int i = 0; i < nums.length; i++) {
            nums[Math.abs(nums[i]) - 1] = (-1) * nums[Math.abs(nums[i]) - 1];
        }
        for(int i = 0; i < nums.length; i++) {
            
            if(nums[Math.abs(nums[i]) - 1] > 0 ) {
                ls.add(Math.abs(nums[i]));
                //when we reach the second occurrence of abs(x), we need to avoid fulfilling this condition again. So, we'll additionally negate the value at index abs(x)-1
                nums[Math.abs(nums[i]) - 1] = (-1) * nums[Math.abs(nums[i]) - 1];
            }
        }
        return ls;
    }
}