/*
similar with some strategy with endIndex = (stratIndex + offset) % totalLength
Given a rows x cols screen and a sentence represented as a list of strings, return the number of times the given sentence can be fitted on the screen.
The order of words in the sentence must remain unchanged, and a word cannot be split into two lines. A single space must separate two consecutive words in a line.

Example 1:
Input: sentence = ["hello","world"], rows = 2, cols = 8
Output: 1
Explanation:
hello---
world---
The character '-' signifies an empty space on the screen.

Example 2:
Input: sentence = ["a", "bcd", "e"], rows = 3, cols = 6
Output: 2
Explanation:
a-bcd- 
e-a---
bcd-e-
The character '-' signifies an empty space on the screen.

Example 3:
Input: sentence = ["i","had","apple","pie"], rows = 4, cols = 5
Output: 1
Explanation:
i-had
apple
pie-i
had--
The character '-' signifies an empty space on the screen.
*/
class Solution {
    public int wordsTyping(String[] sentence, int rows, int cols) {
        String wholeSetnece = String.join("-", sentence) + "-";
        int totalLength = wholeSetnece.length();
        
        int count = 0;
        
        while(rows > 0) {
            count = count + cols;
            // we can fit well in this round
            // total: a-bcd-e- ; cols = 5
            // a-bcd   and next we wil meet '-' so we count++ to pass this
            if(wholeSetnece.charAt(count % totalLength) == '-') {
                count++;
            }
            else {
                while(count > 0 && wholeSetnece.charAt( (count-1) % totalLength) != '-') {
                    count--;
                }
            }
            rows--;
        }
        return count / totalLength;
    }
}