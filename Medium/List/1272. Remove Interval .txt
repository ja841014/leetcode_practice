/*
Given a sorted list of disjoint intervals, each interval intervals[i] = [a, b] represents the set of real numbers x such that a <= x < b.
We remove the intersections between any interval in intervals and the interval toBeRemoved.
Return a sorted list of intervals after all such removals.

Example 1:
Input: intervals = [[0,2],[3,4],[5,7]], toBeRemoved = [1,6]
Output: [[0,1],[6,7]]

Example 2:
Input: intervals = [[0,5]], toBeRemoved = [2,3]
Output: [[0,2],[3,5]]

Example 3:
Input: intervals = [[-5,-4],[-3,-2],[1,2],[3,5],[8,9]], toBeRemoved = [-1,4]
Output: [[-5,-4],[-3,-2],[4,5],[8,9]]
*/
class Solution {
    List<List<Integer>> ls = new ArrayList<>();
    
    public List<List<Integer>> removeInterval(int[][] intervals, int[] toBeRemoved) {
        for(int[] curInterval: intervals) {
            // cur          I------------I
            // toBeremoved        I----------I
            if(curInterval[0] < toBeRemoved[0] && curInterval[1] < toBeRemoved[1] && curInterval[1] >= toBeRemoved[0]) {
                addList(curInterval[0], toBeRemoved[0]);
                
            }
            // cur          I------------I
            // toBeremoved      I-------I
            else if(curInterval[0] < toBeRemoved[0] && curInterval[1] > toBeRemoved[1]) {
                addList(curInterval[0], toBeRemoved[0]);
                addList(toBeRemoved[1], curInterval[1]);
                
            }
            // cur             I------------I
            // toBeremoved I---------I
            else if(curInterval[0] >= toBeRemoved[0] && curInterval[1] > toBeRemoved[1] && curInterval[0] < toBeRemoved[1]) {
                addList(toBeRemoved[1], curInterval[1]);
                
            }
            // cur                  I------------I
            // toBeremoved      I-------------------I
            else if(curInterval[0] >= toBeRemoved[0] && curInterval[1] <= toBeRemoved[1] ) {
                continue;
            }
            else {
                addList(curInterval[0], curInterval[1]);
            }
        }
        return ls;
    }
    
    private void addList(int start, int end) {
        List<Integer> tmp = new ArrayList<>();
        tmp.add(start);
        tmp.add(end);
        ls.add(tmp);
    }
}