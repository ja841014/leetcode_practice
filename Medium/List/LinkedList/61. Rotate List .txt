/*
Given a linked list, rotate the list to the right by k places, where k is non-negative.

Example 1:

Input: 1->2->3->4->5->NULL, k = 2
Output: 4->5->1->2->3->NULL
Explanation:
rotate 1 steps to the right: 5->1->2->3->4->NULL
rotate 2 steps to the right: 4->5->1->2->3->NULL
Example 2:

Input: 0->1->2->NULL, k = 4
Output: 2->0->1->NULL
Explanation:
rotate 1 steps to the right: 2->0->1->NULL
rotate 2 steps to the right: 1->2->0->NULL
rotate 3 steps to the right: 0->1->2->NULL
rotate 4 steps to the right: 2->0->1->NULL
*/
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if(head == null) {
            return null;
        }
        if(k == 0) {
            return head;
        }
        
        int remain = 0;
        
        ListNode root = head;
        
        int size = countSize(root);
        
        // if LinkedList size bigger than
        if(size > k) {
            remain = size - k;
        }
        else if(size == k) {
            return head; 
        }
        else {
            remain = k % size;
            if(remain == 0) {
                return head;
            }
            remain = size - remain;
        }
        
        // newTail need to go to the target then mark the next to null
        ListNode newTail = head;
        for(int i = 0; i < remain - 1; i++) {
            newTail = newTail.next;
        }
        ListNode newHead = newTail.next;
        newTail.next = null;
        
        // newHeadTmp need to go the the end and connet to the newTail
        ListNode newHeadTmp = newHead;
        while(newHeadTmp.next != null) {
            newHeadTmp = newHeadTmp.next; 
        }
        newHeadTmp.next = head;
        return newHead;
        
    }
    
    private int countSize(ListNode root) {
        int cnt = 0;
        while(root != null) {
            root = root.next;
            cnt++;
        }
        return cnt;
    }
}