/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 
Given the head of a linked list, remove the nth node from the end of the list and return its head.

Example 1:
Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]

Example 2:
Input: head = [1], n = 1
Output: []

Example 3:
Input: head = [1,2], n = 1
Output: [1]
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        int size = 0;
        ListNode tmpHead = head;
        while(tmpHead != null) {
            tmpHead = tmpHead.next;
            size++;
        }
        tmpHead = head;
        int nthFromFront = size - n - 1;
        if(nthFromFront == -1) {
            return head.next;
        }
        
        while(tmpHead != null) {
            if(nthFromFront == 0) {
                if(tmpHead.next.next == null) {
                    tmpHead.next = null;
                }
                else {
                    tmpHead.next = tmpHead.next.next;
                }
                break;
            }
            else {
                tmpHead = tmpHead.next;
                nthFromFront--;    
            }
        }
        return head;
    }
}