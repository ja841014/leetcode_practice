/*
Given a node from a Circular Linked List which is sorted in ascending order, write a function to insert a value insertVal into the list such that it remains a sorted circular list. The given node can be a reference to any single node in the list, and may not be necessarily the smallest value in the circular list.

If there are multiple suitable places for insertion, you may choose any place to insert the new value. After the insertion, the circular list should remain sorted.

If the list is empty (i.e., given node is null), you should create a new single circular list and return the reference to that single node. Otherwise, you should return the original given node.

*/
/*
// Definition for a Node.
class Node {
    public int val;
    public Node next;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _next) {
        val = _val;
        next = _next;
    }
};
*/

class Solution {
    public Node insert(Node head, int insertVal) {
        // no element
        if(head == null) {
            Node emptyHead = new Node(insertVal);
            emptyHead.next = emptyHead;
            return emptyHead;
        }
        // one element
        else if(head.next == head){
            head.next = new Node(insertVal, head);
            return head;
        }
        else {
            Node pre = head;
            Node cur = head.next;
            
            while(true) {
                // a b x c
                if(pre.val <= insertVal && insertVal <= cur.val) {
                    pre.next = new Node(insertVal, cur);
                    break;
                }
                // a b c x
                else if(pre.val > cur.val && (insertVal >= pre.val || insertVal <= cur.val)) {
                    pre.next = new Node(insertVal, cur);
                    break;
                }
                if(pre.next == head) {
                   pre.next = new Node(insertVal, head); 
                    break;
                }
                pre = pre.next;
                cur = cur.next;
            }
        }
        
        return head;
    }
}