/*
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

ex1
Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.

Example 2:
Input: l1 = [0], l2 = [0]
Output: [0]

Example 3:
Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]
*/
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
   public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
       ListNode head = new ListNode(0);
       ListNode result = head;
       int pre = 0;
       int[] arr = new int[2];
       
       while(l1 != null && l2 != null) {
           int value = l1.val + l2.val + pre;
           
           arr = isOverFlow(value, pre);
           pre = arr[0];
           value = arr[1];
           
           result.next = new ListNode(value);
           l1 = l1.next;
           l2 = l2.next;
           result = result.next;
           
       }
       
       if(l1 == null && l2 != null) {
           helper(l2, result, pre);
           
       }
       else if(l2 == null && l1 != null){
           helper(l1, result, pre);
           
       }
       else {
           if(pre != 0) {
               result.next = new ListNode(pre);
           }
       }
       
        return head.next;
    }
    
    private int[] isOverFlow(int value, int pre) {
        int[] arr = new int[2];
        if(value > 9) {
           pre = value / 10;
           value = value % 10;
           
        }
        else {
           pre = 0;
        }
        arr[0] = pre;
        arr[1] = value;
        return arr;
    }
    
   private void helper(ListNode tmp, ListNode result, int pre) {
       int[] arr = new int[2];
       while(tmp.next != null) {
           int value = tmp.val + pre;
           
           arr = isOverFlow(value, pre);
           pre = arr[0];
           value = arr[1];
           
           result.next = new ListNode(value);
           tmp = tmp.next;
           result = result.next;
       }
       int value = tmp.val + pre;
       if(value > 9) {
           pre = value / 10;
           value = value % 10;
           result.next = new ListNode(value);
           result = result.next;
           result.next = new ListNode(pre);
       }
       else {
           result.next = new ListNode(value);
       }
   }
}