/*
Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:
0 <= a, b, c, d < n
a, b, c, and d are distinct.
nums[a] + nums[b] + nums[c] + nums[d] == target
You may return the answer in any order.

Example 1:
Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]

Example 2:
Input: nums = [2,2,2,2,2], target = 8
Output: [[2,2,2,2]]
*/
class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        Arrays.sort(nums);
        List<List<Integer>> res = new ArrayList<>();
        for(int i = 0; i < nums.length - 3; i++) {
            // avoid duplicate
            if(i > 0 && nums[i] == nums[i - 1]) {
                continue;
            }
            res.addAll(threeSum(nums, target - nums[i], i + 1, nums[i]));
        }
        return res;
    }
    
    public List<List<Integer>> threeSum(int[] nums, int target, int index, int val) {
        List<List<Integer>> res = new ArrayList<>();
        for(int i = index; i < nums.length - 2; i++) {
            int left = i + 1;
            int right = nums.length - 1;
            // avoid duplicate
            if(i > index && nums[i] == nums[i - 1]) {
                continue;
            }
            while(left < right) {
                // avoid duplicate
                if(right < nums.length - 1 && nums[right] == nums[right + 1]) {
                    right--;
                    continue;
                }
                if(nums[left] + nums[right] + nums[i] == target) {
                    List<Integer> ls = new ArrayList<>(Arrays.asList(val, nums[left], nums[right], nums[i]));
                    res.add(ls);
                    right--;
                    left++;
                }
                else if(nums[left] + nums[right] + nums[i] > target) {
                    right--;
                }
                else {
                    left++;
                }
            }
        }
        return res;
    }
}