/*
we using the indegree to. find the middle Node and these nodes are the MHT root
A tree is an undirected graph in which any two vertices are connected by exactly one path. In other words, any connected graph without simple cycles is a tree.

Given a tree of n nodes labelled from 0 to n - 1, and an array of n - 1 edges where edges[i] = [ai, bi] indicates that there is an undirected edge between the two nodes ai and bi in the tree, you can choose any node of the tree as the root. When you select a node x as the root, the result tree has height h. Among all possible rooted trees, those with minimum height (i.e. min(h))  are called minimum height trees (MHTs).

Return a list of all MHTs' root labels. You can return the answer in any order.

The height of a rooted tree is the number of edges on the longest downward path between the root and a leaf.
*/
class Solution {
    public List<Integer> findMinHeightTrees(int n, int[][] edges) {
        List<Integer> ls = new ArrayList<>();
        if(n == 1) {
            ls.add(0);
            return ls;
        }
        Map<Integer, Set<Integer>> edgeMap = builtMap(edges);
        Set<Integer> seen = new HashSet<>();
        Queue<Integer> q = new LinkedList<>();
        int MHT = n;
        
        int[] degree = new int[n];
        for(int i = 0; i < n; i++) {
            degree[i] = edgeMap.get(i).size();
            // put all the node which degree is 1 in the queue as head node
            if(degree[i] == 1) {
                q.offer(i);
            }
        }
        
        while(MHT > 2) {
            int size = q.size();
            MHT = MHT - size;
                
            for(int i = 0; i < size; i++) {
                int currNode = q.poll();
                // seen.add(currNode); we do not need seen to store the node which we visited
                // because we us if statement to filter the node
                
                for(int neighbor : edgeMap.get(currNode)) {
                    degree[neighbor]--;
                    if(degree[neighbor] == 1) {
                        q.offer(neighbor);
                    }
                }
                
            }
        }
        
        ls.addAll(q);
        return ls;
  
    }
    
    private  Map<Integer, Set<Integer>>  builtMap(int[][] edges) {
        Map<Integer, Set<Integer>> edgeMap = new HashMap<>();
        for(int[] node: edges) {
            addNode(edgeMap, node[0], node[1]);
            addNode(edgeMap, node[1], node[0]);
        }
        return edgeMap;
            
    }
    
    
    private void addNode(Map<Integer, Set<Integer>> edgeMap, int node1, int node2) {
        if(!edgeMap.containsKey(node1)) {
            Set<Integer> set = new HashSet<>();
            set.add(node2);
            edgeMap.put(node1, set);
        }
        else {
            edgeMap.get(node1).add(node2);
        } 
    }
} 