/*
You are given an array of strings equations that represent relationships between variables where each string equations[i] is of length 4 and takes one of two different forms: "xi==yi" or "xi!=yi".Here, xi and yi are lowercase letters (not necessarily different) that represent one-letter variable names.
Return true if it is possible to assign integers to variable names so as to satisfy all the given equations, or false otherwise.

Example 1:
Input: equations = ["a==b","b!=a"]
Output: false
Explanation: If we assign say, a = 1 and b = 1, then the first equation is satisfied, but not the second.
There is no way to assign the variables to satisfy both equations.

Example 2:
Input: equations = ["b==a","a==b"]
Output: true
Explanation: We could assign a = 1 and b = 1 to satisfy both equations.
TestCase:
["c==c","b==d","x!=z"]
["a!=a"]
*/
class Solution {
    public boolean equationsPossible(String[] equations) {
        Map<Integer,List<Integer>> cache = new HashMap<>();
        int[] color = new int[26];
        int colorIdx = 1;
        List<String> notEqualStr = buildMap(cache, equations);
        
        if(notEqualStr.isEmpty()) {
            return true;
        }
        
        for(Map.Entry<Integer,List<Integer>> entry : cache.entrySet()) {
            if(color[entry.getKey()] != 0) continue;
            dfs(cache, entry.getValue(), color, colorIdx);
            colorIdx++;
        }
        
        for(String curStr : notEqualStr) {
            if(color[curStr.charAt(0) - 'a'] != 0 && (color[curStr.charAt(0) - 'a'] == color[curStr.charAt(3) - 'a']) ) {
                return false;
            }
            // a != a
            else if(curStr.charAt(0) == curStr.charAt(3))  {
                return false;
            }
        }
        
        return true;
        
        
    }
    
    private void dfs(Map<Integer, List<Integer>> cache, List<Integer> connect, int[] color, int colorIdx) {
        for(int i : connect) {
            if(color[i] != 0) continue;
            color[i] = colorIdx;
            dfs(cache, cache.get(i), color, colorIdx);
        }
    }
    
    private List<String> buildMap(Map<Integer, List<Integer>> cache, String[] equations) {
        List<String> notEqualString = new ArrayList<>();
        for(String s : equations) {
            if(s.charAt(1) == '=') {
                int first = s.charAt(0) - 'a';
                int second = s.charAt(3) - 'a';
                if(!cache.containsKey(first)) {
                    cache.put(first, new ArrayList<>());
                }
                if(!cache.containsKey(second)) {
                    cache.put(second, new ArrayList<>());
                }
                cache.get(first).add(second);
                cache.get(second).add(first);
            }     
            else {
                notEqualString.add(s);
            }
        }
        return notEqualString;
    }
}