/*
PriorityQueue
You are given a network of n nodes, labeled from 1 to n. You are also given times, a list of travel times as directed edges times[i] = (ui, vi, wi), where ui is the source node, vi is the target node, and wi is the time it takes for a signal to travel from source to target.

We will send a signal from a given node k. Return the time it takes for all the n nodes to receive the signal. If it is impossible for all the n nodes to receive the signal, return -1.
*/
class Solution {
    public int networkDelayTime(int[][] times, int n, int k) {
        Map<Integer, List<Node>> graph = new HashMap<>();
        buildGraph(times, graph);
        return BFSTraverse(graph, k, n);
    }
    
    private void buildGraph(int[][] times, Map<Integer, List<Node>> graph) {
        for(int[] curEdge : times) {
            if(!graph.containsKey(curEdge[0])) {
                graph.put(curEdge[0], new ArrayList<>());
            }
            graph.get(curEdge[0]).add(new Node(curEdge[1], curEdge[2]));
        }
    }
    
    private int BFSTraverse(Map<Integer, List<Node>> graph, int startPt, int totalNode) {
        int[] cacheMinValue = new int[totalNode + 1];
        Arrays.fill(cacheMinValue, Integer.MAX_VALUE);
        
        
        PriorityQueue<Node> pq = new PriorityQueue<>((a, b) -> a.weight - b.weight);   
                
        pq.add(new Node(startPt, 0));
        cacheMinValue[startPt] = 0;
        
        while(!pq.isEmpty()) {
            Node curNode = pq.poll();      
            
            // if the node is end node
            if(graph.get(curNode.nodeIdx) == null) {
                continue;
            }
            
            List<Node> curNeighbor = graph.get(curNode.nodeIdx);
            int neighboreSize = curNeighbor.size();
            
            for(int j = 0; j < neighboreSize; j++) {
                int neighborIdx = curNeighbor.get(j).nodeIdx;
                int curSegmentTime = curNeighbor.get(j).weight;
                int curArriveTime = cacheMinValue[curNode.nodeIdx] + curSegmentTime;
                if(cacheMinValue[neighborIdx] > curArriveTime) {
                    cacheMinValue[neighborIdx] = curArriveTime;
                    pq.add(curNeighbor.get(j));
                }
            }
            
        }
        
        int res = Integer.MIN_VALUE;
        for(int i = 1; i <= totalNode; i++) {
            res = Math.max(res,  cacheMinValue[i]);
        }
        if(res == Integer.MAX_VALUE) {
            return -1;
        }
        return res;
    }
    
    public class Node {
        int nodeIdx;
        int weight;
        public Node(int nodeIdx, int weight) {
            this.nodeIdx = nodeIdx;
            this.weight = weight;
        }
    }
}