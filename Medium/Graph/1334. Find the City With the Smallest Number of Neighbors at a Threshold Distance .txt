// we can use Floydâ€“Warshall algorithm to optimize runtime
// https://leetcode.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/discuss/490312/JavaC%2B%2BPython-Easy-Floyd-Algorithm
/*
There are n cities numbered from 0 to n-1. Given the array edges where edges[i] = [fromi, toi, weighti] represents a bidirectional and weighted edge between cities fromi and toi, and given the integer distanceThreshold.
Return the city with the smallest number of cities that are reachable through some path and whose distance is at most distanceThreshold, If there are multiple such cities, return the city with the greatest number.
Notice that the distance of a path connecting cities i and j is equal to the sum of the edges' weights along that path.

Input: n = 4, edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]], distanceThreshold = 4
Output: 3
Explanation: The figure above describes the graph. 
The neighboring cities at a distanceThreshold = 4 for each city are:
City 0 -> [City 1, City 2] 
City 1 -> [City 0, City 2, City 3] 
City 2 -> [City 0, City 1, City 3] 
City 3 -> [City 1, City 2] 
Cities 0 and 3 have 2 neighboring cities at a distanceThreshold = 4, but we have to return city 3 since it has the greatest number.
*/
class Solution {
    // edges[i] = [fromi, toi, weighti]
    public int findTheCity(int n, int[][] edges, int distanceThreshold) {
        
        Map<Integer, Set<int[]>> edgeMap = new HashMap<>();
        for (int i = 0; i < n; i++) {
            edgeMap.put(i, new HashSet<>());
        }
        
        buildMap(edgeMap, edges, distanceThreshold);
        
        int preNumNeighbor = Integer.MAX_VALUE;
        int preIndex = -1;
        
        for(int i = 0; i < n; i++) {
            // System.out.print("Node: " + i + " number neighbor");
            int numNeighbor = oneToAllDistance(edgeMap, distanceThreshold, i);
            if(numNeighbor <= preNumNeighbor) {
                preNumNeighbor = numNeighbor;
                preIndex = i;
            }
        }
        
        return preIndex;
    }
    
    private void buildMap(Map<Integer, Set<int[]> > edgeMap, int[][] edges, int distanceThreshold) {
        for(int[] i : edges) {
            if(i[2] > distanceThreshold) {
                continue;
            }
            int dist = i[2];
            int cityA = i[0];
            int cityB = i[1];
            edgeMap.get(cityA).add(new int[] {cityB, dist});
            edgeMap.get(cityB).add(new int[] {cityA, dist});            
        }
    }
    
    private int oneToAllDistance(Map<Integer, Set<int[]>> edgeMap, int distanceThreshold, int startNode) {
        // we cannot use queue, because there might be a situation that will stuck some paths
        // Queue<int[]> q = new LinkedList<>();
        Queue<int[]> q = new PriorityQueue<>((a, b)->(b[1] - a[1]));
        Set<Integer> seen = new HashSet<>();
        int cnt = 0;
        q.offer(new int[] {startNode, distanceThreshold});
        
        while(!q.isEmpty()) {
            int[] currCity = q.poll();
            if(seen.contains(currCity[0])) {
                continue;
            }
            seen.add(currCity[0]);
            cnt++;
            Set<int[]> neighbor = edgeMap.get(currCity[0]);
            int restWeight = currCity[1];
            for(int[] n: neighbor) {
                if(n[1] > restWeight || seen.contains(n[0])) {
                    continue;
                }

                q.offer(new int[] {n[0], restWeight - n[1]});

            }
            
        }
        return cnt - 1;
    }
}