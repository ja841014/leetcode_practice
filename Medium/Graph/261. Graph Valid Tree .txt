/*
You have a graph of n nodes labeled from 0 to n - 1. You are given an integer n and a list of edges where edges[i] = [ai, bi] indicates that there is an undirected edge between nodes ai and bi in the graph.

Return true if the edges of the given graph make up a valid tree, and false otherwise.

Example 1:
Input: n = 5, edges = [[0,1],[0,2],[0,3],[1,4]]
Output: true

Example 2:
Input: n = 5, edges = [[0,1],[1,2],[2,3],[1,3],[1,4]]
Output: false
*/
class Solution {
    // boolean isValid;
    public boolean validTree(int n, int[][] edges) {
        if(edges.length != n - 1) {
            return false;
        }
        // isValid = true;
        // built graph
        Map<Integer, Set<Integer>> graph = new HashMap<>();
        for(int i = 0; i < n ;i++) {
            graph.put(i, new HashSet<>());
        }
        buildGraph(graph, edges);
        
        return traverseTree(graph, n);
    }
    // we totally have n - 1 edges
    public boolean traverseTree(Map<Integer, Set<Integer>> graph, int n) {
        Queue<Integer> q = new LinkedList<>();
        // child parent
        Map<Integer, Integer> parent = new HashMap<>();
        
        q.offer(0);
        int count = 0;
        while(!q.isEmpty()) {
            int size = q.size();
            for(int i = 0; i < size; i++) {
                int curNode = q.poll();
                
                for(int nextNode : graph.get(curNode) ) {
                    
                    if(parent.containsKey(curNode) ) {
                        // same line
                        if(parent.get(curNode) == nextNode) {
                            continue;
                        }
                        else if(parent.containsKey(nextNode)) {
                            return false;
                        }
                    }
                    
                    parent.put(nextNode, curNode);
                    q.offer(nextNode);
                    count++;
                   
                }
            }
        }
        
        if(count != n - 1) {
            return false;
        }
        return true;
    }
    
    public void buildGraph(Map<Integer, Set<Integer>> graph, int[][] edges) {
        for(int[] edge: edges) {
            
            graph.get(edge[0]).add(edge[1]);
            graph.get(edge[1]).add(edge[0]);             
        }
    }
}