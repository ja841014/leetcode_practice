/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int preOrderIdx;
    public TreeNode constructFromPrePost(int[] preorder, int[] postorder) {
        Map<Integer, Integer> postOrderMap = new HashMap<>();
        preOrderIdx = 0;
        for(int i = 0; i < postorder.length; i++) {
            postOrderMap.put(postorder[i], i);
        }

        return constuctTree(preorder, postOrderMap, 0, postorder.length - 1);
    }
    
    private TreeNode constuctTree(int[] preorder, Map<Integer, Integer> postOrderMap, int left, int right) {
        /**
        here have an exmpale
        preorder: [2,1]
        postorder: [1,2]
         */
        if(left > right) {
            return null;
        }

        TreeNode root = new TreeNode(preorder[preOrderIdx]);
        preOrderIdx++;

        /**
        If we do not early return, we might not get the value from postOrderMap at the end
         */
        if(left == right) {
            return root;
        }

        int idxForLeftTreeRightPtr = postOrderMap.get(preorder[preOrderIdx]);
        root.left = constuctTree(preorder, postOrderMap, left, idxForLeftTreeRightPtr);
        root.right = constuctTree(preorder, postOrderMap, idxForLeftTreeRightPtr + 1, right - 1);

        return root;
    }
}
