/*
Given the root of a binary search tree and a node p in it, return the in-order successor of that node in the BST. If the given node has no in-order successor in the tree, return null.

The successor of a node p is the node with the smallest key greater than p.val.
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    
     public TreeNode inorderSuccessor(TreeNode root, TreeNode p) {
         // if find the target root, we want to find it  in-order successor
         // it could be located at root.right or it could be located at its top 
         // therefore, we will go to "minNode" to see whether its root.right is null or not.
        if (root == p) {
            return minNode(root.right);
        }
        if (p.val > root.val) {
            return inorderSuccessor(root.right, p);
        } else {
            TreeNode temp = inorderSuccessor(root.left, p);
            return temp != null? temp : root;
        }
    }

    private TreeNode minNode(TreeNode root) {
        if (root == null) {
            return null;
        }
        return root.left == null? root : minNode(root.left);
    }
    
    
    // boolean find = false;
    // TreeNode targetNode = null;
    // public TreeNode inorderSuccessor(TreeNode root, TreeNode p) {
    //     int target = p.val;
    //     helper(root, target);
    //     return targetNode;
    // }
    // private void helper(TreeNode root, int target) {
    //     if(root == null) {
    //         return;
    //     }
    //     if(find == true) {
    //         return;
    //     }
    //     helper(root.left, target);
    //     if(root.val > target && find == false) {
    //         find = true;
    //         targetNode = root;
    //         return;
    //     }
    //     helper(root.right, target);
    // }
    
}