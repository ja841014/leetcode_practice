// prerequist - 98. Validate Binary Search Tree
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    public int largestBSTSubtree(TreeNode root) {
        if(root == null ) {
            return 0;
        }
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        int maxV = 1;
        while(!q.isEmpty()) {
            TreeNode node = q.poll();
            Pair<Boolean, Integer> p =  isValidBST(node, null, null, 1);
            if(node.left != null) {
                q.offer(node.left);
                if(p.getKey() == true) {
                    maxV = Math.max(maxV, p.getValue());
                }
            }
            if(node.right != null) {
                q.offer(node.right);
                if(p.getKey() == true) {
                    maxV = Math.max(maxV, p.getValue());
                }
            }
            
        }
        
        return maxV;
    }
    // Slightly different from  98. Validate Binary Search Tree 
    public Pair<Boolean, Integer> isValidBST(TreeNode node, Integer lower, Integer higher, int count) {
        if(node == null) {
            return new Pair<Boolean, Integer>(true, 0);
        } 
        if(lower != null && lower >= node.val ) {
            return new Pair<Boolean, Integer>(false,-1);
        }
        if(higher != null && higher <= node.val ) {
            return new Pair<Boolean, Integer>(false,-1);
        }
        Pair<Boolean, Integer> p_left = isValidBST(node.left, lower, node.val, count);
        
        if(!p_left.getKey()) {
            return new Pair<Boolean, Integer>(false,-1);
        }
        else {
            // this condition it means if we return from the "node == null" condition, we do not add one.
            // because the null node cannot count in the sub BST.
            if(p_left.getValue() != 0) {
                count = p_left.getValue() + 1;
            }
        }
        
        Pair<Boolean, Integer> p_right = isValidBST(node.right, node.val, higher, count);
        if(!p_right.getKey()) {
            return new Pair<Boolean, Integer>(false,-1);
        }
        else {
            if(p_right.getValue() != 0) {
                count = p_right.getValue() + 1;
            }
        }
        
        return new Pair<Boolean, Integer>(true, count);
    }
}

/* we will go the deepest first
public class Solution {
	private int max = 0;
	public int largestBSTSubtree(TreeNode root) {
    	helper(root);
    	return max;
    }
	
	//res[] = {size, smallest, largest};
	public int[] helper(TreeNode root) {
		int[] res = new int[3];
		if (root == null) {
			res[1] = Integer.MAX_VALUE;
			res[2] = Integer.MIN_VALUE;
			return res;
		}
		
		int[] left = helper(root.left);
		int[] right = helper(root.right);
		
		if (left[0] == -1 || right[0] == -1 || root.val <= left[2] || root.val >= right[1]) {
			res[0] = -1;
			return res;
		}
		
		res[0] = left[0] + right[0] + 1;
		max = Math.max(max, res[0]);
		res[1] = Math.min(left[1], root.val);
		res[2] = Math.max(right[2], root.val);
		
		return res;
	}
}

*/