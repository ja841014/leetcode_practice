// Given preorder and inorder traversal of a tree, construct the binary tree.

// Note:
// You may assume that duplicates do not exist in the tree.

// For example, given

// preorder = [3,9,20,15,7]
// inorder = [9,3,15,20,7]
// Return the following binary tree:

//     3
//    / \
//   9  20
//     /  \
//    15   7
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int count = 0;
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        // the first element in preorder is root
        Map<Integer, Integer> map = new HashMap<>();
        // build up the relationship of value and index HashMap
        for(int i = 0; i < preorder.length; i++) {
            map.put(inorder[i], i);
        }
        return helper(map, preorder, 0, inorder.length - 1);
    }
    
    public TreeNode helper( Map<Integer, Integer> map, int[] preorder,int left_ptr, int right_ptr) {
        
        if(left_ptr > right_ptr || left_ptr > preorder.length - 1 || right_ptr > preorder.length - 1) {
            return null;
        }
        // every time the count will plus 1
        TreeNode root = new TreeNode(preorder[count]);
        
        count++;
        int cur_index_in_inorder = map.get(root.val);
        root.left = helper(map, preorder, left_ptr, cur_index_in_inorder - 1);
        root.right = helper(map, preorder, cur_index_in_inorder + 1,  right_ptr);
        return root;
    }
}