/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int maxDepth = 0;
    int sum;
    public int deepestLeavesSum(TreeNode root) {
        sum = 0;
        int count = 0;
        findDeep(root, 0);
        
        return sum;
    }
    
    private void findDeep(TreeNode root, int depth) {
        if(root == null) {
            return;
        }
        // if we meet the leaf node then we check whether the depth is exceed the "maxDepth" or not
        if(root.left == null && root.right == null) {
            // if yes we rest the "sum", otherwise we accumulate it.
            if(depth > maxDepth) {
                maxDepth = depth;
                sum = root.val;
            }else if(depth == maxDepth) {
                sum += root.val;
            }
        }
        
        findDeep(root.left, depth + 1);
        findDeep(root.right, depth + 1);
    }
}