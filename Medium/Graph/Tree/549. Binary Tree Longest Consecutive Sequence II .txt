/*
Given the root of a binary tree, return the length of the longest consecutive path in the tree.
This path can be either increasing or decreasing.
For example, [1,2,3,4] and [4,3,2,1] are both considered valid, but the path [1,2,4,3] is not valid.
On the other hand, the path can be in the child-Parent-child order, where not necessarily be parent-child order.
 

Example 1:
Input: root = [1,2,3]
Output: 2
Explanation: The longest consecutive path is [1, 2] or [2, 1].

Example 2:
Input: root = [2,1,3]
Output: 3
Explanation: The longest consecutive path is [1, 2, 3] or [3, 2, 1].
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int maxL = 1;
    public int longestConsecutive(TreeNode root) {
        helper(root);
        return maxL;
    }
    
    public int[] helper(TreeNode root) {
        
        if(root == null) {
            return new int[]{0, 0};
        }
        
        int dec = 1;
        int inc = 1;
        
        if(root.left != null ) {
            int[] left = helper(root.left);
            // decrease
            if(root.left.val + 1 == root.val) {
                dec = left[0] + 1;
            }
            else if(root.left.val - 1 == root.val) {
                inc = left[1] + 1;
            }
        }
        if(root.right != null) {
            int[] right = helper(root.right);
            // decrease
            if(root.right.val + 1 == root.val) {
                // if we do not use "Math.max()"
                // we cannot pass this kind of testcase [2,3,3,null,4]
                // becasue the left side is loger than right side
                dec = Math.max(dec, right[0] + 1);
                // dec = right[0] + 1;
            }
            else if(root.right.val - 1 == root.val) {
                inc = Math.max(inc, right[1] + 1);
                // inc = right[1] + 1;
            }
        }
        maxL = Math.max(maxL, dec + inc - 1);
        return new int[]{dec, inc};
    }
}