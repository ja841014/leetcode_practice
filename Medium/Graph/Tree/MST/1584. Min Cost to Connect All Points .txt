// minimum spanning tree
class Solution {
    // int[] parent;
    int totaledge;
    public int minCostConnectPoints(int[][] points) {
        PriorityQueue<int[]> pq = new PriorityQueue<>((a,b) -> a[0] - b[0]);
        int distance = 0;
        totaledge = points.length;
        
        if(points.length == 1) {
            return 0;
        }
        // built up the map
        for(int i = 0; i < points.length; i++) {
            for(int j = i + 1; j < points.length; j++) {
                pq.add(new int[] {Math.abs(points[i][0] - points[j][0]) + Math.abs(points[i][1] - points[j][1]), i, j} );
            }
        }
        
        int[] parent = new int[points.length];
		//Initialize the parent with self
        for(int i = 0; i < points.length; i++){
            parent[i] = i;
        }
        
       while(pq.size()>0 && totaledge > 1){
            //get min 
            int[] curr = pq.remove();
			//We need to consider the new point if they have different parent
            if(getParent(curr[1],parent) != getParent(curr[2],parent)){
                distance = distance + curr[0];
                union(curr[1],curr[2], parent);
            }
        }
        
        return distance;
    }
    
    public void union(int x, int y, int[] parent){
        int xparent = getParent(x, parent);
        int yparent = getParent(y, parent);
        if(xparent != yparent){
            parent[yparent] = xparent;
            parent[y] = xparent;
            totaledge--;
        }
    }
    public int getParent(int x, int[] parent){
        if(x==parent[x]) return x;
        int newPar = getParent(parent[x], parent);
        parent[x] = newPar;
        return newPar;
    }
    
    
    
}