/*
Given a pattern and a string s, return true if s matches the pattern.

A string s matches a pattern if there is some bijective mapping of single characters to strings such that if each character in pattern is replaced by the string it maps to, then the resulting string is s. A bijective mapping means that no two characters map to the same string, and no character maps to two different strings.

 

Example 1:

Input: pattern = "abab", s = "redblueredblue"
Output: true
Explanation: One possible mapping is as follows:
'a' -> "red"
'b' -> "blue"
Example 2:

Input: pattern = "aaaa", s = "asdasdasdasd"
Output: true
Explanation: One possible mapping is as follows:
'a' -> "asd"
Example 3:

Input: pattern = "abab", s = "asdasdasdasd"
Output: true
Explanation: One possible mapping is as follows:
'a' -> "a"
'b' -> "sdasd"
Note that 'a' and 'b' cannot both map to "asd" since the mapping is a bijection.
Example 4:

Input: pattern = "aabb", s = "xyzabcxzyabc"
Output: false

*/
class Solution {
    public boolean wordPatternMatch(String pattern, String s) {
        Map<Character, String> map = new HashMap<>();
        char[] patternArr = pattern.toCharArray();
        char[] sArr = s.toCharArray();
        return  helper(map, patternArr, 0, s);
    }
    
    public boolean helper(Map<Character, String> map, char[] patternArr, int patternIdx, String s) {
        if(patternIdx == patternArr.length && s.isEmpty() ) {
            // System.out.println("first:" + patternIdx + " " + index);
            return true;
        }
        else if(patternIdx != patternArr.length && s.isEmpty() ) {
            // System.out.println("second:" + patternIdx + " " + index + " " + map.get('a') + " " + map.get('b'));
            return false;
        }
        else if(patternIdx == patternArr.length && !s.isEmpty() ) {
            // System.out.println("third:" + patternIdx + " " + index);
            return false;
        }
        
        
        // contains the pattern word
        if(map.containsKey(patternArr[patternIdx]) ) {
            String patt = map.get(patternArr[patternIdx]);
            if(s.startsWith(patt) == true ) {
                String nxtStr = s.substring(patt.length());
                return helper(map, patternArr, patternIdx + 1, nxtStr );
            }
            else {
                return false;
            }
        }
        
        // do not contains the pattern words
        for(int i = 0; i < s.length(); i++) {

            String nxtStr = s.substring(0, i + 1);
            // because it is bijection mapping
            if(map.containsValue(nxtStr) == true) {
                continue;
            }
            map.put(patternArr[patternIdx], nxtStr);
            boolean isValid = helper(map, patternArr, patternIdx + 1, s.substring(nxtStr.length()) );
            if(isValid) {
                return true;
            }
            map.remove(patternArr[patternIdx]);            
        }

        return false;
    }
    
    
}