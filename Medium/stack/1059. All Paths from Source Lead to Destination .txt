/*
Given the edges of a directed graph where edges[i] = [ai, bi] indicates there is an edge between nodes ai and bi, and two nodes source and destination of this graph, determine whether or not all paths starting from source eventually, end at destination, that is:
At least one path exists from the source node to the destination node
If a path exists from the source node to a node with no outgoing edges, then that node is equal to destination.
The number of possible paths from source to destination is a finite number.
Return true if and only if all roads from source lead to destination.


*/
class Solution {
    public boolean leadsToDestination(int n, int[][] edges, int source, int destination) {
        Map<Integer, List<Integer>> edgeMap = new HashMap<>();
        boolean[] visited = new boolean[n];
        for(int[] edge: edges) {
            edgeMap.putIfAbsent(edge[0], new ArrayList<>());
            // we cannot detect here
            // because we have this kind of testcase 
            /* 6 vetices
            [[0,1],[0,2],[1,3],[2,3],[4,5],[5,4]]
            start = 0
            end = 3
            */
            // detect self-loop
            // if(edge[0] == edge[1]) {
            //     return false;
            // }
            edgeMap.get(edge[0]).add(edge[1]);
        }

        return dfs(edges, edgeMap, destination, source,  visited);
        
    }
    
    private boolean dfs(int[][] edges, Map<Integer, List<Integer>> edgeMap, int target, int curNode,  boolean[] visited) {
        
        // check the end point whether it is equal to target or not
        if(!edgeMap.containsKey(curNode)) {
            if( curNode != target ) {
                return false;
            }
            else {
                return true;
            }
        }
        
        // check the cycle
        if(visited[curNode] == true) {
            return false;
        }
        
        visited[curNode] = true;
        for(int nextNode : edgeMap.get(curNode)) {
           if(dfs(edges, edgeMap, target, nextNode,  visited) == false) {
               return false;
           }
        }
        visited[curNode] = false;
        
        return true;
    }
}