// dfs or bfs border detection
class Solution {
    private int[][] directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
    private int boardX;
    private int boardY;
    Set<String> seen;
    
    public void solve(char[][] board) {
        // if we can found the 'o' which set on the boarder then that set will not be capture
        boardX = board.length;
        boardY = board[0].length;
        seen = new HashSet<>();
        
        for(int i = 0; i < boardX; i++) {
            for(int j = 0; j < boardY; j++ ) {
                if(board[i][j] == 'O' && seen.contains(i + "," + j) == false) {
                    dfs(board, i, j);
                }
            }
        }
        
    }
    
    private void dfs(char[][] board, int x, int y) {
        Stack<int[]> st = new Stack<>();
        Set<int[]> recordPattern = new HashSet<>();
        boolean atBoarder = false;
        
        atBoarder = isBoarder(x, y);
        st.push(new int[]{x, y});
        seen.add(x + "," + y);
        recordPattern.add(new int[]{x, y});
        
        while(!st.isEmpty()) {
            
            int[] cur = st.pop();
            for(int[] dir : directions) {
                int nextX = cur[0] + dir[0];
                int nextY = cur[1] + dir[1];
                String check = nextX + "," + nextY;
                
                if(isValid(nextX, nextY) == true && seen.contains(check) == false && board[nextX][nextY] == 'O') {
                    if(atBoarder == false) {
                        atBoarder = isBoarder(nextX, nextY);
                    }
                    st.push(new int[]{nextX, nextY});
                    seen.add(check);
                    recordPattern.add(new int[]{nextX, nextY});
                }
            }            
        }
        
                
        // does this pattern be captured
        if(atBoarder == false) {
            process(recordPattern, board);
        }
        // if no do function
        // if yes do nothing
    }
    
    
    private void process(Set<int[]> recordPattern, char[][] board ) {
        for(int[] pos : recordPattern) {
            // System.out.println(pos[0] + "," + pos[1]);
            board[pos[0]][pos[1]] = 'X';
        }
    }
    
    
    private boolean isBoarder(int x, int y) {
        if(x == 0 || x == boardX - 1 || y == 0 || y == boardY - 1) {
            return true;
        }
        return false;
    }
    
    
    
    private boolean isValid(int x, int y) {
        if(x >= 0 && x < boardX && y >= 0 && y < boardY) {
            return true;
        }
        return false;
    }
    
}