/*
Given a list of accounts where each element accounts[i] is a list of strings, where the first element accounts[i][0] is a name, and the rest of the elements are emails representing emails of the account.

Now, we would like to merge these accounts. Two accounts definitely belong to the same person if there is some common email to both accounts. Note that even if two accounts have the same name, they may belong to different people as people could have the same name. A person can have any number of accounts initially, but all of their accounts definitely have the same name.

After merging the accounts, return the accounts in the following format: the first element of each account is the name, and the rest of the elements are emails in sorted order. The accounts themselves can be returned in any order.
*/
class Solution {
    public List<List<String>> accountsMerge(List<List<String>> accounts) {
        Map<String, Set<String>> emailGraph = new HashMap<>();
        Map<String, String> emailToUser = new HashMap<>();
        
        List<List<String>> res = new ArrayList<>();
        
        for(List<String> account: accounts) {
            String name = "";
            for(String emails: account) {
                if(name.equals("")) {
                    name = emails;
                    continue;
                }
                // we link the all other emails to first email address.
                emailGraph.computeIfAbsent(emails, k -> new HashSet<>()).add(account.get(1));
                emailGraph.computeIfAbsent(account.get(1), k -> new HashSet<>()).add(emails);
                // we seperate the all email and link to its user.
                emailToUser.put(emails, name);
            }
        }
        
        
        dfs(emailGraph, emailToUser, res);
        return res;
        
        
        
        
    }
    
    
    private void dfs(Map<String, Set<String>> emailGraph, Map<String, String> emailToUser, List<List<String>> res) {
        Set<String> seen = new HashSet<>();
        
        // go through all the email by dfs
        for(String mail: emailGraph.keySet()) {
            
            if(!seen.contains(mail)) {
                
                Stack<String> st = new Stack<>();
                st.push(mail);
                seen.add(mail);
                List<String> mergeAccount = new ArrayList<>();
                // dfs start
                while(!st.isEmpty()) {
                    
                    String curMail = st.pop();
                    mergeAccount.add(curMail);
                    
                    for(String emailList: emailGraph.get(curMail)) {
                        if(!seen.contains(emailList)) {
                            st.push(emailList);
                            seen.add(emailList);
                // we cannot put at here because it will be filterd out by the if statement above, there is a situation that emailGraph key and value is the same.
                            // mergeAccount.add(emailList);
                        }
                        
                    }
                    
                }
                
                Collections.sort(mergeAccount);
                mergeAccount.add(0, emailToUser.get(mail));
                res.add(mergeAccount);
                
            }
        }
        
        
    }
    
    
}