/*
if we can define our own pair class might be reduce the runtime
Given a string s, a k duplicate removal consists of choosing k adjacent and equal letters from s and removing them causing the left and the right side of the deleted substring to concatenate together.
We repeatedly make k duplicate removals on s until we no longer can.
Return the final string after all such duplicate removals have been made.
It is guaranteed that the answer is unique.
 
Example 1:
Input: s = "abcd", k = 2
Output: "abcd"
Explanation: There's nothing to delete.

Example 2:
Input: s = "deeedbbcccbdaa", k = 3
Output: "aa"
Explanation: 
First delete "eee" and "ccc", get "ddbbbdaa"
Then delete "bbb", get "dddaa"
Finally delete "ddd", get "aa"

Example 3:
Input: s = "pbbcggttciiippooaais", k = 2
Output: "ps"
*/
class Solution {
    public String removeDuplicates(String s, int k) {
        Stack<Pair<Character, Integer>> st = new Stack<>();
        for(int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if(st.isEmpty() || c != st.peek().getKey() ) {
                st.push(new Pair(c, 1));
                continue;
            }
            
            if(c == st.peek().getKey()) {
                Pair<Character, Integer> p = st.pop();
                int num = p.getValue();
                if(num + 1 == k) {
                    continue;
                }
                st.push(new Pair(p.getKey(), num + 1));
            }
            
        }
        StringBuilder sb = new StringBuilder();
        while(!st.isEmpty()) {
            Pair<Character, Integer> tmp = st.pop();
            for(int i = 0; i < tmp.getValue(); i++) {
                sb.append(tmp.getKey());
            }
            
        }
        return sb.reverse().toString();
    }
}