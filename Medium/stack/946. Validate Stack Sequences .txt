/*
Given two sequences pushed and popped with distinct values, return true if and only if this could have been the result of a sequence of push and pop operations on an initially empty stack.

Example 1:
Input: pushed = [1,2,3,4,5], popped = [4,5,3,2,1]
Output: true
Explanation: We might do the following sequence:
push(1), push(2), push(3), push(4), pop() -> 4,
push(5), pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1

Example 2:
Input: pushed = [1,2,3,4,5], popped = [4,3,5,1,2]
Output: false
Explanation: 1 cannot be popped before 2.
*/

class Solution {
    public boolean validateStackSequences(int[] pushed, int[] popped) {
        if(pushed.length == 0) {
            return true;
        }
        Stack<Integer> st = new Stack<>();
        int pushIndex = 0;
        int popIndex = 0;
        // we will traverse all pushed array
        while(pushIndex < pushed.length ) {
            if(st.isEmpty() || st.peek() != popped[popIndex]) {
                st.push(pushed[pushIndex]);
                pushIndex++;
            }
            // if the peek element is equal to popped[index], the stack will pop out
            while( !st.isEmpty() && st.peek() == popped[popIndex]) {
                st.pop();
                popIndex++;
            }
        }
        if(popIndex != popped.length) {
            return false;
        }
        return true;
    }
}