/*
You are given a 0-indexed integer array nums. In one step, remove all elements nums[i] where nums[i - 1] > nums[i] for all 0 < i < nums.length.
Return the number of steps performed until nums becomes a non-decreasing array.

Example 1:
Input: nums = [5,3,4,4,7,3,6,11,8,5,11]
Output: 3
Explanation: The following are the steps performed:
- Step 1: [5,3,4,4,7,3,6,11,8,5,11] becomes [5,4,4,7,6,11,11]
- Step 2: [5,4,4,7,6,11,11] becomes [5,4,7,11,11]
- Step 3: [5,4,7,11,11] becomes [5,7,11,11]
[5,7,11,11] is a non-decreasing array. Therefore, we return 3.

Example 2:
Input: nums = [4,5,7,7,13]
Output: 0
Explanation: nums is already a non-decreasing array. Therefore, we return 0.
*/
class Solution {
    public int totalSteps(int[] nums) {
        Stack<Node> st = new Stack<>();
        int res = Integer.MIN_VALUE;
        for(int i = nums.length - 1; i >= 0; i--) {
            if(st.isEmpty()) {
                st.push(new Node(nums[i], 0) );
            }
            else {
                int localMax = 0;
                boolean flag = false;
                while(!st.isEmpty() && st.peek().val < nums[i] ) {
                    //System.out.println(st.peek().val +"," + st.peek().freq);
                    Node curNode = st.pop();
                    localMax++;
                    if(localMax < curNode.freq) {
                        localMax  = curNode.freq; 
                        
                    }
                }
                st.push(new Node(nums[i], localMax));
                res = Math.max(res, localMax);
                
            }
        }
        if(res == Integer.MIN_VALUE) {
            return 0;
        }
        return res;
    }
    
    private class Node {
        int val; 
        int freq;
        public Node(int val, int freq) {
            this.val = val;
            this.freq = freq;
            
        }
    }
}

/*
[7,14,4,14,13,2,6,13]
[7,14,14,6,13]
[7,14,14,13]
[7,14,14]
*/