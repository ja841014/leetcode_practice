/*
Let's call any (contiguous) subarray B (of A) a mountain if the following properties hold:

B.length >= 3
There exists some 0 < i < B.length - 1 such that B[0] < B[1] < ... B[i-1] < B[i] > B[i+1] > ... > B[B.length - 1]
(Note that B could be any subarray of A, including the entire array A.)
Given an array A of integers, return the length of the longest mountain. 
Return 0 if there is no mountain.

Example 1:

Input: [2,1,4,7,3,2,5]
Output: 5
Explanation: The largest mountain is [1,4,7,3,2] which has length 5.
Example 2:

Input: [2,2,2]
Output: 0
Explanation: There is no mountain.
*/
class Solution {
    public int longestMountain(int[] A) {
        //int[] table = new int[A.length];
        int max = 0;
        for(int mid = 1; mid < A.length - 1; mid++) {
            int down = downhill(A, mid);
            int up = uphill(A, mid);
            if(down != 0 && up != 0) {
                max = Math.max(max, down + up + 1);
            }
        }
        return max;
    }

    // [0,1,2,3,2,1] this testcase answer is 6 not 5
    private int downhill(int[] A, int currIndex) {
        int size = 0;
        while(currIndex - 1 >= 0 && A[currIndex] > A[currIndex - 1]) {
            size++;
            currIndex--;
        }
        return size;
    }
    
    private int uphill(int[] A, int currIndex) {
        int size = 0;
        while(currIndex + 1 < A.length && A[currIndex] > A[currIndex + 1]) {
            size++;
            currIndex++;
        }
        return size;
    }
    
}

/* better approach one pass O(n)
class Solution {
    public int longestMountain(int[] A) {
        int result = 0;
        if(A==null || A.length<3) return result;
        int i = 1;
        int start = 0;
        boolean upHill = false;
        boolean downHill = false;
        while(i<A.length){
            start = i-1;
            //go uphill
            while(i<A.length && A[i-1]<A[i]){
                upHill=true;
                i++;
            }
            //go downhill
            while(i<A.length && A[i-1]>A[i]){
                downHill=true;
                i++;
            }
			
            //if found uphill and downhill then there was mountain 
            if(upHill && downHill){
                //only update when mountain size was equal or greater than 3
                if(i-start>=3)result = Math.max(i-start,result);
            }else{
                //if there was no mountain, then ensuring it's not plain surface
                while(i<A.length && A[i-1]==A[i])i++;
            }
            
            //update uphill and downhill for next iteration.
            upHill = false;
            downHill = false;
        }
        return result;
    }
}
*/