/*
Given a binary array nums and an integer goal, return the number of non-empty subarrays with a sum goal.
A subarray is a contiguous part of the array.

Example 1:
Input: nums = [1,0,1,0,1], goal = 2
Output: 4
Explanation: The 4 subarrays are bolded and underlined below:
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]

Example 2:
Input: nums = [0,0,0,0,0], goal = 0
Output: 15
*/
class Solution {
    // this is prefix sum version => we can use sliding window to solve this question as well
    public int numSubarraysWithSum(int[] nums, int goal) {
        int[] prefixSum = new int[nums.length + 1];
        Map<Integer, Integer> map = new HashMap<>();
        
        // prefix sum
        for(int i = 0; i < nums.length; i++) {
            prefixSum[i + 1] =  prefixSum[i] + nums[i];
            
        }
        int res = 0;
        for(int i : prefixSum) {
            res = res + map.getOrDefault(i, 0);
            // update for future use
            map.put(i + goal, map.getOrDefault(i + goal, 0) + 1 );
        }
        
        return res;
    }
}