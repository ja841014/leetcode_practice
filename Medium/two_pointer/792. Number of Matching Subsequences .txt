/*
Given a string s and an array of strings words, return the number of words[i] that is a subsequence of s.
A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.
For example, "ace" is a subsequence of "abcde".
 

Example 1:
Input: s = "abcde", words = ["a","bb","acd","ace"]
Output: 3
Explanation: There are three strings in words that are a subsequence of s: "a", "acd", "ace".

Example 2:
Input: s = "dsahjpjauf", words = ["ahjpjau","ja","ahbwzgqnuk","tnmlanowax"]
Output: 2
*/
class Solution {
    public int numMatchingSubseq(String s, String[] words) {
        
        int res = 0;
        List<Node>[] cache = new ArrayList[26];
        // initialize
        for(int i = 0; i < 26; i++) {
            cache[i] = new ArrayList<>();
        }
        
        for(String str: words) {
            char firstCharacter = str.charAt(0);
            // build up base case
            // Node: {str: original string, index: 0}
            cache[firstCharacter - 'a'].add(new Node(str, 0));
        }
        
        // This is a very brilliant method, we do not need compare the original str and the words in expilcit way, we compare parallel
        // traverse "s"
        for(int i = 0; i < s.length(); i++) {
            char curChar = s.charAt(i);
            
            List<Node> oldBucket = cache[curChar - 'a'];
            cache[curChar - 'a'] = new ArrayList<>();
            
            for(Node curNode : oldBucket) {
                curNode.index++;
                // if we found that the length equals to the index => means this words is target string subsequence
                if(curNode.isStrSizeSameAsIdx()) {
                    res++;
                }
                else {
                    char nextChar = curNode.getChar(curNode.index);
                    cache[nextChar - 'a'].add(curNode);
                }
            }
        }
        return res;

    }
    
    public class Node {
        String str;
        int index;
        public Node(String str, int index) {
            this.str = str;
            this.index = index;
        }
        
        public char getChar(int index) {
            return str.charAt(index);
        }
        
        public boolean isStrSizeSameAsIdx() {
            return str.length() == index;
        }
    }
//     public int numMatchingSubseq(String s, String[] words) {
//         int count = 0;
//         // there is a testcase contains lots of same input
//         Map<String, Boolean> memo = new HashMap<>();
//         for(String str : words) {
//             if(memo.containsKey(str)) {
//                 if(memo.get(str) == true) {
//                     count++;
                    
//                 }
//                 continue;
                
//             }
            
//             if( check(s, str) ) {
//                 memo.put(str, true);
//                 count++;
//             }
//             else {
//                 memo.put(str, false);
//             }
           
//         }
//         return count;
        
//     }
    
//     private boolean check(String org, String sub) {
//         if(sub.length() > org.length()) {
//             return false;
//         }
//         int cnt1 = 0;
//         int cnt2 = 0;
//         while(cnt1 != org.length() && cnt2 != sub.length()) {
//             if(org.charAt(cnt1) == sub.charAt(cnt2) ) {
//                 cnt2++;
//                 cnt1++;
//             }
//             else {
//                 cnt1++;
//             }
//         }
//         if(cnt2 == sub.length()) {
//             return true;
//         }
//         return false;
//     }
    
}