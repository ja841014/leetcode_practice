/*
You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once. Find this single element that appears only once.

O(logN) 
class Solution {

    public int singleNonDuplicate(int[] nums) {
        return binarySearch(nums);

    }

    private int binarySearch(int[] nums) {
        int right = nums.length - 1;
        int left = 0;
        
        while(left < right) {
            int mid = (right - left) / 2 + left;
            // partner is on its right
            // ..oooo44ooo..
            //       x 
            if(nums[mid] == nums[mid + 1]) {
                
                if(mid % 2 == 0) {
                    // oooo44ooo
                    //     x 
                    // ex : (9 - 0) / 2 + 0 = (int)4
                    left = mid + 2;
                }
                else {
                    //ooooo44oooo
                    //     x
                    // ex: (11 - 0) / 2 + 0 = (int)5
                    right = mid - 1;
                }
            }
            else if(nums[mid] == nums[mid - 1]) {
                // partner is on its left
                // ..ooo44oooo..
                //       x 
                if(mid % 2 == 0) {
                    // ooo44oooo
                    //     x 
                    // ex : (9 - 0) / 2 + 0 = (int)4
                    right = mid - 2;
                }
                else {
                    // oooo44ooooo
                    //      x 
                    // ex : (11 - 0) / 2 + 0 = (int)5
                    left = mid + 1;
                }
            }
            else {
                return nums[mid];
            }
        }
        return nums[left];
    }
}


Example 1:

Input: [1,1,2,3,3,4,4,8,8]
Output: 2
Example 2:

Input: [3,3,7,7,10,11,11]
Output: 10
*/
class Solution {
    public int singleNonDuplicate(int[] nums) {
        
        int pre = nums[0];
        int count = 0;
        if(nums.length == 1) {
            return nums[0];
        }
        for(int i = 1 ; i < nums.length; i++) {
            int cur = nums[i];
            if(pre == cur) {
                count++;
            }
            else {
                if(count != 0) {
                    pre = cur;
                    count = 0;
                }
                else {
                    count = pre;
                    break;
                }
                if(i + 1 == nums.length) {
                    count = pre;
                    break;
                }
            }
            
        }
        return count;
        // Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        // for(int i = 0; i < nums.length; i++) {
        //     map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);
        // }
        // for(int j = 0; j < nums.length; j++) {
        //     if(map.get(nums[j]) == 1) {
        //         return nums[j];
        //     }
        // }
        // return 0;
    }
}
