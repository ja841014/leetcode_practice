class Solution {
    public int findCircleNum(int[][] M) {
        // Method 1 BFS
//         Queue<Integer> q = new LinkedList<>();
//         boolean[] visited = new boolean[M.length];
//         int cnt = 0;
        
//         for(int i = 0; i < M.length; i++) {
//             if(visited[i] == false) {
//                 q.offer(i);
//                 while(!q.isEmpty()) {
//                     int tmp = q.poll();
//                     visited[tmp] = true;
//                     for(int j = 0; j < M[0].length; j++) {
//                         if(M[tmp][j] == 1 && visited[j] == false) {
//                             q.offer(j);
//                         }                
//                     }
//                 }
//                 cnt++;
//             }            
//         }
//         return cnt;
        
        // union find
        int cnt = 0;
        int[] table = new int[M.length];
        for(int i = 0; i < M.length; i++ ) {
            table[i] = i;
        }
        
        for(int i = 0; i < M.length; i++) {
            for(int j = 0; j < M[0].length; j++) {
                if(M[i][j] == 1) {
                    Union(i, j, table);
                }
            }
        }
        
        for(int i = 0; i < M.length; i++) {
            if(i == table[i]) {
                cnt++;
            }
        }
        return cnt;
        
    }
    
    private int getParent(int x, int[] table) {
        // !! table的值是此index的parent,所以若不相等 要用這個table值去找上一層parent
        if(x == table[x]) {
            return x;
        }
        int newParent = getParent(table[x], table);
        table[x] = newParent;
        return newParent;
    }
    
    private void Union(int i, int j, int[] table) {
        int iParent = getParent(i, table);
        int jParent = getParent(j, table);
        if(iParent > jParent) {
            table[iParent] = jParent;
        }
        else if(iParent < jParent) {
            table[jParent] = iParent;
        }
    }
}