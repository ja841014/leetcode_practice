/*
we don't need to consider when A[i] goes down while A[j] goes up. This is because the interval (A[i] + K, A[j] - K) is a subset of (A[i] - K, A[j] + K)

Given an array A of integers, for each integer A[i] we need to choose either x = -K or x = K, and add x to A[i] (only once).

After this process, we have some array B.

Return the smallest possible difference between the maximum value of B and the minimum value of B.

Example 1:
Input: A = [1], K = 0
Output: 0
Explanation: B = [1]

Example 2:
Input: A = [0,10], K = 2
Output: 6
Explanation: B = [2,8]

Example 3:
Input: A = [1,3,6], K = 3
Output: 3
Explanation: B = [4,6,3]
*/
class Solution {
    public int smallestRangeII(int[] A, int K) {
        Arrays.sort(A);
        int small = A[0];
        int big = A[A.length - 1];
        int orgDiff = big - small;
        
        for(int i = 0; i < A.length - 1; i++) {
            int tmpBig = Math.max(big - K, A[i] + K);
            int tmpSmall = Math.min(small + K, A[i + 1] - K);
            
            orgDiff = Math.min(orgDiff , tmpBig - tmpSmall);
        }
        return orgDiff;
    }
}