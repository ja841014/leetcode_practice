// using minheap to track the earliest finished time and to see the next tine frame whether can use pld room or have to open a new room.
// Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si < ei), find the minimum number of conference rooms required.

// Example 1:
// Input: [[0, 30],[5, 10],[15, 20]]
// Output: 2
    
// Example 2:
// Input: [[7,10],[2,4]]
// Output: 1
class Solution {
    public int minMeetingRooms(int[][] intervals) {
        if(intervals.length == 0) {
            return 0;
        }
        int room = 1;
        Arrays.sort(intervals, (a, b) -> a[0] - b[0]);
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        // pq.offer(intervals[0][1]);
        for(int i = 0; i < intervals.length; i++) {
            if(pq.size() == 0 || pq.peek() > intervals[i][0]) {
                pq.offer(intervals[i][1]);
                // room++;
            }
            else {
                room = Math.max(room, pq.size());
                pq.poll();
                pq.offer(intervals[i][1]);
            }
        }
        room = Math.max(room, pq.size());
    return room;
        
    }
    
}