/*
There is an integer array nums sorted in ascending order (with distinct values).
Prior to being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].
Given the array nums after the rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.
You must write an algorithm with O(log n) runtime complexity.

Example 1:
Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4

Example 2:
Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1

Example 3:
Input: nums = [1], target = 0
Output: -1
*/
class Solution {
    public int search(int[] nums, int target) {
        int stopIndex = 1;
        while(stopIndex != nums.length) {
            if(nums[stopIndex - 1] > nums[stopIndex]) {
                break;
            }
            stopIndex++;
        }
        if(stopIndex == nums.length) {
            stopIndex = stopIndex - 1;
        }
        int first = binarySearch(nums, 0, stopIndex, target);
        if(first != -1) {
            return first;
        }
        int second = binarySearch(nums, stopIndex, nums.length - 1, target);
        
        return second != -1 ? second : -1;
                
    }
    public int binarySearch(int[] nums, int left, int right, int target) {
        
        while(left < right) {
            int mid = (right - left) / 2 + left;
            if(nums[mid] < target) {
                left = mid + 1;
            }
            else {
                right = mid;
            }
        }
        if(nums[left] == target) {
            return left;
        }
        return -1;
    }
}