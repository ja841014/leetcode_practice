/*
Given a matrix mat where every row is sorted in strictly increasing order, return the smallest common element in all rows.
If there is no common element, return -1.

Example 1:

Input: mat = [[1,2,3,4,5],[2,4,5,8,10],[3,5,7,9,11],[1,3,5,7,9]]
Output: 5
*/
class Solution {
    public int smallestCommonElement(int[][] mat) {
        
        // method two : use trverse all array verticaly
        int[] positionRecord = new int[mat.length];
        int curMax = 0;
        int cnt = 1;
        while(true) {
            for(int i = 0; i < mat.length; i++) {
                while(positionRecord[i] < mat[i].length && mat[i][positionRecord[i]] < curMax) {
                    positionRecord[i]++;
                }
                
                if(positionRecord[i] > mat[0].length - 1) {
                    return -1;
                }
                
                if(mat[i][positionRecord[i]] > curMax) {
                    curMax = mat[i][positionRecord[i]];
                    cnt = 1;
                }
                else if(++cnt == mat.length) {
                    return curMax;
                }
                
            }
        }
        
        
        
        // Method 1 : count every element appear frequency
//         Map<Integer, Integer> map = new HashMap<>();
//         int result = Integer.MAX_VALUE;
//         for(int[] arr : mat) {
//             for(int i : arr) {
//                 map.put(i, map.getOrDefault(i, 0) + 1);
//             }
//         }
        
//         for(int i : map.keySet()) {
//             if(map.get(i) == mat.length && i < result) {
//                 result = i;
//             }
//         }
//         return result == Integer.MAX_VALUE ? -1 : result;
    }
}