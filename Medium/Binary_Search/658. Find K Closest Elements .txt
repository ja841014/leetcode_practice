/*
Given a sorted integer array arr, two integers k and x, return the k closest integers to x in the array. The result should also be sorted in ascending order.

An integer a is closer to x than an integer b if:

|a - x| < |b - x|, or
|a - x| == |b - x| and a < b
 

Example 1:

Input: arr = [1,2,3,4,5], k = 4, x = 3
Output: [1,2,3,4]
Example 2:

Input: arr = [1,2,3,4,5], k = 4, x = -1
Output: [1,2,3,4]
*/
class Solution {
    public List<Integer> findClosestElements(int[] arr, int k, int x) {
        List<Integer> result = new ArrayList<>();
        // left index and right index
        int left = 0;
        int right = arr.length - k;
        int mid = -1;
        //我要找的是k個最近x值的第一個數
        while(left < right) {
            mid = (right - left) / 2 + left;
            System.out.println(left + " " + mid + " " + right + " " + arr[mid] + " " + arr[mid + k]);
            // 我要把x值盡量地擺在arr[mid]和arr[mid + k]中間
            if(x - arr[mid] > arr[mid + k] - x) {
                left = mid + 1;
            }
            else {
                right = mid;
            }
            
        }
        
        List<Integer> results = new ArrayList<Integer>();
        for(int i = left; i < left + k; i++){
            results.add(arr[i]);
        }
        return results;
        
    }
}

/*
1   2   3   4   5   6   7   9   12
k: need 3 elements
x: target: 2
* means arr[mid] ~ arr[mid + k]
0           3           6
-   =   -   -   -   -   -   -   -
            *           *

0   1       3
-   =   -   -   -   -   -   -   -
    *           *

0   
0   1
-   =   -   -   -   -   -   -   -
*           *
*/
/*
x - arr[mid] > arr[mid+k]-x

case I:
(1)   4        7   1-4 > 7-1 ?  => -3 不大於 6 所以end往左移
      |--------|
case II:
1 (3)    7         3-1 > 7-3 ? => 2 不大於 4  所以end往左移
|--------|

case III:
1         7    (15)   15-1 > 7-15?    => 14 > -8 所以start往右移
|---------|



*/