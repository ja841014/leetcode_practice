/*
Given an array nums of integers, return the length of the longest arithmetic subsequence in nums.
Recall that a subsequence of an array nums is a list nums[i1], nums[i2], ..., nums[ik] with 0 <= i1 < i2 < ... < ik <= nums.length - 1, and that a sequence seq is arithmetic if seq[i+1] - seq[i] are all the same value (for 0 <= i < seq.length - 1).

Example 1:
Input: nums = [3,6,9,12]
Output: 4
Explanation: 
The whole array is an arithmetic sequence with steps of length = 3.

Example 2:
Input: nums = [9,4,7,2,10]
Output: 3
Explanation: 
The longest arithmetic subsequence is [4,7,10].

Example 3:
Input: nums = [20,1,15,3,10,5,8]
Output: 4
Explanation: 
The longest arithmetic subsequence is [20,15,10,5].
*/
class Solution {
    public int longestArithSeqLength(int[] nums) {
        int size = nums.length;
        int[][] table = new int[size][size];
        // 這個array當成"seen" 在nums 出現過的數字標記他的index, 沒出現過的都是-1
        int[] index = new int[500 * 2 + 1];
        Arrays.fill(index, -1);
        
        int max = 2;
        
        for(int i = 0; i < size; i++ ) {
            Arrays.fill(table[i], 2);
            for(int j = i + 1; j < size; j++) {
                // this only meet the nums[i] >= 0
                // if we want to handle nums[i] < 0 cases we have to shift our value.
                int val = 2 * nums[i] - nums[j];
                // we do not have any negative index
                if(val < 0 || index[val] == -1) {
                    continue;
                }
                //take val from number index as row & column as i
                table[i][j] = table[ index[val] ][i] +1; 
                max = Math.max(max, table[i][j]);
            }
            index[nums[i]] = i;
        }
        return max;
    }
}