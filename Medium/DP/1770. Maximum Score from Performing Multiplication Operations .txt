/*
You are given two integer arrays nums and multipliers of size n and m respectively, where n >= m. The arrays are 1-indexed.
You begin with a score of 0. You want to perform exactly m operations. On the ith operation (1-indexed), you will:
Choose one integer x from either the start or the end of the array nums.
Add multipliers[i] * x to your score.
Remove x from the array nums.
Return the maximum score after performing m operations.

Example 1:
Input: nums = [1,2,3], multipliers = [3,2,1]
Output: 14
Explanation: An optimal solution is as follows:
- Choose from the end, [1,2,3], adding 3 * 3 = 9 to the score.
- Choose from the end, [1,2], adding 2 * 2 = 4 to the score.
- Choose from the end, [1], adding 1 * 1 = 1 to the score.
The total score is 9 + 4 + 1 = 14.

Example 2:
Input: nums = [-5,-3,-3,-2,7,1], multipliers = [-10,-5,3,4,6]
Output: 102
Explanation: An optimal solution is as follows:
- Choose from the start, [-5,-3,-3,-2,7,1], adding -5 * -10 = 50 to the score.
- Choose from the start, [-3,-3,-2,7,1], adding -3 * -5 = 15 to the score.
- Choose from the start, [-3,-2,7,1], adding -3 * 3 = -9 to the score.
- Choose from the end, [-2,7,1], adding 1 * 4 = 4 to the score.
- Choose from the end, [-2,7], adding 7 * 6 = 42 to the score. 
The total score is 50 + 15 - 9 + 4 + 42 = 102.
*/
class Solution {
    // Integer[][] table;
    public int maximumScore(int[] nums, int[] multipliers) {
        // maxScore by using k multipliers and i elements in the front and j elements on the back
        // j = k - i;
        // maxScore[k][i]
        // 
        // choice is either front element nums[i - 1] or back element nums[n - j]
        // multipliers[k - 1] * nums[i - 1] or 
        // multipliers[k - 1] * nums[n - m - i]
        // maxScore[k][i]=max(maxScore[k - 1][i - 1] + multipliers[k - 1] * nums[i - 1],
        //              maxScore[k - 1][i] + multipliers[k - 1] * nums[n - k + i])
        // 
        
        int numsSize = nums.length;
        int multSize = multipliers.length;
        
        int[][] dpTable = new int[multSize + 1][multSize + 1];
        // initialization:
        // maxScore[0][i] = 0
        // no elements used
        // k from 1 to m, i from 0 to m
        // ans = max(maxScore[m][i])
        for(int k = 1; k <= multipliers.length; k++) {
            for(int left = 0; left <= k; left++) {
                // "left" elements in the front, "right" elements in the back
                int right = k - left;
                
                int takeLeft = left == 0 ? 
                    Integer.MIN_VALUE : nums[left - 1] * multipliers[k - 1] + dpTable[k - 1][left - 1];
                    
                int takeRight = right == 0 ? 
                    Integer.MIN_VALUE : nums[numsSize - right] * multipliers[k - 1] + dpTable[k - 1][left];
                    
                dpTable[k][left] = Math.max(takeLeft, takeRight);
                
            }
        }
        
        int max = Integer.MIN_VALUE;
        for (int i = 0; i <= multSize; i++) {
            max = Math.max(max, dpTable[multSize][i]);
        }
        return max;
        
        
        // int size = multipliers.length;
        // table = new Integer[size][size];
        // return dp(nums, multipliers, 0, 0, nums.length - 1, table);
    }
    
//     private int dp(int[] nums, int[] multipliers, int index, int left, int right, Integer[][] table) {
        
//         if(index == multipliers.length) {
//             return 0;
//         }
//         if(table[index][left] != null) {
//             return table[index][left];
//         }
        
//         int takeLeft = nums[left] * multipliers[index] + 
//             dp(nums, multipliers, index + 1, left + 1, right, table);
//         int takeRight = nums[right] * multipliers[index] +
//             dp(nums, multipliers, index + 1, left, right - 1, table);
        
//         table[index][left] = Math.max(takeLeft, takeRight);
        
//         return table[index][left];
        
//     }
   
}