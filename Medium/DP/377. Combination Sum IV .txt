// https://www.youtube.com/watch?v=oPV58JzVfS4 
// backtracking will cause memory Limit exceeded
// this problem is slightly same as climbing stairs
class Solution {
    public int combinationSum4(int[] nums, int target) {
        int[] dynamic_table = new int[target + 1];
        for(int i = 1 ;i <= target; i++) {
            // 事實上這個j是用來減的
            for(int j = 0; j < nums.length; j++) {
                if(i == nums[j]) {
                    dynamic_table[i]++;
                }
                else if(i > nums[j]) {
                    // dynamic_table[i - nums[j]] this is memo step
                    // for example, we know target = 1 has only one combination -> nums[0] = 1
                    // so when it comes to target = 2, we want to use previous solution
                    // dynamic_table[i - nums[j] ] means i減去nums[j] 得到一個 Ｘ
                    // 那這個Ｘ 若加回nums[j]就可以得到 i , 所以我們去拿table裡 Ｘ 之前計算過總共得方法加到
                    // table[i ] 裡
                    dynamic_table[i] = dynamic_table[i] + dynamic_table[i - nums[j]];
                }
            }
        }
        
        return dynamic_table[dynamic_table.length - 1];
       
    }
 
}