/*
Given a square array of integers A, we want the minimum sum of a falling path through A.
A falling path starts at any element in the first row, and chooses one element from each row.  The next row's choice must be in a column that is different from the previous row's column by at most one.
Example 1:
Input: [[1,2,3],[4,5,6],[7,8,9]]
Output: 12
Explanation: 
The possible falling paths are:
[1,4,7], [1,4,8], [1,5,7], [1,5,8], [1,5,9]
[2,4,7], [2,4,8], [2,5,7], [2,5,8], [2,5,9], [2,6,8], [2,6,9]
[3,5,7], [3,5,8], [3,5,9], [3,6,8], [3,6,9]
*/
class Solution {
    public int minFallingPathSum(int[][] A) {
//         int[][] table = new int[A.length][A[0].length];
//         for(int[] arr : table) {
//             Arrays.fill(arr, Integer.MAX_VALUE);
//         }
        
//         for(int y = 0; y < A[0].length; y++) {
//             table[A.length - 1][y] = A[A.length - 1][y];
//         }
        
        for(int x = A.length - 2; x >= 0; x--) {
            for(int y = 0; y < A[0].length; y++) {
                if(y == 0) {
                    // if we have another table, we can wrote like this
            //table[x][y] = Math.min(table[x + 1][y] + A[x][y], table[x + 1][y + 1] + A[x][y]);
                    A[x][y] = Math.min(A[x + 1][y] , A[x + 1][y + 1] ) + A[x][y];
                }
                else if(y == A[0].length - 1) {
                    A[x][y] = Math.min(A[x + 1][y - 1] , A[x + 1][y] ) + A[x][y];
                }
                else {
                    A[x][y] = Math.min(A[x + 1][y - 1] , Math.min(A[x + 1][y] , A[x + 1][y + 1]  )) + A[x][y];
                }
            }
        }
        
        int min_ = Integer.MAX_VALUE;
        for(int x = 0; x < A.length; x++) {
            min_ = Math.min(min_, A[0][x]);
        }
        return min_;
    }
}