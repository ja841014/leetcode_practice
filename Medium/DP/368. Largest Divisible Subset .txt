// slightly same as 673. Number of Longest Increasing Subsequence
/*
Given a set of distinct positive integers, find the largest subset such that every pair (Si, Sj) of elements in this subset satisfies:
Si % Sj = 0 or Sj % Si = 0.

If there are multiple solutions, return any subset is fine.

Example 1:
Input: [1,2,3]
Output: [1,2] (of course, [1,3] will also be ok)

Example 2:
Input: [1,2,4,8]
Output: [1,2,4,8]
*/
class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        
        Arrays.sort(nums);
        int[] table = new int[nums.length];
        int maxSize = 0;
        int maxIndex = 0;
        
        // every element is its factor
        Arrays.fill(table, 1);
        // first step: build up the count table, use the bigger one to check the smaller whether % it == 0 or not.
        for(int i = 1; i < nums.length; i++) {
            for(int j = 0; j < i; j++) {
                if(nums[i] % nums[j] == 0 ) {
                    // we want to find the biggest subset
                    table[i] = Math.max(table[i], table[j] + 1);
                    if(maxSize < table[i]) {
                        maxSize = table[i];
                        maxIndex = i;
                    }
                }
            }
        }
        
        
        List<Integer> ls = new ArrayList<>();
        int curVal = nums[maxIndex];
        int curCount = table[maxIndex];
        curCount--;
        ls.add(curVal);
        for(int i = maxIndex - 1; i >= 0; i--) {
            // we need to use these two conditions two make sure the element is fit in out ArrayList
            // for exampla: [4,8,10,240] if we do not have "currentCount == count[i])" we will get [240, 10]
            // But, [4,8,240] is the answer.
            if(curVal % nums[i] == 0 && curCount == table[i]) {
                // if they can fit smaller nember than bigger number can fit it either 
                curVal = nums[i];
                curCount--;
                ls.add(nums[i]);
            }
        }
       
        return ls;
    }
}