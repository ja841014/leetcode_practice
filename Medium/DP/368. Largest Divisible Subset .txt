// slightly same as 673. Number of Longest Increasing Subsequence
/*
Given a set of distinct positive integers, find the largest subset such that every pair (Si, Sj) of elements in this subset satisfies:
Si % Sj = 0 or Sj % Si = 0.

If there are multiple solutions, return any subset is fine.

Example 1:
Input: [1,2,3]
Output: [1,2] (of course, [1,3] will also be ok)

Example 2:
Input: [1,2,4,8]
Output: [1,2,4,8]
*/
class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        List<Integer> result = new ArrayList<>();
        
        if(nums.length == 0) {
            return result;
        }
        
        int[] count = new int[nums.length];
        Arrays.fill(count, 1);
        Arrays.sort(nums);
        // first step: build up the count table, use the bigger one to check the smaller whether MOD it == 0
        int maxSize = 0;
        for(int i = 1; i < nums.length ; i++) {
            for(int j = 0; j < i; j++) {
                if(nums[i] % nums[j] == 0) {
                    count[i] = Math.max(count[i], count[j] + 1);
                    maxSize = Math.max(maxSize, count[i]);
                }
            }
        }
        // find Maximum index
        int findMaxIndex = 0;
        for(int i = 0; i < count.length; i++) {
            if(count[i] == maxSize) {
                findMaxIndex = i;
            }
        }
        // fix the start value
        int maxValue = nums[findMaxIndex];
        int currentCount = count[findMaxIndex];
        
        for(int i = findMaxIndex; i >= 0; i--) {
            // we need to use these two conditions two make sure the element is fit in out ArrayList
            // for exampla: [4,8,10,240] if we do not have "currentCount == count[i])" we will get [240, 10]
            // But, [4,8,240] is the answer.
            if(maxValue % nums[i] == 0 && currentCount == count[i]) {
                result.add(nums[i]);
                // if they can fit smaller nember than bigger number can fit it either 
                maxValue = nums[i];
                currentCount--;
            }
        }
        
        return result;
    }
}