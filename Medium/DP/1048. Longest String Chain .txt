/*
Given a list of words, each word consists of English lowercase letters.
Let's say word1 is a predecessor of word2 if and only if we can add exactly one letter anywhere in word1 to make it equal to word2.  For example, "abc" is a predecessor of "abac".
A word chain is a sequence of words [word_1, word_2, ..., word_k] with k >= 1, where word_1 is a predecessor of word_2, word_2 is a predecessor of word_3, and so on.
Return the longest possible length of a word chain with words chosen from the given list of words.

Example 1:
Input: words = ["a","b","ba","bca","bda","bdca"]
Output: 4
Explanation: One of the longest word chain is "a","ba","bda","bdca".

Example 2:
Input: words = ["xbc","pcxbcf","xb","cxbc","pcxbc"]
Output: 5
*/
class Solution {
    // sort the String by length
    class strComp implements Comparator<String> {
        public int compare(String str1, String str2) {
            return str2.length() - str1.length();
        }
    }
    public int longestStrChain(String[] words) {
        Arrays.sort(words, new strComp());
        // (the dataset's String, frequency(at first set as 1) )
        Map<String, Integer> map = new HashMap<>();
        for(String s: words) {
            map.put(s, 1);
        }
        // at least 1
        int max = 1;
        
        for(String s: words) {
            int size = s.length();
            for(int i = 0; i < size; i++) {
            // Instead of adding a character, try deleting a character to form a chain in reverse.
                String subStr = s.substring(0, i) + s.substring(i + 1, size);
                if(map.containsKey(subStr)) {
                    int curFreq = map.get(s) + 1;
                    max = Math.max(max, curFreq);
                    // update the freq
                    map.put(subStr, curFreq);
                }
            }
        }
        
       
        return max;
    }
}