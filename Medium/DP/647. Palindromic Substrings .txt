/* DP
Given a string, your task is to count how many palindromic substrings in this string.
The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.

Example 1:
Input: "abc"
Output: 3
Explanation: Three palindromic strings: "a", "b", "c".
 
Example 2:
Input: "aaa"
Output: 6
Explanation: Six palindromic strings: "a", "a", "a", "aa", "aa", "aaa".
*/
class Solution {
    public int countSubstrings(String s) {
        if(s.length() == 0) {
            return 0;
        }
       boolean[][] dynamic_table = new boolean[s.length()][s.length()];
        int count = 0;
        // build up base case : one character
        for(int i = 0; i < s.length(); i++) {
            // each character is Palindromic Substring.
            dynamic_table[i][i] = true;
            count++;
        }
        // build up second base case : two characters
        for(int i = 0; i < s.length() - 1; i++) {
            if(s.charAt(i) == s.charAt(i + 1)) {
                dynamic_table[i][i + 1] = true;
                count++;
            }
        }
        
        for(int i = 2; i < s.length(); i++) {
            count = count + helper(s, dynamic_table, i);
        }
       return count;
    }
    /*
     * s is proginal string
     * table is used to store the previous information
     * range is number of characters we want to look at this time.
    */
    public int helper(String s, boolean[][] table, int range) {
        int count = 0;
        for(int i = 0; i < s.length() - range; i++) {
            if(s.charAt(i) == s.charAt(i + range) && table[i + 1][i + range - 1] == true) {
                table[i][i + range] = true;
                count++;
            }
        }
        return count;
    }
}

