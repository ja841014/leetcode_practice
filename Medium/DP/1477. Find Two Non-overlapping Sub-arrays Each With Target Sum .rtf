{\rtf1\ansi\ansicpg950\cocoartf2580
\cocoascreenfonts1\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab1120
\pard\pardeftab1120\partightenfactor0

\f0\fs22 \cf0 /*\
Given an array of integers arr and an integer target.\
You have to find two non-overlapping sub-arrays of arr each with a sum equal target. There can be multiple answers so you have to find an answer where the sum of the lengths of the two sub-arrays is minimum.\
Return the minimum sum of the lengths of the two required sub-arrays, or return -1 if you cannot find such two sub-arrays.\
\
Example 1:\
Input: arr = [3,2,2,4,3], target = 3\
Output: 2\
Explanation: Only two sub-arrays have sum = 3 ([3] and [3]). The sum of their lengths is 2.\
\
Example 2:\
Input: arr = [7,3,4,7], target = 7\
Output: 2\
Explanation: Although we have three non-overlapping sub-arrays of sum = 7 ([7], [3,4] and [7]), but we will choose the first and third sub-arrays as the sum of their lengths is 2.\
*/\
class Solution \{\
    public int minSumOfLengths(int[] arr, int target) \{\
        // used to store the length\
        int[] dpTable = new int[arr.length];\
        Arrays.fill(dpTable, Integer.MAX_VALUE);\
        int ans = Integer.MAX_VALUE;\
        int left = 0;\
        int right = 0;\
        int sum = 0;\
        \
        while(right < arr.length) \{\
            sum = sum + arr[right];\
            while(sum > target) \{\
                sum = sum - arr[left];\
                left++;\
            \}\
            \
            if(sum == target) \{\
                // we want to check \
                // 1) the left index not exceed boundary\
                // 2) it does not appear the first interval yet.\
                // and here we can filter out the non overlap interval, because we use the "left - 1"!!!\
                if(left - 1 >= 0 && dpTable[left - 1] != Integer.MAX_VALUE) \{\
                    ans = Math.min(ans, right - left + 1 + dpTable[left - 1]);\
                \}\
                dpTable[right] = right - left + 1;\
            \}\
            \
            // Every loop we will go into here to make sure we always get the minimal interval\
            if(right > 0) \{\
                dpTable[right] = Math.min(dpTable[right] , dpTable[right - 1] );\
            \}\
            right++;\
        \}\
        return ans == Integer.MAX_VALUE ? -1 : ans;\
    \}\
\}}