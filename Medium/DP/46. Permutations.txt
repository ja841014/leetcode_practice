/*
Given a collection of distinct integers, return all possible permutations.

Example:

Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]
*/
//Dynamic- Programming
// List<String> myList = Arrays.asList(myArray);
// 這樣的myList是不可以添加新元素或刪除元素的
class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<List<Integer>>();
        List<List<Integer>> tmp = new ArrayList<List<Integer>>();
        //List<Integer> inner_list = new Arraylist<Integer>(Arrays.asList(nums[0]));
        List<Integer> inner_list = new ArrayList<Integer>();
        inner_list.add(nums[0]);
        ans.add(inner_list);
        for(int  i = 1; i < nums.length; ++i) {
            for(List<Integer> ls : ans) { // ls 擁有了 tmp 的值
                for(int j = 0; j <= ls.size(); ++j) {
                    ls.add(j, nums[i]); //在j的位置插入nums[i]
                    tmp.add(new ArrayList<Integer>(ls));// 給一個新空間，不然會被下面的remove影響
                    ls.remove(j);
                }
            }
            ans = tmp;
            tmp = new ArrayList<List<Integer>>(); // 給一個新的空間
        }
       return ans; 
    }
    
}