/*
You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m-1][n-1]). The robot can only move either down or right at any point in time.

An obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle.

Return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The testcases are generated so that the answer will be less than or equal to 2 * 109.
*/
class Solution {
    
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        
        int maxRow = obstacleGrid.length;
        int maxCol = obstacleGrid[0].length;
        
        int[][] cache = new int[maxRow][maxCol];
        //  The robot can only move either down or right at any point in time.
        for(int i = 0; i < maxRow; i++) {
            if(obstacleGrid[i][0] != 1) {
                cache[i][0] = 1;
            }
            else {
                break;
            }
        }
        for(int i = 0; i < maxCol; i++) {
            if(obstacleGrid[0][i] != 1) {
                cache[0][i] = 1;
            }
            else {
                break;
            }
        }
        
        for(int i = 1; i < maxRow; i++) {
            for(int j = 1; j < maxCol; j++) {
                if(obstacleGrid[i][j] == 1) {
                    continue;
                }
                cache[i][j] = cache[i - 1][j] + cache[i][j - 1];
            }
        }
        return cache[maxRow - 1][maxCol - 1];
    }

}