/*
Greedy method is not work
Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.
An interleaving of two strings s and t is a configuration where they are divided into non-empty substrings such that:
s = s1 + s2 + ... + sn
t = t1 + t2 + ... + tm
|n - m| <= 1
The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...
Note: a + b is the concatenation of strings a and b.

Example 1:
Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbcbcac"
Output: true

Example 2:
Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbbaccc"
Output: false

Example 3:
Input: s1 = "", s2 = "", s3 = ""
Output: true
*/
class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {
        if (s1.length() + s2.length() != s3.length()) {
            return false;
        }
        int[][] memo = new int[s1.length()][s2.length()];
        for(int i = 0; i < s1.length(); i++) {
            for(int j = 0; j < s2.length(); j++) {
                memo[i][j] = -1;
            }
        }
        return isInterleave(s1, s2, s3, 0, 0, 0, memo);
    }
    
    private boolean isInterleave(String s1, String s2, String s3, int i, int j, int k, int[][] memo) {
        
        if(s1.length() == i) {
            return s2.substring(j).equals(s3.substring(k));
        }
        if(s2.length() == j) {
            return s1.substring(i).equals(s3.substring(k));
        }
        
        if(memo[i][j] >= 0) {
            // System.out.println(i + ", " + j);
            return memo[i][j] == 1 ? true : false;
        }
        boolean check = false;
        if( (s1.charAt(i) == s3.charAt(k) && isInterleave(s1, s2, s3, i + 1, j, k + 1, memo) ) || 
          (s2.charAt(j) == s3.charAt(k) && isInterleave(s1, s2, s3, i, j + 1, k + 1, memo) ) ) {
            check = true;
        }
        memo[i][j] = check ? 1 : 0;
        return check;
    }
}