// backtrack with memeo
// dp
// knapsack question
/*
You are given an array of binary strings strs and two integers m and n.
Return the size of the largest subset of strs such that there are at most m 0's and n 1's in the subset.
A set x is a subset of a set y if all elements of x are also elements of y.

Example 1:
Input: strs = ["10","0001","111001","1","0"], m = 5, n = 3
Output: 4
Explanation: The largest subset with at most 5 0's and 3 1's is {"10", "0001", "1", "0"}, so the answer is 4.
Other valid but smaller subsets include {"0001", "1"} and {"10", "1", "0"}.
{"111001"} is an invalid subset because it contains 4 1's, greater than the maximum of 3.
Example 2:

Input: strs = ["10","0","1"], m = 1, n = 1
Output: 2
Explanation: The largest subset is {"0", "1"}, so the answer is 2.
*/
class Solution {
    public int findMaxForm(String[] strs, int m, int n) {
        int[][] dp = new int[m + 1][n + 1];
        for (String str : strs) {
            int zeroes = (int)str.chars().filter(x -> x == '0').count(); // 计算str中0的个数
            int ones = str.length() - zeroes; // 计算str中1的个数
            for (int i = m; i >= zeroes; i--) // 此处的一定要从m和n往小循环，如果从小往大会重复使用当前str
                for (int j = n; j >= ones; j--)
                    dp[i][j] = Math.max(dp[i][j], dp[i - zeroes][j - ones] + 1);
        }
        return dp[m][n];
    }
}
// class Solution {
//     // m -> 0 n -> 1
//     private int[][][] dpTable;

//     public int findMaxForm(String[] strs, int m, int n) {
//         Map<String, int[]> map = new HashMap<>();
//         dpTable = new int[m + 1][n + 1][strs.length];
//         for(String str : strs) {
//             countOnesZeros(map, str);
//         }
//         return backtrack(map, strs, m, n, 0);
        
//     }
//     // it is a knapsack problem, we can choose or not choose
//     private int backtrack(Map<String, int[]> map, String[] strs, int remainZero, int remainOne, int index) {
//         if(index > strs.length - 1 || remainZero + remainOne == 0) {
//             return 0;
//         }
        
//         if(dpTable[remainZero][remainOne][index] > 0) {
//             return dpTable[remainZero][remainOne][index];
//         }
        
//         int[] info = map.get(strs[index]);
//         int choose = 0;
//         if(remainZero >= info[0] && remainOne >= info[1]) {
//             choose = backtrack(map, strs, remainZero - info[0], remainOne - info[1], index + 1) + 1;
//         }
//         int notChoose  = backtrack(map, strs, remainZero, remainOne, index + 1);
        
//         int betterOper = Math.max(choose, notChoose);
//         dpTable[remainZero][remainOne][index] = betterOper;
//         return dpTable[remainZero][remainOne][index];
//     }
    
    
//     private void countOnesZeros(Map<String, int[]> map, String str ) {
//         int one = 0;
//         int zero = 0;
//         for(int i = 0; i < str.length(); i++) {
//             if(str.charAt(i) == '1') {
//                 one++;
//             }
//             else {
//                 zero++;
//             }
//         }
//         map.put(str, new int[]{zero, one});
//     }
// }