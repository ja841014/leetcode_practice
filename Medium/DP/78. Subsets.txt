// 使用list要注意更動的問題

/*
Given a set of distinct integers, nums, return all possible subsets (the power set).

Note: The solution set must not contain duplicate subsets.

Example:

Input: nums = [1,2,3]
Output:
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]
*/

/*
//better solution
class Solution {

    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> allLs = new ArrayList<List<Integer>>();
        allLs.add(new ArrayList<>());

        for(int num:nums){
            int n = allLs.size();
            for(int i=0;i<n;i++){
                List<Integer> curL = new ArrayList<>(allLs.get(i));
                curL.add(num);
                allLs.add(curL);
            }            
        }
        return allLs;
    }
}

*/
class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> list = new ArrayList<List<Integer>>();
        List<List<Integer>> list_ = new ArrayList<List<Integer>>();

        List<Integer> li = new ArrayList<Integer>();
        
        
        li.add(nums[0]);
        list.add(li);
        
        for(int i = 1; i < nums.length; i++) {
            for(List<Integer> tmp : list) {
                int size = tmp.size();
                tmp.add(size, nums[i]);
                list_.add(new ArrayList<Integer>(tmp));
                tmp.remove(size);
            }
            list.addAll(list_);
            List<Integer> single = new ArrayList<Integer>();
            single.add(nums[i]);
            list.add(single);
            list_ = new ArrayList<List<Integer>>();
        }
        List<Integer> empty_ = new ArrayList<Integer>();
        list.add(empty_);
        return list;
        
    }
}
