/*
A message containing letters from A-Z is being encoded to numbers using the following mapping:

'A' -> 1
'B' -> 2
...
'Z' -> 26
Given a non-empty string containing only digits, determine the total number of ways to decode it.

The answer is guaranteed to fit in a 32-bit integer.

 

Example 1:

Input: s = "12"
Output: 2
Explanation: It could be decoded as "AB" (1 2) or "L" (12).
Example 2:

Input: s = "226"
Output: 3
Explanation: It could be decoded as "BZ" (2 26), "VF" (22 6), or "BBF" (2 2 6).
Example 3:

Input: s = "0"
Output: 0
Explanation: There is no character that is mapped to a number starting with '0'. We cannot ignore a zero when we face it while decoding. So, each '0' should be part of "10" --> 'J' or "20" --> 'T'.
Example 4:

Input: s = "1"
Output: 1
*/
class Solution {
    HashMap<Integer, Integer> memo = new HashMap<>();
    
    public int numDecodings(String s) {
        if(s.length() == 0 || s.charAt(0) == '0') {
            return 0;
        }
        return dp(s, 0);
    }
    
    private int dp(String str, int index) {
        // if 的順序很重要
        // two number
        if(index == str.length()) {
            return 1;
        }
        // 單一個0沒用
        if(str.charAt(index) == '0') {
            return 0;
        }
        
        if(index == str.length() - 1) {
            return 1;
        }
        
        
        if(memo.containsKey(index)) {
            return memo.get(index);
        }
        
        
        int ans = dp(str, index + 1);
        if(Integer.parseInt(str.substring(index, index + 2)) <= 26 ) {
            ans = ans + dp(str, index + 2);
        }        
        
        memo.put(index, ans);
        
        return ans;    
    }
}