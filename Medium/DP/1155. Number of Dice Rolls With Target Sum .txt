/*
You have d dice, and each die has f faces numbered 1, 2, ..., f.

Return the number of possible ways (out of fd total ways) modulo 10^9 + 7 to roll the dice so the sum of the face up numbers equals target.

 

Example 1:

Input: d = 1, f = 6, target = 3
Output: 1
Explanation: 
You throw one die with 6 faces.  There is only one way to get a sum of 3.
Example 2:

Input: d = 2, f = 6, target = 7
Output: 6
Explanation: 
You throw two dice, each with 6 faces.  There are 6 ways to get a sum of 7:
1+6, 2+5, 3+4, 4+3, 5+2, 6+1.
Example 3:

Input: d = 2, f = 5, target = 10
Output: 1
Explanation: 
You throw two dice, each with 5 faces.  There is only one way to get a sum of 10: 5+5.
Example 4:

Input: d = 1, f = 2, target = 3
Output: 0
Explanation: 
You throw one die with 2 faces.  There is no way to get a sum of 3.
Example 5:

Input: d = 30, f = 30, target = 500
Output: 222616187
Explanation: 
The answer must be returned modulo 10^9 + 7.

*/
class Solution {
    int mod = (int)(1e9 + 7);
    public int numRollsToTarget(int numOfDice, int face, int target) {
        Integer[][] dp = new Integer[numOfDice + 1][target + 1];
        dp[0][0] = 1;
        return helper(numOfDice, dp, face, target) % mod;
    }
    
    private int helper(int numOfDice, Integer[][] dp,int face, int target) {
        
        if(target < 0) {
            return 0;
        }
        
        if(numOfDice == 0 && target > 0) {
            dp[numOfDice][target] = 0;
             return 0;
        }
        // target cannnot equal to 0 because the dice do not contain 0 score.
        if(numOfDice == 1 && target <= face && target > 0) {
            dp[numOfDice][target] = 1;
            return 1;
        }
        
        // memo
        if(dp[numOfDice][target] != null) {
            return dp[numOfDice][target];
        }
        
        int count = 0;
        for(int i = 1; i <= face; i++ ) {
            count = (count % mod + helper(numOfDice - 1, dp, face, target - i) % mod) % mod;
        }
        dp[numOfDice][target] = count;
        return count;
    }
}