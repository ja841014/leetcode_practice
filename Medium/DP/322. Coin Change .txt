/* Dynamic Programming
You are given coins of different denominations and a total amount of money amount. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.

Example 1:
Input: coins = [1, 2, 5], amount = 11
Output: 3 
Explanation: 11 = 5 + 5 + 1

Example 2:
Input: coins = [2], amount = 3
Output: -1
*/
class Solution {
    public int coinChange(int[] coins, int amount) {
        int[] table = new int[amount + 1];
        int result = dynamic(table, coins, amount);
        if(result == Integer.MAX_VALUE) {
            return -1;
        }
        return result;
    }
    public int dynamic(int[] table, int[] coins, int amount) {
        if(amount == 0) {
            return 0;
        }
        if(table[amount] != 0) {
            return table[amount];
        }
        int min = Integer.MAX_VALUE;
        for(int i = 0; i < coins.length; i++) {
            if(amount - coins[i] >= 0) {
                // we cannot plus 1 here, because there isa. case that return Integer.MAX_VALUE + 1 will cause wrong value
                int tmp = dynamic(table, coins, amount - coins[i]);
                if(tmp != Integer.MAX_VALUE) {
                    min = Math.min(min, tmp + 1);
                }
            }
        }
        // in this loop, we only consider the value "amount", and find out the minimum.
        table[amount] = min;
        // at the last return will break out the function, we rreturn table[target amount] 
        return table[amount];
    }
}