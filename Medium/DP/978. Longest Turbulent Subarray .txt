/*
題目意思就是要大小大小 或者 小大小大 找最長
Given an integer array arr, return the length of a maximum size turbulent subarray of arr.

A subarray is turbulent if the comparison sign flips between each adjacent pair of elements in the subarray.

More formally, a subarray [arr[i], arr[i + 1], ..., arr[j]] of arr is said to be turbulent if and only if:

For i <= k < j:
arr[k] > arr[k + 1] when k is odd, and
arr[k] < arr[k + 1] when k is even.
Or, for i <= k < j:
arr[k] > arr[k + 1] when k is even, and
arr[k] < arr[k + 1] when k is odd.
 

Example 1:
Input: arr = [9,4,2,10,7,8,8,1,9]
Output: 5
Explanation: arr[1] > arr[2] < arr[3] > arr[4] < arr[5]

Example 2:
Input: arr = [4,8,12,16]
Output: 2

Example 3:
Input: arr = [100]
Output: 1
*/
class Solution {
    public int maxTurbulenceSize(int[] arr) {
        // corner case
        if(arr.length == 1) {
            return 1;
        }
        int size = arr.length;
        int[] table = new int[size];
        table[0] = (arr[0] == arr[1]) ? 1 : 2;
        boolean check = arr[0] > arr[1];
        int res = table[0];
        
        for(int i = 1; i < arr.length - 1; i++) {
            if( (check && arr[i] < arr[i + 1]) || (!check && arr[i] > arr[i + 1])  ) {
                table[i] = table[i - 1] + 1;
                res = Math.max(res, table[i]);
            }
            else {
                table[i] = (arr[i] == arr[i + 1]) ? 1 : 2;
            }
            check = arr[i] > arr[i + 1];
        }
        return res;
    }
}