/*
You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once. Find this single element that appears only once.

 

Example 1:

Input: [1,1,2,3,3,4,4,8,8]
Output: 2
Example 2:

Input: [3,3,7,7,10,11,11]
Output: 10
*/
class Solution {
    public int singleNonDuplicate(int[] nums) {
        
        int pre = nums[0];
        int count = 0;
        if(nums.length == 1) {
            return nums[0];
        }
        for(int i = 1 ; i < nums.length; i++) {
            int cur = nums[i];
            if(pre == cur) {
                count++;
            }
            else {
                if(count != 0) {
                    pre = cur;
                    count = 0;
                }
                else {
                    count = pre;
                    break;
                }
                if(i + 1 == nums.length) {
                    count = pre;
                    break;
                }
            }
            
        }
        return count;
        // Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        // for(int i = 0; i < nums.length; i++) {
        //     map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);
        // }
        // for(int j = 0; j < nums.length; j++) {
        //     if(map.get(nums[j]) == 1) {
        //         return nums[j];
        //     }
        // }
        // return 0;
    }
}
