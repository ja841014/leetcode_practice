{\rtf1\ansi\ansicpg950\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red29\green38\blue42;}
{\*\expandedcolortbl;;\cssrgb\c14902\c19608\c21961;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \expnd0\expndtw0\kerning0
/*\
Given a non-empty array of integers, return the k most frequent elements.\
\
Example 1:\
\
Input: nums = [1,1,1\
*/\
class Solution \{\
    public List<Integer> topKFrequent(int[] nums, int k) \{\
        List<Integer> list = new ArrayList<Integer>(); \
        Map<Integer, Integer> map = new HashMap<>();\
        // lambda expression\
        Queue<Integer> maxheap = new PriorityQueue<Integer>((a, b) -> map.get(b) - map.get(a));\
        for(int i = 0; i < nums.length; i++) \{\
            map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);\
        \}  \
        // map only has keySet(), values(), entrySet()\
        for(Integer key: map.keySet()) \{\
            maxheap.add(key);\
        \}\
        \
         for(int i = 0; i < k; i++) \{\
             list.add(maxheap.poll());\
         \}\
        return list;\
    \}\
\}}