{\rtf1\ansi\ansicpg950\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Given an array nums of n integers where n > 1,  return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].\
\
Example:\
\
Input:  [1,2,3,4]\
Output: [24,12,8,6]\
*/\
/*\
/// another solution ///\
class Solution \{\
    public int[] productExceptSelf(int[] nums) \{\
\
        // The length of the input array\
        int length = nums.length;\
\
        // The left and right arrays as described in the algorithm\
        int[] L = new int[length];\
        int[] R = new int[length];\
\
        // Final answer array to be returned\
        int[] answer = new int[length];\
\
        // L[i] contains the product of all the elements to the left\
        // Note: for the element at index '0', there are no elements to the left,\
        // so L[0] would be 1\
        L[0] = 1;\
        for (int i = 1; i < length; i++) \{\
\
            // L[i - 1] already contains the product of elements to the left of 'i - 1'\
            // Simply multiplying it with nums[i - 1] would give the product of all\
            // elements to the left of index 'i'\
            L[i] = nums[i - 1] * L[i - 1];\
        \}\
\
        // R[i] contains the product of all the elements to the right\
        // Note: for the element at index 'length - 1', there are no elements to the right,\
        // so the R[length - 1] would be 1\
        R[length - 1] = 1;\
        for (int i = length - 2; i >= 0; i--) \{\
\
            // R[i + 1] already contains the product of elements to the right of 'i + 1'\
            // Simply multiplying it with nums[i + 1] would give the product of all\
            // elements to the right of index 'i'\
            R[i] = nums[i + 1] * R[i + 1];\
        \}\
\
        // Constructing the answer array\
        for (int i = 0; i < length; i++) \{\
            // For the first element, R[i] would be product except self\
            // For the last element of the array, product except self would be L[i]\
            // Else, multiple product of all elements to the left and to the right\
            answer[i] = L[i] * R[i];\
        \}\
\
        return answer;\
    \}\
\}\
\
*/\
class Solution \{\
    public int[] productExceptSelf(int[] nums) \{\
        int multi = 1;\
        int specific;\
        int[] result = new int[nums.length];\
        int count = 0;\
        int index = 0;\
        \
        \
        for(int i = 0; i < nums.length; i++) \{\
            if(nums[i] == 0) \{\
                count++;\
                if(count == 1) \{\
                    index = i;\
                \}\
            \}\
            else \{\
                multi = nums[i] * multi;\
            \}\
            \
        \}\
        for(int i = 0; i < nums.length; i++) \{\
            if(count >= 2) \{\
                Arrays.fill(result, 0);\
            \}\
            else if(count == 1) \{\
                Arrays.fill(result, 0);\
                result[index] = multi;\
            \}\
            else \{\
                specific = multi/nums[i];\
                result[i] = specific; \
            \}\
            \
        \}\
        return result;\
    \}\
\}\
\
\
}