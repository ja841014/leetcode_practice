/*
using binary search
*/
/*
reference https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/discuss/394294/Using-Binary-Search-in-Java-and-analysis
*/
/*
Given a n x n matrix where each of the rows and columns are sorted in ascending order, find the kth smallest element in the matrix.

Note that it is the kth smallest element in the sorted order, not the kth distinct element.

Example:

matrix = [
   [ 1,  5,  9],
   [10, 11, 13],
   [12, 13, 15]
],
k = 8,

return 13.
*/
 
class Solution {
    public int kthSmallest(int[][] matrix, int k) {
        int row = matrix.length;
        int column = matrix[0].length;
        int high = matrix[row - 1][column - 1];
        int low  = matrix[0][0];
        int mid = 0;
        while(low < high) {
            mid = (high + low) / 2;
            int column_ele = column - 1;
            int count_Kth = 0;
            for(int  i = 0; i < row; i++) {
                while( column_ele >= 0 && mid < matrix[i][column_ele]) {
                    column_ele--;//go to left element to see whether the mid is bigger or not
                                // when it go to  last one you will get -1
                }
                int cur_row_ele_num = column_ele + 1;
                count_Kth = count_Kth + cur_row_ele_num;//every for loop update the Kth smallest element
            }
            if(count_Kth < k) {
                low = mid + 1; //why add 1? because mid already calculate before
            }
            else {
                high = mid;
            }
        }
      return low;  
    }
}

 /* cannot use map, because matrix contain duplicatte value
        int row = matrix.length;
        int column = matrix[0].length;
        PriorityQueue<Integer> Minheap = new PriorityQueue<>();
        Map<Integer, Integer> map = new HashMap<>();
        int[] table = new int[row];
        int row_value = 0;
        int element_value = 0;
        
        for(int i = 0; i < row; i++) {
            Minheap.add(matrix[i][0]);
            map.put(matrix[i][0], i);
        } 
        while(k > 0) {
            element_value = Minheap.poll();//key
            row_value = map.get(element_value);//return value 
            
            table[row_value]++;
            // Minheap.poll();
            if(table[row_value] < column) {
                Minheap.add(matrix[row_value][table[row_value]]);
                map.remove(element_value);
                map.put(matrix[row_value][table[row_value]], row_value);
            }
            else {
                map.remove(element_value);
            }
            k--;
        }
        return element_value;
        */
