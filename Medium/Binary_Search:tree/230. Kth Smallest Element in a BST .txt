/* Tree stack
Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.
Example 1:

Input: root = [3,1,4,null,2], k = 1
   3
  / \
 1   4
  \
   2
Output: 1
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int kthSmallest(TreeNode root, int k) {
        Stack<TreeNode> st = new Stack<TreeNode>();
        //List<Integer> arr = new ArrayList<>();
        int count = 0;
        st.push(root);
        //arr.add(root.val);
        root = root.left;
        while(!st.empty() || root != null) {
           while(root != null) {
               st.push(root);
               //arr.add(root.val);
               root = root.left;
            }
            root = st.pop();
            count++;
            if(count == k) {
                return root.val;
            }
            root = root.right;
        }
        //Collections.sort(arr);
        return -1;
        
    }
}