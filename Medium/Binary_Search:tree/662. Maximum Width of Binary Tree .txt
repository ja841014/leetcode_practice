// tips: using attribut of the tree => index!!
// using index to track the maximumu width of a tree
// Given a binary tree, write a function to get the maximum width of the given tree. The maximum width of a tree is the maximum width among all levels.

// The width of one level is defined as the length between the end-nodes (the leftmost and right most non-null nodes in the level, where the null nodes between the end-nodes are also counted into the length calculation.

// It is guaranteed that the answer will in the range of 32-bit signed integer.

// Example 1:

// Input: 

//            1
//          /   \
//         3     2
//        / \     \  
//       5   3     9 

// Output: 4
// Explanation: The maximum width existing in the third level with the length 4 (5,3,null,9).
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        Queue< Pair<TreeNode, Integer> > q = new LinkedList<>();
        q.offer(new Pair(root, 0));
        int max_width = -1;
        
        while(!q.isEmpty()) {
            
            Pair<TreeNode, Integer> head = q.element();
            int size = q.size();
            
            Pair<TreeNode, Integer> tmp = null;
            for(int i = 0; i < size; i++) {
                
                tmp = q.poll(); 
                if(tmp.getKey().left != null) {
                    q.offer(new Pair(tmp.getKey().left, 2*(tmp.getValue()) + 1));
                }
                if(tmp.getKey().right != null) {
                    q.offer(new Pair(tmp.getKey().right, 2*(tmp.getValue()) + 2));
                }

            }
            max_width = Math.max(max_width, tmp.getValue() - head.getValue() + 1);
        }
        return max_width;
    }
    
}