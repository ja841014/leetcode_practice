// List<Integer> sublist = new ArrayList<>()
// sublist.add(0, tmp.val); // add at beginning!!
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        
        // TreeNode tmp = root;
        Queue<TreeNode> q = new LinkedList<>();
        // List<Integer> list = new ArrayList<>();
        List<List<Integer>> result= new ArrayList<>(); 
        if(root == null) {
            return result;
        }
        q.offer(root);
        // list.add(root.val);
        boolean change = true;
        while(!q.isEmpty()) {
            List<Integer> sublist = new ArrayList<>();
            int size = q.size();
            
            for(int i = 0; i < size; i++) {
                TreeNode tmp = q.poll();
                if(tmp.left != null) {
                    q.offer(tmp.left);
                    // list.add(tmp.left.val);
                }
                if(tmp.right != null) {
                    q.offer(tmp.right);
                    // list.add(tmp.right.val);
                }
                
                if(change == false) {
                    sublist.add(0, tmp.val); // add at beginning!!
                }
                else {
                    sublist.add(tmp.val); // add at the last
                }
            }
            
            result.add(sublist);
            change = !change;
        }
        return result;
        
    }
}