/*
everytime we add all 1 in previos value! 
0               0
1               1
1 2             2~3
1 2 2 3         4~7
1 2 2 3 2 3 3 4 8~15

Given an integer n, return an array ans of length n + 1 such that for each i (0 <= i <= n), ans[i] is the number of 1's in the binary representation of i.
 
Example 1:
Input: n = 2
Output: [0,1,1]
Explanation:
0 --> 0
1 --> 1
2 --> 10

Example 2:
Input: n = 5
Output: [0,1,1,2,1,2]
Explanation:
0 --> 0
1 --> 1
2 --> 10
3 --> 11
4 --> 100
5 --> 101
*/
class Solution {
    public int[] countBits(int n) {
        if(n == 0) {
            return new int[]{0};
        }
        int[] arr = new int[n + 1];
        arr[1] = 1;
        
        int index = 2;
        int range = 2;
        int innerIndex = 0;
        
        while(index <= n) {
            
            range = range * 2;
            innerIndex = 0;
            while(index <= n && index < range) {
                arr[index] = arr[innerIndex] + 1;
                index++;
                innerIndex++;
            }
            
        }
        return arr;
    }
}