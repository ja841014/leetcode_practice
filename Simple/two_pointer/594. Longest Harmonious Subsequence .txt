/*
We define a harmonious array as an array where the difference between its maximum value and its minimum value is exactly 1.
Given an integer array nums, return the length of its longest harmonious subsequence among all its possible subsequences.
A subsequence of array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements.
 

Example 1:
Input: nums = [1,3,2,2,5,2,3,7]
Output: 5
Explanation: The longest harmonious subsequence is [3,2,2,2,3].

Example 2:
Input: nums = [1,2,3,4]
Output: 2

Example 3:
Input: nums = [1,1,1,1]
Output: 0
*/
class Solution {
    public int findLHS(int[] nums) {
        // if the array size is 0 or 1 than return 0
        if(nums.length < 2) {
            return 0;
        }
        Arrays.sort(nums);
        // using two pointer two record two index
        int leftPtr = 0;
        int rightPtr = 1;
        int result = 0;
        while(rightPtr < nums.length && leftPtr < nums.length ) {
            // if maximum value and its minimum value is exactly 1, then we calculate the length and rightPtr + 1
            if(nums[rightPtr] - nums[leftPtr] == 1) {
                result = Math.max(result, rightPtr - leftPtr + 1);
                rightPtr++;
            }
            else {
                // if left and right pointer are not the same value leftPtr + 1, otherwise rightPtr + 1
                if(nums[rightPtr] != nums[leftPtr]) {
                    leftPtr++;
                }
                else {
                    rightPtr++;
                }
            }
        }
        return result;
    }
}