/**
Given a list of the scores of different students, items, where items[i] = [IDi, scorei] represents one score from a student with IDi, calculate each student's top five average.
Return the answer as an array of pairs result, where result[j] = [IDj, topFiveAveragej] represents the student with IDj and their top five average. Sort result by IDj in increasing order.
A student's top five average is calculated by taking the sum of their top five scores and dividing it by 5 using integer division.

Example 1:
Input: items = [[1,91],[1,92],[2,93],[2,97],[1,60],[2,77],[1,65],[1,87],[1,100],[2,100],[2,76]]
Output: [[1,87],[2,88]]
Explanation: 
The student with ID = 1 got scores 91, 92, 60, 65, 87, and 100. Their top five average is (100 + 92 + 91 + 87 + 65) / 5 = 87.
The student with ID = 2 got scores 93, 97, 77, 100, and 76. Their top five average is (100 + 97 + 93 + 77 + 76) / 5 = 88.6, but with integer division their average converts to 88.

Example 2:
Input: items = [[1,100],[7,100],[1,100],[7,100],[1,100],[7,100],[1,100],[7,100],[1,100],[7,100]]
Output: [[1,100],[7,100]]
 */
class Solution {
    public int[][] highFive(int[][] items) {
        Map<Integer, PriorityQueue<Integer>> cache = new HashMap<>();
        
        for(int[] record : items ) {
            int id = record[0];
            int scrore = record[1];
            if(!cache.containsKey(id)) {
                cache.put(id, new PriorityQueue<>((a, b) -> b - a));
            }
            cache.get(id).offer(scrore);
        }

        int[][] res = new int[cache.size()][2];
        int idx = 0;

        for(Map.Entry<Integer, PriorityQueue<Integer>> entry : cache.entrySet()) {
            int num = 0;
            int sum = 0;
            
            PriorityQueue<Integer> pq = entry.getValue();
            // System.out.println(pq.size());
            while(!pq.isEmpty() && num != 5) {
                sum = sum + pq.poll();
                num++;
            }
            int avg = sum / num;
            res[idx][0] = entry.getKey();
            res[idx][1] = avg;
            idx++;
        }
        return res;
    }
}
