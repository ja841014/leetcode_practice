/*
Given the root of a binary tree, return all root-to-leaf paths in any order.
A leaf is a node with no children.

Example 1:
Input: root = [1,2,3,null,5]
Output: ["1->2->5","1->3"]

Example 2:
Input: root = [1]
Output: ["1"]
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<String> ls;
    public List<String> binaryTreePaths(TreeNode root) {
        ls = new ArrayList<>();
        if(root == null) {
            return ls;
        }
        // backtracking
        createPath(root, new ArrayList<>());
        return ls;
        
    }
    public void createPath(TreeNode root, List<Integer> tmp) {
        
        tmp.add(root.val);
        if(root.left != null) {
            createPath(root.left, tmp);
        }
        if(root.right != null) {
            createPath(root.right, tmp);
        }
        if(root.left == null && root.right == null) {
            ls.add(createString(tmp));
        }
        
        tmp.remove(tmp.size() - 1);
    }
    
    public String createString(List<Integer> toStrLs) {
        StringBuilder sb = new StringBuilder();
        for(int i = 0; i < toStrLs.size() - 1; i++) {
            sb.append(toStrLs.get(i));
            sb.append("->");
        }
        sb.append(toStrLs.get(toStrLs.size() - 1));
        return sb.toString();
    }
}