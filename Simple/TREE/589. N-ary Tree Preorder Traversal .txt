// recursive N-children tree
/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
    public List<Integer> preorder(Node root) {
        List<Integer> result = new ArrayList<>();
        if(root != null) {
            recur(result, root);
        }
        return result;
        
    }
    
    public void recur(List<Integer> result, Node cur_node) {
        
        result.add(cur_node.val);
        if(cur_node.children.isEmpty()) {
            return;
        }
        for(Node neighbor : cur_node.children) {
            recur(result, neighbor);
        }
    }
    
}