import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class HelloWorld {

	
public List<List<Integer>> threeSum(int[] nums) {
        
        List list = new ArrayList();
        for(int i=0; i<nums.length; i++)
        {
        	int j=i+1;
        	int k=nums.length-1;
        	if( i > 0 && nums[i] == nums[i - 1]) //Á×§K­«½Æ
        	{
                continue; //©¿²¤¥»¦¸°j°é³Ñ¤U»y¥y
            }
        	while(j<k)
        	{
        		if (k < nums.length - 1 && nums[k] == nums[k + 1]) 
        		{
                    k--;
                    continue;
                }
        		if(nums[i]+nums[j]+nums[k]>0)
        			k--;
        		else if(nums[i]+nums[j]+nums[k]<0)
        			j++;
        		else
        		{
        			 ArrayList result = new ArrayList();
                     result.add(nums[i]);
                     result.add(nums[j]);
                     result.add(nums[k]);
                     list.add(result);
                     j++;
                     k--;
        		}
        	}
        }
        
        return list;
///////////////METHOD TWO///////////////
//////////////LIST & MAP ///////////////
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Map<Integer, Integer> m = new HashMap<>();
        
        ArrayList answer = new ArrayList();
        Arrays.sort(nums);
        for(int i = 0; i < nums.length; i++){
            m.put(nums[i], i);
        }
        
        for(int j = 0; j < nums.length; j++){
            if(j > 0 && nums[j] == nums[j-1] ){ continue;}//avoid duplicate
            int k = j+1;
            while(k < nums.length){
                if(nums[k] == nums[k-1] && k > j+1){
                    k++;
                    continue;
                }//avoid duplicate
                int remain = nums[j] + nums[k] ;
                if(m.containsKey(-remain) && m.get(-remain)!= j && m.get(-remain)!= k && m.get(-remain) > k){
                    ArrayList result = new ArrayList();
                    result.add(nums[j]);
                    result.add(nums[k]);
                    result.add(nums[m.get(-remain)]);
                    answer.add(result);
                }
                k++;
            }
        }
        return answer;
    }
}

///////////////////////////////////////////////////////////////
               
   /*     for(int i=0;i<nums.length;i++)
        {
            for(int j=i+1;j<nums.length;j++)
            {
                for(int k=j+1;k<nums.length;k++)
                {
                    if(0==nums[i]+nums[j]+nums[k])
                    {
                        ArrayList result = new ArrayList();
                        result.add(nums[i]);
                        result.add(nums[j]);
                        result.add(nums[k]);
                        list.add(result);
                        //System.out.println(list);
                    }
                }
            }
            
        }             
        for(int i=0;i<list.size()-1;i++)
        {
        	for(int j=list.size()-1;j>i;j--)
        	{
        		if(list.get(j).equals(list.get(i)))
        			list.remove(j);
        	}
        }	
        return list;*/
    }
	
	
	
	public static void main(String[] args) {
		int[] nums= {-1,0,1,2,-1,-4};
		Arrays.sort(nums);
		int target=6;
		HelloWorld a=new HelloWorld();
		System.out.println(a.threeSum(nums));
		// TODO Auto-generated method stub
		int[] b={2,3,55,6};
		for(int i=0,len=b.length;i<len;i++)
		{
		System.out.println(b[i]);
		}
	}

}
