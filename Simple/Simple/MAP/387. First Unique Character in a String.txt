/*
    Given a string, find the first non-repeating character in it 
    and return it's index. If it doesn't exist, return -1.
    Examples:

    s = "leetcode"
    return 0.

    s = "loveleetcode",
    return 2.
*/

class Solution {
    public int firstUniqChar(String s) {
        ////////////////////
        // First solution //
        ////////////////////
        char[] c = s.toCharArray();
        int[] e = new int[26];
        for (int i=0; i < s.length(); i++){
            e[c[i]-'a']++; //a~z -> 97~122
        }
        for (int i=0; i < s.length(); i++){
            if(e[c[i]-'a'] == 1){
                return i;
            }
        }
        return -1;
        
        ////////////////////
        // Second Solution//
        ////////////////////
/*        Map<Character, Integer> map = new HashMap<>();
        //build up the map and count the frequency at the same time
        for (int i = 0; i < s.length(); i++){
            map.put (s.charAt(i), map.getOrDefault(s.charAt(i), 0)+1);
        }
        for (int i = 0; i<s.length(); i++){
            // get the value of the key
            if (map.get(s.charAt(i))==1){
                return i;
            }            
        }
        return -1;*/
    }
}