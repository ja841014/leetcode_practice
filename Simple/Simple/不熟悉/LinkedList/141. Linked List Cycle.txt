/*
Given a linked list, determine if it has a cycle in it.

To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.
/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
        if(head == null){return false;}
        ListNode slow = head;
        ListNode fast = head.next;
        while(slow != fast){
            slow = slow.next;
            if(fast != null && fast.next != null){
                fast = fast.next.next;
            }
            else{
                return false;
            }
        }
        return true;
    }
}