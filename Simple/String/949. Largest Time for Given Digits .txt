// need to use String.compareTo(string) 
/*
Given an array of 4 digits, return the largest 24 hour time that can be made.
The smallest 24 hour time is 00:00, and the largest is 23:59.  Starting from 00:00, a time is larger if more time has elapsed since midnight.
Return the answer as a string of length 5.  If no valid time can be made, return an empty string.

Example 1:
Input: [1,2,3,4]
Output: "23:41"

Example 2:
Input: [5,5,5,5]
Output: ""
*/
class Solution {
    public String largestTimeFromDigits(int[] A) {
        int[] freq = new int[10];
        String result = "";
        for(int i = 0; i < A.length; i++) {
            freq[A[i]]++;
        }
        List<String> table = new ArrayList<>();
        StringBuilder sb = new StringBuilder();
        backtrack_helper(freq, sb, table);
        
        for(String st : table) {
            String Hour = st.substring(0, 2);
            String minute = st.substring(2);
            if(Hour.compareTo("24") < 0 && minute.compareTo("60") < 0 && result.compareTo(Hour + ":" + minute) < 0) {
                result = Hour + ":" + minute;
            }
        }
        return result;
    }
    public void backtrack_helper(int[] freq, StringBuilder sb , List<String> table) {
        if(sb.length() == 4) {
            table.add(sb.toString());
            return;
        }
        for(int i = 0; i < freq.length; i++ ) {
            if(freq[i] > 0) {
                freq[i]--;
                // ls.add(i);
                sb.append(i);
                backtrack_helper(freq, sb, table);
                sb.deleteCharAt(sb.length() - 1);
                // ls.remove(ls.size() - 1);
                freq[i]++;
            }
        }
    }
}