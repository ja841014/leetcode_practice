/*
suppose there're k elements, the sum of original array is s, the minimum move is m, eventually all the elements become e, we know each move contributes (k-1) to the sum, so we have:
s + (k-1)*m = k*e
for the minimum element min, it must be added m times, i.e.
min + m = e
The two equations above would give us m = s - k*min
*/
/*
Given an integer array nums of size n, return the minimum number of moves required to make all array elements equal.
In one move, you can increment n - 1 elements of the array by 1.


Example 1:
Input: nums = [1,2,3]
Output: 3
Explanation: Only three moves are needed (remember each move increments two elements):
[1,2,3]  =>  [2,3,3]  =>  [3,4,3]  =>  [4,4,4]

Example 2:
Input: nums = [1,1,1]
Output: 0
*/
class Solution {
    public int minMoves(int[] nums) {
        int orgSum = 0;
        int totalElement = nums.length ;
        int min = Integer.MAX_VALUE;
        for(int i : nums) {
            orgSum = orgSum + i;
            min = Math.min(i, min);
        }
        return orgSum - totalElement * min;
    }
}


