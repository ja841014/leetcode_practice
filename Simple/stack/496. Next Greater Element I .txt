// 503. Next Greater Element II
// 1019. Next Greater Node In Linked List 
// it's asking you to take an element in the first array and then find the same element in the second array and then look to the right in the second array to find a greater one. I couldn`t understand this until I looked into some solutions in the discussion, either. And the examples provided by this question are not explanatory at all.
/*
ou are given two arrays (without duplicates) nums1 and nums2 where nums1â€™s elements are subset of nums2. Find all the next greater numbers for nums1's elements in the corresponding places of nums2.

The Next Greater Number of a number x in nums1 is the first greater number to its right in nums2. If it does not exist, output -1 for this number.

Example 1:
Input: nums1 = [4,1,2], nums2 = [1,3,4,2].
Output: [-1,3,-1]
Explanation:
    For number 4 in the first array, you cannot find the next greater number for it in the second array, so output -1.
    For number 1 in the first array, the next greater number for it in the second array is 3.
    For number 2 in the first array, there is no next greater number for it in the second array, so output -1.
Example 2:
Input: nums1 = [2,4], nums2 = [1,2,3,4].
Output: [3,-1]
Explanation:
    For number 2 in the first array, the next greater number for it in the second array is 3.
    For number 4 in the first array, there is no next greater number for it in the second array, so output -1.

*/
class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        Map<Integer, Integer> map = new HashMap<>();
        int[] arr = new int[nums1.length];
        int arrIndex = 0;
        
        for(int i = 0; i < nums2.length; i++) {
            map.put(nums2[i], i);
        }
        
        for(int i : nums1) {
            int index = map.get(i);
            int val = Integer.MAX_VALUE;
            int tmpIndex = -1;
            
            for(int j = index; j < nums2.length; j++) {
                if(i < nums2[j]) {
                    val = nums2[j];
                    tmpIndex = j;
                    break;
                }
            }
            
            if(val == Integer.MAX_VALUE) {
                arr[arrIndex] = -1;
            }
            else {
                arr[arrIndex] = val;
            }
            arrIndex++;
        }
        return arr;
    }
}

class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        int[] arr = new int[nums2.length];
        Stack<Integer> st = new Stack<>();
        Map<Integer, Integer> map = new HashMap<>();
        for(int i = 0 ; i < nums2.length; i++) {
            while(!st.isEmpty() && nums2[st.peek()] < nums2[i]) {
                map.put(nums2[st.peek()], nums2[i]);
                arr[st.peek()] = nums2[i];
                st.pop();
            }
            st.push(i);
        }
        int[] result = new int[nums1.length];
        for(int i = 0 ; i < nums1.length; i++) {
            if(map.get(nums1[i]) == null) {
                result[i] = -1;
            }
            else {
                result[i] = map.get(nums1[i]);
            }
            
        }
        
        return result;
    }
}