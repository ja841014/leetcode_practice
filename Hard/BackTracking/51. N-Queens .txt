/*
The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.

Given an integer n, return all distinct solutions to the n-queens puzzle.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.
*/
class Solution {
    List<List<String>> ans;
    public List<List<String>> solveNQueens(int n) {
        boolean[][] board = new boolean[n][n];
        ans = new ArrayList<>();
        backtracking(board, 0, 0 );
        return ans;
    }
    
    private void backtracking(boolean[][] board, int row, int col) {
        // end
        if(col >= board[0].length) {
            List<String> boardFigure = new ArrayList<>();
            draw(boardFigure, board, board.length);
            ans.add(boardFigure);
            return;
        }
        
        for(int i = 0; i < board.length; i++) {

            if(check(board, board.length, i, col) == false ) {
                continue;
            }
            
            board[i][col] = true;
            backtracking(board, i, col + 1);
            board[i][col] = false;
        }
    }
    
    private boolean check(boolean[][] board, int range, int row, int col) {
        // same row restrict
        for(int i = 0; i < range; i++ ) {
            if(board[row][i] == true) {
                return false;
            }
            
            
        }
        // same colum restrict
        for(int i = 0; i < range; i++ ) {
            if(board[i][col] == true) {
                return false;
            }
        }
        
        // same diagonal restrict
        int[] newColRow = calNewRowCol(range, col, row);
        for(int i = 0; i < range; i++ ) {
            
            if(newColRow[0] < range && newColRow[1] < range ) {
                if(board[newColRow[0]][newColRow[1]] == true) {
                    return false;
                }
                
            }
            else {
                break;
            }
            newColRow[0] = newColRow[0] + 1;
            newColRow[1] = newColRow[1] + 1;
            
        }
        // same anti-diagonal restrict
        int[] newColRowAnti = calNewRowColAnti(range, col, row);
        for(int i = 0; i < range; i++) {
            if(newColRowAnti[0] < range && newColRowAnti[1] >= 0) {
                if(board[newColRowAnti[0]][newColRowAnti[1]] == true) {
                    return false;
                }
                
            }
            else {
                break;
            }
            newColRowAnti[0] = newColRowAnti[0] + 1;
            newColRowAnti[1] = newColRowAnti[1] - 1;
        }
        
        return true;

    }

    // 往右上擠
    private int[] calNewRowColAnti( int range, int col, int row) {
        int compensate = 0;
        compensate = Math.min(row, range - 1 - col );
        row = row - compensate;
        col = col + compensate;
        
        return new int[] {row, col};
    }
    // 往左上擠
    private int[] calNewRowCol(int range, int col, int row) {
        int compensate = 0;
        compensate = Math.min(row, col );
        row = row - compensate;
        col = col - compensate;
        return new int[] {row, col};
    }
    
    
    // draw out the board
    private void draw(List<String> ls, boolean[][] board, int range) {
        for(int i = 0; i < range; i++) {
            StringBuilder sb = new StringBuilder();
            for(int j = 0; j < range; j++) {
                if(board[i][j] == true) {
                    sb.append("Q");
                }
                else {
                    sb.append(".");
                }
            }
            ls.add(sb.toString());
        }
    }
    
}