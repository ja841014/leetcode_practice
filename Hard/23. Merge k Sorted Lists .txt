/*
Given an array of linked-lists lists, each linked list is sorted in ascending order.
Merge all the linked-lists into one sort linked-list and return it.

Example 1:
Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted list:
1->1->2->3->4->4->5->6

Example 2:
Input: lists = []
Output: []

Example 3:
Input: lists = [[]]
Output: []
*/
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        
        ListNode merge = new ListNode();
        if(lists == null) {
            return null;
        }
        ListNode process_merge = merge;
        PriorityQueue<ListNode> pq = new PriorityQueue<>((a, b) -> a.val - b.val);
        for(ListNode i : lists ) {
            if(i != null) {
                pq.offer(i);    
            }
        }
        while(!pq.isEmpty()) {
            ListNode tmp = pq.poll();
            process_merge.next = tmp;
            process_merge = process_merge.next;
            if(tmp.next != null) {
                pq.offer(tmp.next);
            }
        }
        return merge.next;
    }
}