/*
Given an array nums which consists of non-negative integers and an integer m, you can split the array into m non-empty continuous subarrays.
Write an algorithm to minimize the largest sum among these m subarrays.

Example 1:
Input: nums = [7,2,5,10,8], m = 2
Output: 18
Explanation:
There are four ways to split nums into two subarrays.
The best way is to split it into [7,2,5] and [10,8],
where the largest sum among the two subarrays is only 18.

Example 2:
Input: nums = [1,2,3,4,5], m = 2
Output: 9

Example 3:
Input: nums = [1,4,4], m = 3
Output: 4
*/
class Solution {
    public int splitArray(int[] nums, int m) {
        // 1. first find out biggest single num
        // 2. using binary search to find the bigger number as an answer
        int maxV = 0;
        int sum =0;
        for(int i : nums) {
            maxV = Math.max(maxV, i); 
            sum = sum + i;
        }
        int low = maxV;
        int high = sum;
        // binary search
        while(low < high) {
            int mid = (high - low) / 2 + low;
            // if false go left part
            if(helper(m, nums, mid) == false) {
                high = mid;
            }
            // go right part (bigger)
            else {
                low = mid + 1;
            }
        }
        return low;
    }
    
    public boolean helper (int m, int[] nums, int limit) {
        int accumulate = 0;
        int group = 0;
        
        for(int i : nums) {
            if(accumulate + i <= limit) {
                accumulate = accumulate + i;
            }
            else {
                group++;
                accumulate = i;
            }
        }
        if(accumulate > 0) {
            group++;
        }
        // limit too small
        if(group > m) {
            return true;
        }
        return false;
    }
    
}