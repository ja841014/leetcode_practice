/*
You are given an integer array stations that represents the positions of the gas stations on the x-axis. You are also given an integer k.
You should add k new gas stations. You can add the stations anywhere on the x-axis, and not necessarily on an integer position.
Let penalty() be the maximum distance between adjacent gas stations after adding the k new stations.
Return the smallest possible value of penalty(). Answers within 10-6 of the actual answer will be accepted.
 
Example 1:
Input: stations = [1,2,3,4,5,6,7,8,9,10], k = 9
Output: 0.50000

Example 2:
Input: stations = [23,24,36,39,46,56,57,65,84,98], k = 1
Output: 14.00000
*/
class Solution {
    public double minmaxGasDist(int[] stations, int k) {
        // double target = (double)k;
        double left = 0.0;
        double right = 0.0;
        for(int i = 1; i < stations.length; i++) {
            right = Math.max(stations[i] - stations[i - 1], right);
        }
        //"Answers within 10^-6 of the true value will be accepted as correct.".
        double tolerance = 0.000001;
        // we have to use <= in this binary search, because we cannot simply add one in "left"
        while(left <= right - tolerance) {
            double mid = (right - left) / 2.0 + left;
            double count = 0;
            for(int i = 1; i < stations.length; i++) {
                count = count + Math.ceil( (stations[i] - stations[i - 1]) / mid) - 1;
            }
            if(count > k) {
                left = mid;
            }
            else {
                right = mid;
            }
        }
        return left;
    }
}