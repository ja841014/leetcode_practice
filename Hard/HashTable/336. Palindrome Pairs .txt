/*
Given a list of unique words, return all the pairs of the distinct indices (i, j) in the given list, so that the concatenation of the two words words[i] + words[j] is a palindrome.

Example 1:
Input: words = ["abcd","dcba","lls","s","sssll"]
Output: [[0,1],[1,0],[3,2],[2,4]]
Explanation: The palindromes are ["dcbaabcd","abcddcba","slls","llssssll"]

Example 2:
Input: words = ["bat","tab","cat"]
Output: [[0,1],[1,0]]
Explanation: The palindromes are ["battab","tabbat"]

Example 3:
Input: words = ["a",""]
Output: [[0,1],[1,0]]
*/
class Solution {
    public List<List<Integer>> palindromePairs(String[] words) {
        Map<String, Integer> map = new HashMap<>();
        for(int i = 0; i < words.length; i++) {
            map.put(words[i], i);
        }
        
        List<List<Integer>> result = new ArrayList<>();
        
        for(String str : words) {
            int currentIndex = map.get(str);
            // case 1: "abc" "cba" same length
            String reverseStr = new StringBuilder(str).reverse().toString();
            // we need "map.get(reverseStr) != currentIndex)" 
            // because there is a testcase like "s"
            // if we do not have this condition it will form "ss" which is not allowed in this question
            if(map.containsKey(reverseStr) && map.get(reverseStr) != currentIndex) {
                result.add(Arrays.asList(currentIndex, map.get(reverseStr)));
            }
            
            // put this string at suffix position
            // and check whether there is a string can form a palidrome when paste in front of this str
            for(String suffixStr : allValidSuffixStr(str)) {
                reverseStr = new StringBuilder(suffixStr).reverse().toString();
                if(map.containsKey(reverseStr)) {
                    result.add(Arrays.asList(map.get(reverseStr), currentIndex));
                }
            }
            
            // put this string at prefix position
            for(String prefixStr : allValidPrefixStr(str)) {
                reverseStr = new StringBuilder(prefixStr).reverse().toString();
                if(map.containsKey(reverseStr)) {
                    result.add(Arrays.asList(currentIndex, map.get(reverseStr) ));
                }
            }
            
        }
        return result;
    }
    
    private List<String> allValidPrefixStr(String str) {
        List<String> ls = new ArrayList<>();
        for(int i = 0; i < str.length(); i++) {
            // check from 0-Len 1-Len 2-Len 3-Len. etc.
            if(isPalindromeBetween(str, i, str.length() - 1 )) {
                // if it is a palidrome, we substring this string
                ls.add(str.substring(0, i));
            }
        }
        return ls;
    }
    
    private List<String> allValidSuffixStr(String str) {
        List<String> ls = new ArrayList<>();
        for(int i = 0; i < str.length(); i++) {
            // check from 0-1 0-2 0-3 0-4. etc.
            if(isPalindromeBetween(str, 0 ,i)) {
                // if it is a palidrome, we substring this string
                ls.add(str.substring(i + 1, str.length()));
            }
        }
        return ls;
    }
    
    private boolean isPalindromeBetween(String str, int start, int end) {
        
        while(start < end) {
            if(str.charAt(start) != str.charAt(end)) {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
}