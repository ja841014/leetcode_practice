/*
Note: the line means the "straight line".
TIME: O(MN)
Given a 01 matrix M, find the longest line of consecutive one in the matrix. The line could be horizontal, vertical, diagonal or anti-diagonal.
Example:

Input:
[[0,1,1,0],
 [0,1,1,0],
 [0,0,0,1]]
Output: 3
*/
class Solution {
    private int boxX;
    private int boxY;
    private int[][] direction = {{0,1}, {1,1}, {1,0}, {1,-1}};
    private int[][][] visited;
    
    public int longestLine(int[][] matrix) {
        if(matrix.length == 0) {
            return 0;
        }
        boxX = matrix.length;
        boxY = matrix[0].length;

        visited = new int[boxX][boxY][4];
        int longest = 0;
        
        for(int i = 0; i < boxX; i++) {
            for(int j = 0; j < boxY; j++) {
                if(matrix[i][j] == 1) {
                    // horizontal
                    visited[i][j][0] = j > 0 ? visited[i][j - 1][0] + 1 : 1;
                    // vertival
                    visited[i][j][1] = i > 0 ? visited[i - 1][j][1] + 1: 1;
                    // diagonal
                    visited[i][j][2] = (i > 0 && j > 0) ? visited[i - 1][j - 1][2] + 1: 1;
                    // anti-diagonal
                    visited[i][j][3] = (i > 0 && j < boxY - 1) ? visited[i - 1][j + 1][3] + 1: 1;
                    longest = Math.max(longest, Math.max(visited[i][j][0], Math.max(visited[i][j][1], Math.max(visited[i][j][2],visited[i][j][3]) ) ) );
                }
                
            }
        }
        return longest;
    }
                                       
}