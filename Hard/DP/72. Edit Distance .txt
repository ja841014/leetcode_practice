// Given two words word1 and word2, find the minimum number of operations required to convert word1 to word2.

// You have the following 3 operations permitted on a word:

// Insert a character
// Delete a character
// Replace a character
// Example 1:

// Input: word1 = "horse", word2 = "ros"
// Output: 3
// Explanation: 
// horse -> rorse (replace 'h' with 'r')
// rorse -> rose (remove 'r')
// rose -> ros (remove 'e')
class Solution {
    public int minDistance(String word1, String word2) {
        int size1 = word1.length();
        int size2 = word2.length();
        // create empty table
        int[][] table = new int[size1 + 1][size2 + 1];
        // base case => empty string
        for(int i = 0; i < size1 + 1; i++) {
            table[i][0] = i;
        }
        for(int i = 0; i < size2 + 1; i++) {
            table[0][i] = i;
        }
        // DP
        for(int i = 1; i < size1 + 1; i++) {
            for(int j = 1; j < size2 + 1; j++) {
                if(word1.charAt(i - 1) == word2.charAt(j - 1)) {
                // if the character is same, then the situation is same as you didn't add this character
                    table[i][j] = table[i-1][j-1];
                }
                else {
                    table[i][j] = Math.min(table[i-1][j-1], Math.min(table[i-1][j], table[i][j-1]) ) + 1;
                }
            }
        }
        return table[size1][size2];
    }
}