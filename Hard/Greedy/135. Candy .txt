// https://leetcode.com/problems/candy/discuss/135698/Simple-solution-with-one-pass-using-O(1)-space

/*
There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.
You are giving candies to these children subjected to the following requirements:
Each child must have at least one candy.
Children with a higher rating get more candies than their neighbors.
Return the minimum number of candies you need to have to distribute the candies to the children.

Example 1:
Input: ratings = [1,0,2]
Output: 5
Explanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.

Example 2:
Input: ratings = [1,2,2]
Output: 4
Explanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.
The third child gets 1 candy because it satisfies the above two conditions.
*/
class Solution {
    public int candy(int[] ratings) {
        int up = 0;
        int down = 0;
        int sum = 1;
        int peak = 0;
        for(int i = 1; i < ratings.length; i++) {
            // UPWARDS
            if(ratings[i - 1] < ratings[i]) {
                up++;
                peak = up;
                down = 0;
                // +1 is for itself, +up is for previous points
                sum = sum + 1 + up;
            }
            // DownWards
            else if(ratings[i - 1] > ratings[i]){
                up = 0;
                down++;
                if(down <= peak) {
                    sum = sum + down;
                }
                else {
                    sum = sum + down + 1;
                }
            }
            // flat
            else {
                up = 0;
                down = 0;
                peak = 0;
                sum = sum + 1;
            }
        }
        return sum;
    }
}

// 1 2 5 3 2 1

// 1 2 3 1         down = 1                      total add 1
// 1 2 3 2 1       down = 2                      total add 2
// 1 2 4 3 2 1     down = 3 (Now, peak >= down)  total add 4

// 1 2 5 4 4 3 1

// 1 2 3 1         down = 1                      total add 1
// 1 2 3 1 1       down = 0                      total add 1
// 1 2 3 1 2 1     down = 1(Now, peak >= down)   total add 2
// 1 2 3 1 3 2 1   down = 2                      total add 3