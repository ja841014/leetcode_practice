{\rtf1\ansi\ansicpg950\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import java.io.IOException;\
import java.util.*;\
import java.util.stream.Collectors;\
\
class Solution \{\
    \
    private static class comp implements Comparator<String> \{\
        int sortOrder;\
        int sortParameter;\
        HashMap<String, int[]> dataArray;\
        public comp(int sortParameter, int sortOrder, HashMap<String, int[]> dataArray) \{\
            this.sortOrder = sortOrder;\
            this.sortParameter = sortParameter;\
            this.dataArray = dataArray;\
        \}\
        \
        int res;\
        public int compare(String item1, String item2) \{\
            if(sortParameter == 0) \{\
                res = item1.compareTo(item2);\
            \}\
            else \{\
                res = dataArray.get(item1)[sortParameter - 1] - dataArray.get(item2)[sortParameter - 1] ;\
            \}\
            return res * (sortOrder == 0 ? 1 : -1);\
        \}\
    \} \
    \
    public static List<String> fetchItemsToDisplay(int sortParameter, int sortOrder, int itemsPerPage, int pageNumber, int numOfItems, HashMap<String, int[]> dataArray) \{\
        // WRITE YOUR BRILLIANT CODE HERE\
        List<String> items = new ArrayList(dataArray.keySet());\
        Collections.sort(items, new comp(sortParameter, sortOrder, dataArray));\
        \
        int startindex = itemsPerPage * pageNumber;\
        return items.subList(startindex, Math.min(startindex + itemsPerPage, items.size()));\
        \
    \}\
\
    public static void main(String[] args) throws IOException \{\
        Scanner scanner = new Scanner(System.in);\
        int sortParameter = Integer.parseInt(scanner.nextLine());\
        int sortOrder = Integer.parseInt(scanner.nextLine());\
        int itemsPerPage = Integer.parseInt(scanner.nextLine());\
        int pageNumber = Integer.parseInt(scanner.nextLine());\
        int numOfItems = Integer.parseInt(scanner.nextLine());\
        String [][] dataArray = new String[numOfItems][3];\
        HashMap<String, int[]> mapOfItems = new HashMap<>();\
        for (int i=0; i < numOfItems; i++) \{\
            String [] line = scanner.nextLine().split(" ");\
            for (int j=0; j<3; j++) \{\
              int[] intPair = \{Integer.parseInt(line[1]),Integer.parseInt(line[2])\};\
              mapOfItems.put(line[0], intPair);\
            \}\
        \}\
        System.out.println(fetchItemsToDisplay(sortParameter, sortOrder, itemsPerPage, pageNumber, numOfItems,  mapOfItems).stream().collect(Collectors.joining(" ")));\
    \}\
\}\
}