// I have implement 2 methods of DFS
// Given a 2d grid map of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

 

// Example 1:

// Input: grid = [
//   ["1","1","1","1","0"],
//   ["1","1","0","1","0"],
//   ["1","1","0","0","0"],
//   ["0","0","0","0","0"]
// ]
// Output: 1
class Solution {
    public int numIslands(char[][] grid) {
        int island = 0;
        for(int i = 0; i < grid.length; i++) {
            for(int j = 0; j < grid[0].length; j++) {
                if(grid[i][j] == '1') {
                    island++;
                    find_island(i, j, grid);
                }
            }
        }
        return island;
    }
    
    public void find_island(int row, int col, char[][] grid) {
        // left
        if(row >= 0 && row < grid.length && col - 1 >= 0) {
            if(grid[row][col - 1] == '1') {
                grid[row][col - 1] = '0';
                find_island(row, col - 1, grid);
            }
        }
        // right
        if(row < grid.length && row >= 0 && col + 1<= grid[0].length - 1) {
            if(grid[row][col + 1] == '1') {
                grid[row][col + 1] = '0';
                find_island(row, col + 1, grid);
            }
        }
        // up
        if(row - 1 >= 0 && col >= 0 && col <= grid[0].length - 1) {
            if(grid[row - 1][col] == '1') {
                grid[row - 1][col] = '0';
                find_island(row - 1, col, grid);
            }
        }
        // down
        if(row + 1 < grid.length && col >= 0 && col <= grid[0].length - 1) {
            if(grid[row + 1][col] == '1') {
                grid[row + 1][col] = '0';
                find_island(row + 1, col, grid);
            }
        }
    }
    // public void find_island(int row, int col, char[][] grid) {
    //     // boolean check = false; 
    //     if(row < 0 || row > grid.length - 1 || col < 0 || col > grid[0].length - 1 || grid[row][col] == '0') {
    //         return;
    //     }
    //     grid[row][col] = '0';
    //     // left
    //     find_island(row, col - 1, grid);
    //     // right
    //     find_island(row, col + 1, grid);
    //     // up
    //     find_island(row - 1, col, grid);
    //     // down
    //     find_island(row + 1, col, grid);
    // }
}