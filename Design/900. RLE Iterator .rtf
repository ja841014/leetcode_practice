{\rtf1\ansi\ansicpg950\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
We can use run-length encoding (i.e., RLE) to encode a sequence of integers. In a run-length encoded array of even length encoding (0-indexed), for all even i, encoding[i] tells us the number of times that the non-negative integer value encoding[i + 1] is repeated in the sequence.\
For example, the sequence arr = [8,8,8,5,5] can be encoded to be encoding = [3,8,2,5]. encoding = [3,8,0,9,2,5] and encoding = [2,8,1,8,2,5] are also valid RLE of arr.\
Given a run-length encoded array, design an iterator that iterates through it.\
\
Implement the RLEIterator class:\
RLEIterator(int[] encoded) Initializes the object with the encoded array encoded.\
int next(int n) Exhausts the next n elements and returns the last element exhausted in this way. If there is no element left to exhaust, return -1 instead.\
\
Example 1:\
Input\
["RLEIterator", "next", "next", "next", "next"]\
[[[3, 8, 0, 9, 2, 5]], [2], [1], [1], [2]]\
Output\
[null, 8, 8, 5, -1]\
\
Explanation\
RLEIterator rLEIterator = new RLEIterator([3, 8, 0, 9, 2, 5]); // This maps to the sequence [8,8,8,5,5].\
rLEIterator.next(2); // exhausts 2 terms of the sequence, returning 8. The remaining sequence is now [8, 5, 5].\
rLEIterator.next(1); // exhausts 1 term of the sequence, returning 8. The remaining sequence is now [5, 5].\
rLEIterator.next(1); // exhausts 1 term of the sequence, returning 5. The remaining sequence is now [5].\
rLEIterator.next(2); // exhausts 2 terms, returning -1. This is because the first term exhausted was 5,\
but the second term did not exist. Since the last term exhausted does not exist, we return -1.\
*/\
class RLEIterator \{\
    // track the encoding array.\
    int curIndex;\
    // track how many token we can use in next "n"\
    int remain;\
    int[] encoding;\
    boolean outOfBound;\
    public RLEIterator(int[] encoding) \{\
        this.encoding = encoding;\
        // ex: [3, 8, 0, 9, 2, 5]. we have 3 remian token\
        remain = encoding[0];\
        curIndex = 0;\
        outOfBound = false;\
    \}\
    \
    public int next(int n) \{\
        \
        if(outOfBound) \{\
            return -1;\
        \}\
        // when our token is not enough, we have to go to next pair to suppy.\
        while(remain < n ) \{\
            curIndex = curIndex + 2;\
            if(curIndex >= encoding.length) \{\
                // if we enter this if statement once, we always get outOfBound in the future.\
                outOfBound = true;\
                return -1;\
            \}\
            remain = remain + encoding[curIndex];\
        \}\
        remain = remain - n;\
        \
        return encoding[curIndex + 1];\
        \
    \}\
\}\
\
/**\
 * Your RLEIterator object will be instantiated and called as such:\
 * RLEIterator obj = new RLEIterator(encoding);\
 * int param_1 = obj.next(n);\
 */}