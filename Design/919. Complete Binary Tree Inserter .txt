/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class CBTInserter {
    TreeNode head;
    Queue<TreeNode> q;
    
    public CBTInserter(TreeNode root) {
        head = root;
        q = new LinkedList<>();
        buildQueue( head);
        
    }
    
    public int insert(int val) {
        TreeNode tmp = new TreeNode(val);
        int parentVal;
        
        TreeNode curInsertPos = q.peek();
        parentVal = curInsertPos.val;
        
        if(curInsertPos.left == null) {
            curInsertPos.left = tmp;
        }
        else {
            curInsertPos.right = tmp;
            q.poll();            
        }
        q.offer(tmp);
        return parentVal;
        
    }
    
    public TreeNode get_root() {
        return head;
    }
    
    // single queue
    public void buildQueue(TreeNode root) {
        q.offer(root);
        while(!q.isEmpty()) {
            
            TreeNode curNode = q.peek();
            
            if(curNode.left == null || curNode.right == null ) {
                // why we only check the left
                // because it is impossible that if we do not have left node but have right node
                if(curNode.left != null ) {
                    q.offer(curNode.left);
                }
                break;
            }
            // if curNode already have two children => poll out
            q.poll();
            if(curNode.left != null) {
                q.offer(curNode.left );
            }
            if(curNode.right != null) {
                q.offer(curNode.right );
            }
        }
    }
}

/**
 * Your CBTInserter object will be instantiated and called as such:
 * CBTInserter obj = new CBTInserter(root);
 * int param_1 = obj.insert(val);
 * TreeNode param_2 = obj.get_root();
 */