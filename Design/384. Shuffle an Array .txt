/*
Given an integer array nums, design an algorithm to randomly shuffle the array. All permutations of the array should be equally likely as a result of the shuffling.

Implement the Solution class:

Solution(int[] nums) Initializes the object with the integer array nums.
int[] reset() Resets the array to its original configuration and returns it.
int[] shuffle() Returns a random shuffling of the array.
 

Example 1:

Input
["Solution", "shuffle", "reset", "shuffle"]
[[[1, 2, 3]], [], [], []]
Output
[null, [3, 1, 2], [1, 2, 3], [1, 3, 2]]

Explanation
Solution solution = new Solution([1, 2, 3]);
solution.shuffle();    // Shuffle the array [1,2,3] and return its result.
                       // Any permutation of [1,2,3] must be equally likely to be returned.
                       // Example: return [3, 1, 2]
solution.reset();      // Resets the array back to its original configuration [1,2,3]. Return [1, 2, 3]
solution.shuffle();    // Returns the random shuffling of array [1,2,3]. Example: return [1, 3, 2]
*/
class Solution {
    int[] org;
    int[] arr;
    Random rnd = new Random();
    public Solution(int[] nums) {
        org = nums;
        arr = nums.clone();
    }
    
    /** Resets the array to its original configuration and return it. */
    public int[] reset() {
        return org;
    }
    
    /** Returns a random shuffling of the array. */
    public int[] shuffle() {
        int maxIndex = org.length;
        int minINdex = 0;
        for(int i = 0; i < org.length; i++)  {
            rndFunc(arr, org, maxIndex, i);
        }
        return arr;
    }
    
    public void rndFunc(int[]arr, int[] org, int max, int min) {
        int rndIdx = rnd.nextInt(max - min) + min;
        int tmpVal = arr[min];
        arr[min] = arr[rndIdx];
        arr[rndIdx] = tmpVal;
    }
}

/**
 * Your Solution object will be instantiated and called as such:
 * Solution obj = new Solution(nums);
 * int[] param_1 = obj.reset();
 * int[] param_2 = obj.shuffle();
 */